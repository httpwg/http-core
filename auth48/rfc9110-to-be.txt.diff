--- draft-ietf-httpbis-semantics-latest.txt	2022-01-02 15:15:49.143196000 +0100
+++ rfc9110-to-be.txt	2022-01-02 14:06:17.027960900 +0100
@@ -2,17 +2,17 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,        M. Nottingham, Ed.
-           7538, 7615, 7694 (if approved)                         Fastly
-Updates: 3864 (if approved)                              J. Reschke, Ed.
-Intended status: Standards Track                              greenbytes
-Expires: 6 July 2022                                      2 January 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9110                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 2818, 7230, 7231, 7232, 7233, 7235,                    Fastly
+           7538, 7615, 7694                              J. Reschke, Ed.
+Updates: 3864                                                 greenbytes
+Category: Standards Track                                  December 2021
+ISSN: 2070-1721
 
 
                              HTTP Semantics
-                  draft-ietf-httpbis-semantics-latest
 
 Abstract
 
@@ -24,54 +24,37 @@
    protocol elements, extensibility mechanisms, and the "http" and
    "https" Uniform Resource Identifier (URI) schemes.
 
-   This document updates RFC 3864 and obsoletes RFC 2818, RFC 7231, RFC
-   7232, RFC 7233, RFC 7235, RFC 7538, RFC 7615, RFC 7694, and portions
-   of RFC 7230.
-
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix C.21.
+   This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232,
+   7233, 7235, 7538, 7615, 7694, and portions of 7230.
 
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
+   This is an Internet Standards Track document.
 
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
-
-   This Internet-Draft will expire on 6 July 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9110.
 
 Copyright Notice
 
-   Copyright (c) 2022 IETF Trust and the persons identified as the
+   Copyright (c) 2021 IETF Trust and the persons identified as the
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -91,7 +74,7 @@
      1.1.  Purpose
      1.2.  History and Evolution
      1.3.  Core Semantics
-     1.4.  Specifications Obsoleted by this Document
+     1.4.  Specifications Obsoleted by This Document
    2.  Conformance
      2.1.  Syntax Notation
      2.2.  Requirements Notation
@@ -101,7 +84,7 @@
    3.  Terminology and Core Concepts
      3.1.  Resources
      3.2.  Representations
-     3.3.  Connections, Clients and Servers
+     3.3.  Connections, Clients, and Servers
      3.4.  Messages
      3.5.  User Agents
      3.6.  Origin Server
@@ -118,10 +101,10 @@
        4.2.5.  http(s) References with Fragment Identifiers
      4.3.  Authoritative Access
        4.3.1.  URI Origin
-       4.3.2.  http origins
-       4.3.3.  https origins
-       4.3.4.  https certificate verification
-       4.3.5.  IP-ID reference identity
+       4.3.2.  http Origins
+       4.3.3.  https Origins
+       4.3.4.  https Certificate Verification
+       4.3.5.  IP-ID Reference Identity
    5.  Fields
      5.1.  Field Names
      5.2.  Field Lines and Combined Field Value
@@ -146,7 +129,7 @@
        6.4.1.  Content Semantics
        6.4.2.  Identifying Content
      6.5.  Trailer Fields
-       6.5.1.  Limitations on use of Trailers
+       6.5.1.  Limitations on Use of Trailers
        6.5.2.  Processing Trailer Fields
      6.6.  Message Metadata
        6.6.1.  Date
@@ -350,7 +333,7 @@
      17.3.  Attacks Based on File and Path Names
      17.4.  Attacks Based on Command, Code, or Query Injection
      17.5.  Attacks via Protocol Element Length
-     17.6.  Attacks using Shared-dictionary Compression
+     17.6.  Attacks Using Shared-Dictionary Compression
      17.7.  Disclosure of Personal Information
      17.8.  Privacy of Server Log Information
      17.9.  Disclosure of Sensitive Information in URIs
@@ -380,7 +363,7 @@
      19.1.  Normative References
      19.2.  Informative References
    Appendix A.  Collected ABNF
-   Appendix B.  Changes from previous RFCs
+   Appendix B.  Changes from Previous RFCs
      B.1.  Changes from RFC 2818
      B.2.  Changes from RFC 7230
      B.3.  Changes from RFC 7231
@@ -390,28 +373,6 @@
      B.7.  Changes from RFC 7538
      B.8.  Changes from RFC 7615
      B.9.  Changes from RFC 7694
-   Appendix C.  Change Log
-     C.1.  Between RFC723x and draft 00
-     C.2.  Since draft-ietf-httpbis-semantics-00
-     C.3.  Since draft-ietf-httpbis-semantics-01
-     C.4.  Since draft-ietf-httpbis-semantics-02
-     C.5.  Since draft-ietf-httpbis-semantics-03
-     C.6.  Since draft-ietf-httpbis-semantics-04
-     C.7.  Since draft-ietf-httpbis-semantics-05
-     C.8.  Since draft-ietf-httpbis-semantics-06
-     C.9.  Since draft-ietf-httpbis-semantics-07
-     C.10. Since draft-ietf-httpbis-semantics-08
-     C.11. Since draft-ietf-httpbis-semantics-09
-     C.12. Since draft-ietf-httpbis-semantics-10
-     C.13. Since draft-ietf-httpbis-semantics-11
-     C.14. Since draft-ietf-httpbis-semantics-12
-     C.15. Since draft-ietf-httpbis-semantics-13
-     C.16. Since draft-ietf-httpbis-semantics-14
-     C.17. Since draft-ietf-httpbis-semantics-15
-     C.18. Since draft-ietf-httpbis-semantics-16
-     C.19. Since draft-ietf-httpbis-semantics-17
-     C.20. Since draft-ietf-httpbis-semantics-18
-     C.21. Since draft-ietf-httpbis-semantics-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -470,14 +431,14 @@
    content negotiation, opaque validators for conditional requests,
    cache controls for better cache consistency, range requests for
    partial updates, and default persistent connections.  HTTP/1.1 was
-   introduced in 1995 and published on the standards track in 1997
+   introduced in 1995 and published on the Standards Track in 1997
    [RFC2068], revised in 1999 [RFC2616], and revised again in 2014
-   ([RFC7230] - [RFC7235]).
+   ([RFC7230] through [RFC7235]).
 
-   HTTP/2 ([HTTP/2]) introduced a multiplexed session layer on top of
-   the existing TLS and TCP protocols for exchanging concurrent HTTP
+   HTTP/2 [HTTP/2] introduced a multiplexed session layer on top of the
+   existing TLS and TCP protocols for exchanging concurrent HTTP
    messages with efficient field compression and server push.  HTTP/3
-   ([HTTP/3]) provides greater independence for concurrent messages by
+   [HTTP/3] provides greater independence for concurrent messages by
    using QUIC as a secure multiplexed transport over UDP instead of TCP.
 
    All three major versions of HTTP rely on the semantics defined by
@@ -487,14 +448,14 @@
    transport and messaging syntax for their particular context.
 
    This revision of HTTP separates the definition of semantics (this
-   document) and caching ([CACHING]) from the current HTTP/1.1 messaging
-   syntax ([HTTP/1.1]) to allow each major protocol version to progress
+   document) and caching [CACHING] from the current HTTP/1.1 messaging
+   syntax [HTTP/1.1] to allow each major protocol version to progress
    independently while referring to the same core semantics.
 
 1.3.  Core Semantics
 
    HTTP provides a uniform interface for interacting with a resource
-   (Section 3.1) - regardless of its type, nature, or implementation -
+   (Section 3.1) -- regardless of its type, nature, or implementation --
    by sending messages that manipulate or transfer representations
    (Section 3.2).
 
@@ -520,34 +481,39 @@
    selection algorithms that are collectively referred to as _content
    negotiation_ (Section 12).
 
-1.4.  Specifications Obsoleted by this Document
-
-   This document obsoletes the following specifications:
+1.4.  Specifications Obsoleted by This Document
 
-   +============================================+===========+=========+
-   | Title                                      | Reference | Changes |
-   +============================================+===========+=========+
-   | HTTP Over TLS                              | [RFC2818] | B.1     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Message Syntax and Routing [*]    | [RFC7230] | B.2     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Semantics and Content             | [RFC7231] | B.3     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Conditional Requests              | [RFC7232] | B.4     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Range Requests                    | [RFC7233] | B.5     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP/1.1 Authentication                    | [RFC7235] | B.6     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Status Code 308 (Permanent Redirect)  | [RFC7538] | B.7     |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Authentication-Info and Proxy-        | [RFC7615] | B.8     |
-   | Authentication-Info Response Header Fields |           |         |
-   +--------------------------------------------+-----------+---------+
-   | HTTP Client-Initiated Content-Encoding     | [RFC7694] | B.9     |
-   +--------------------------------------------+-----------+---------+
+   +=============================+===========+================+
+   | Title                       | Reference | Changes Listed |
+   |                             |           | in Appendix:   |
+   +=============================+===========+================+
+   | HTTP Over TLS               | [RFC2818] | B.1            |
+   +-----------------------------+-----------+----------------+
+   | HTTP/1.1 Message Syntax and | [RFC7230] | B.2            |
+   | Routing [*]                 |           |                |
+   +-----------------------------+-----------+----------------+
+   | HTTP/1.1 Semantics and      | [RFC7231] | B.3            |
+   | Content                     |           |                |
+   +-----------------------------+-----------+----------------+
+   | HTTP/1.1 Conditional        | [RFC7232] | B.4            |
+   | Requests                    |           |                |
+   +-----------------------------+-----------+----------------+
+   | HTTP/1.1 Range Requests     | [RFC7233] | B.5            |
+   +-----------------------------+-----------+----------------+
+   | HTTP/1.1 Authentication     | [RFC7235] | B.6            |
+   +-----------------------------+-----------+----------------+
+   | HTTP Status Code 308        | [RFC7538] | B.7            |
+   | (Permanent Redirect)        |           |                |
+   +-----------------------------+-----------+----------------+
+   | HTTP Authentication-Info    | [RFC7615] | B.8            |
+   | and Proxy-Authentication-   |           |                |
+   | Info Response Header Fields |           |                |
+   +-----------------------------+-----------+----------------+
+   | HTTP Client-Initiated       | [RFC7694] | B.9            |
+   | Content-Encoding            |           |                |
+   +-----------------------------+-----------+----------------+
 
-                                 Table 1
+        Table 1: Specifications Obsoleted by This Document
 
    [*] This document only obsoletes the portions of RFC 7230 that are
    independent of the HTTP/1.1 messaging syntax and connection
@@ -589,8 +555,8 @@
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    This specification targets conformance criteria according to the role
@@ -792,7 +758,7 @@
    content for 200 (OK), 206 (Partial Content), and 304 (Not Modified)
    responses to GET (Section 9.3.1).
 
-3.3.  Connections, Clients and Servers
+3.3.  Connections, Clients, and Servers
 
    HTTP is a client/server protocol that operates over a reliable
    transport- or session-layer _connection_.
@@ -1024,8 +990,8 @@
    There is a wide variety of architectures and configurations of caches
    deployed across the World Wide Web and inside large organizations.
    These include national hierarchies of proxy caches to save bandwidth
-   and reduce latency, Content Delivery Networks that use gateway
-   caching to optimise regional and global distribution of popular
+   and reduce latency, content delivery networks that use gateway
+   caching to optimize regional and global distribution of popular
    sites, collaborative systems that broadcast or multicast cache
    entries, archives of pre-fetched cache entries for use in off-line or
    high-latency environments, and so on.
@@ -1132,7 +1098,7 @@
 
    The "http" URI scheme is hereby defined for minting identifiers
    within the hierarchical namespace governed by a potential HTTP origin
-   server listening for TCP ([TCP]) connections on a given port.
+   server listening for TCP [TCP] connections on a given port.
 
      http-URI = "http" "://" authority path-abempty [ "?" query ]
 
@@ -1149,16 +1115,16 @@
    reject it as invalid.
 
    The hierarchical path component and optional query component identify
-   the target resource within that origin server's name space.
+   the target resource within that origin server's namespace.
 
 4.2.2.  https URI Scheme
 
    The "https" URI scheme is hereby defined for minting identifiers
    within the hierarchical namespace governed by a potential origin
    server listening for TCP connections on a given port and capable of
-   establishing a TLS ([TLS13]) connection that has been secured for
-   HTTP communication.  In this context, _secured_ specifically means
-   that the server has been authenticated as acting on behalf of the
+   establishing a TLS [TLS13] connection that has been secured for HTTP
+   communication.  In this context, _secured_ specifically means that
+   the server has been authenticated as acting on behalf of the
    identified authority and all HTTP communication with that server has
    confidentiality and integrity protection that is acceptable to both
    client and server.
@@ -1178,7 +1144,7 @@
    reject it as invalid.
 
    The hierarchical path component and optional query component identify
-   the target resource within that origin server's name space.
+   the target resource within that origin server's namespace.
 
    A client MUST ensure that its HTTP requests for an "https" resource
    are secured, prior to being communicated, and that it only accepts
@@ -1202,7 +1168,7 @@
    the methods defined in Section 6 of [URI], using the defaults
    described above for each scheme.
 
-   HTTP does not require use of a specific method for determining
+   HTTP does not require the use of a specific method for determining
    equivalence.  For example, a cache key might be compared as a simple
    string, after syntax-based normalization, or after scheme-based
    normalization.
@@ -1323,7 +1289,7 @@
    Origin is also used within HTML and related Web protocols, beyond the
    scope of this document, as described in [RFC6454].
 
-4.3.2.  http origins
+4.3.2.  http Origins
 
    Although HTTP is independent of the transport protocol, the "http"
    scheme (Section 4.2.1) is specific to associating authority with
@@ -1361,7 +1327,7 @@
    "http" identified resources might also be provided by protocols
    outside the scope of this document.
 
-4.3.3.  https origins
+4.3.3.  https Origins
 
    The "https" scheme (Section 4.2.2) associates authority based on the
    ability of a server to use the private key corresponding to a
@@ -1391,7 +1357,7 @@
    namespaces that might be controlled by the same server (Section 7.2).
    It is the origin's responsibility to ensure that any services
    provided with control over its certificate's private key are equally
-   responsible for managing the corresponding "https" namespaces, or at
+   responsible for managing the corresponding "https" namespaces or at
    least prepared to reject requests that appear to have been
    misdirected (Section 7.4).
 
@@ -1430,7 +1396,7 @@
    authoritative response, nor does it imply that an authoritative
    response is always necessary (see [CACHING]).
 
-4.3.4.  https certificate verification
+4.3.4.  https Certificate Verification
 
    To establish a secured connection to dereference a URI, a client MUST
    verify that the service's identity is an acceptable match for the
@@ -1447,7 +1413,7 @@
    is a DNS-ID.
 
    A reference identity of type CN-ID MUST NOT be used by clients.  As
-   noted in Section 6.2.1 of [RFC6125] a reference identity of type CN-
+   noted in Section 6.2.1 of [RFC6125], a reference identity of type CN-
    ID might be used by older clients.
 
    A client might be specially configured to accept an alternative form
@@ -1470,20 +1436,21 @@
    setting that disables this check, but MUST provide a setting which
    enables it.
 
-4.3.5.  IP-ID reference identity
+4.3.5.  IP-ID Reference Identity
 
    A server that is identified using an IP address literal in the "host"
    field of an "https" URI has a reference identity of type IP-ID.  An
-   IP version 4 address uses the "IPv4address" ABNF rule and an IP
+   IP version 4 address uses the "IPv4address" ABNF rule, and an IP
    version 6 address uses the "IP-literal" production with the
    "IPv6address" option; see Section 3.2.2 of [URI].  A reference
    identity of IP-ID contains the decoded bytes of the IP address.
 
-   An IP version 4 address is 4 octets and an IP version 6 address is 16
-   octets.  Use of IP-ID is not defined for any other IP version.  The
-   iPAddress choice in the certificate subjectAltName extension does not
-   explicitly include the IP version and so relies on the length of the
-   address to distinguish versions; see Section 4.2.1.6 of [RFC5280].
+   An IP version 4 address is 4 octets, and an IP version 6 address is
+   16 octets.  Use of IP-ID is not defined for any other IP version.
+   The iPAddress choice in the certificate subjectAltName extension does
+   not explicitly include the IP version and so relies on the length of
+   the address to distinguish versions; see Section 4.2.1.6 of
+   [RFC5280].
 
    A reference identity of type IP-ID matches if the address is
    identical to an iPAddress value of the subjectAltName extension of
@@ -1568,14 +1535,14 @@
 
    This means that, aside from the well-known exception noted below, a
    sender MUST NOT generate multiple field lines with the same name in a
-   message (whether in the headers or trailers), or append a field line
+   message (whether in the headers or trailers) or append a field line
    when a field line of the same name already exists in the message,
    unless that field's definition allows multiple field line values to
-   be recombined as a comma-separated list [i.e., at least one
+   be recombined as a comma-separated list (i.e., at least one
    alternative of the field's definition allows a comma-separated list,
-   such as an ABNF rule of #(values) defined in Section 5.6.1].
+   such as an ABNF rule of #(values) defined in Section 5.6.1).
 
-      |  *Note:* In practice, the "Set-Cookie" header field ([COOKIE])
+      |  *Note:* In practice, the "Set-Cookie" header field [COOKIE]
       |  often appears in a response message across multiple field lines
       |  and does not use the list syntax, violating the above
       |  requirements on multiple field lines with the same field name.
@@ -1620,7 +1587,7 @@
 
    HTTP field values consist of a sequence of characters in a format
    defined by the field's grammar.  Each field's grammar is usually
-   defined using ABNF ([RFC5234]).
+   defined using ABNF [RFC5234].
 
      field-value    = *field-content
      field-content  = field-vchar
@@ -1905,8 +1872,8 @@
 
    A _clock_ is an implementation capable of providing a reasonable
    approximation of the current instant in UTC.  A clock implementation
-   ought to use NTP ([RFC5905]), or some similar protocol, to
-   synchronize with UTC.
+   ought to use NTP [RFC5905], or some similar protocol, to synchronize
+   with UTC.
 
    Preferred format:
 
@@ -1971,7 +1938,7 @@
    HTTP source that might generate any of the date and time
    specifications defined by the Internet Message Format.
 
-      |  *Note:* HTTP requirements for the date/time stamp format apply
+      |  *Note:* HTTP requirements for the date/timestamp format apply
       |  only to their usage within the protocol stream.
       |  Implementations are not required to use these formats for user
       |  presentation, request logging, etc.
@@ -2017,7 +1984,7 @@
    via prior messages).  However, a client MUST retain knowledge of the
    request when parsing, interpreting, or caching a corresponding
    response.  For example, responses to the HEAD method look just like
-   the beginning of a response to GET, but cannot be parsed in the same
+   the beginning of a response to GET but cannot be parsed in the same
    manner.
 
    Note that this message abstraction is a generalization across many
@@ -2057,10 +2024,10 @@
    Response message control data includes a status code (Section 15),
    optional reason phrase, and protocol version.
 
-   In HTTP/1.1 ([HTTP/1.1]) and earlier, control data is sent as the
-   first line of a message.  In HTTP/2 ([HTTP/2]) and HTTP/3 ([HTTP/3]),
-   control data is sent as pseudo-header fields with a reserved name
-   prefix (e.g., ":authority").
+   In HTTP/1.1 [HTTP/1.1] and earlier, control data is sent as the first
+   line of a message.  In HTTP/2 [HTTP/2] and HTTP/3 [HTTP/3], control
+   data is sent as pseudo-header fields with a reserved name prefix
+   (e.g., ":authority").
 
    Every HTTP message has a protocol version.  Depending on the version
    in use, it might be identified within the message explicitly or
@@ -2104,7 +2071,7 @@
 
 6.3.  Header Fields
 
-   Fields (Section 5) that are sent/received before the content are
+   Fields (Section 5) that are sent or received before the content are
    referred to as "header fields" (or just "headers", colloquially).
 
    The _header section_ of a message consists of a sequence of header
@@ -2125,8 +2092,8 @@
    This abstract definition of content reflects the data after it has
    been extracted from the message framing.  For example, an HTTP/1.1
    message body (Section 6 of [HTTP/1.1]) might consist of a stream of
-   data encoded with the chunked transfer coding - a sequence of data
-   chunks, one zero-length chunk, and a trailer section - whereas the
+   data encoded with the chunked transfer coding -- a sequence of data
+   chunks, one zero-length chunk, and a trailer section -- whereas the
    content of that same message includes only the data stream after the
    transfer coding has been decoded; it does not include the chunk
    lengths, chunked framing syntax, nor the trailer fields
@@ -2256,7 +2223,7 @@
    are received; those choices cannot be unmade by the later discovery
    of trailer fields.
 
-6.5.1.  Limitations on use of Trailers
+6.5.1.  Limitations on Use of Trailers
 
    A trailer section is only possible when supported by the version of
    HTTP in use and enabled by an explicit framing mechanism.  For
@@ -2565,11 +2532,10 @@
    its corresponding request is complete (Section 6.1).  Likewise,
    clients are not expected to wait any specific amount of time for a
    response.  Clients (including intermediaries) might abandon a request
-   if the response is not forthcoming within a reasonable period of
-   time.
+   if the response is not received within a reasonable period of time.
 
    A client that receives a response while it is still sending the
-   associated request SHOULD continue sending that request, unless it
+   associated request SHOULD continue sending that request unless it
    receives an explicit indication to the contrary (see, e.g.,
    Section 9.5 of [HTTP/1.1] and Section 6.4 of [HTTP/2]).
 
@@ -2586,7 +2552,7 @@
 
    Intermediaries are expected to forward messages even when protocol
    elements are not recognized (e.g., new methods, status codes, or
-   field names), since that preserves extensibility for downstream
+   field names) since that preserves extensibility for downstream
    recipients.
 
    An intermediary not acting as a tunnel MUST implement the Connection
@@ -2633,7 +2599,7 @@
 
    Furthermore, intermediaries SHOULD remove or replace field(s) whose
    semantics are known to require removal before forwarding, whether or
-   not they appear as a Connection option, after applying those fields'
+   not they appear as a connection option, after applying those fields'
    semantics.  This includes but is not limited to:
 
    *  Proxy-Connection (Appendix C.2.2 of [HTTP/1.1])
@@ -2669,8 +2635,8 @@
    When defining a new connection option that does not correspond to a
    field, specification authors ought to reserve the corresponding field
    name anyway in order to avoid later collisions.  Such reserved field
-   names are registered in the Hypertext Transfer Protocol (HTTP) Field
-   Name Registry (Section 16.3.1).
+   names are registered in the "Hypertext Transfer Protocol (HTTP) Field
+   Name Registry" (Section 16.3.1).
 
 7.6.2.  Max-Forwards
 
@@ -2815,13 +2781,13 @@
    (Section 3.2.4 of [HTTP/1.1]), depending on the request method.
 
    A proxy MUST NOT transform the content (Section 6.4) of a message
-   that contains a no-transform cache-control response directive
+   that contains a no-transform Cache-Control response directive
    (Section 5.2 of [CACHING]).  Note that this does not include changes
    to the message body that do not affect the content, such as transfer
    codings (Section 7 of [HTTP/1.1]).
 
    A proxy MAY transform the content of a message that does not contain
-   a no-transform cache-control directive.  A proxy that transforms the
+   a no-transform Cache-Control directive.  A proxy that transforms the
    content of a 200 (OK) response can inform downstream recipients that
    a transformation has been applied by changing the response status
    code to 203 (Non-Authoritative Information) (Section 15.3.4).
@@ -3062,7 +3028,7 @@
 
 8.3.3.  Multipart Types
 
-   MIME provides for a number of "multipart" types - encapsulations of
+   MIME provides for a number of "multipart" types -- encapsulations of
    one or more representations within a single message body.  All
    multipart types share a common syntax, as defined in Section 5.1.1 of
    [RFC2046], and include a boundary parameter as part of the media type
@@ -3097,7 +3063,7 @@
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.  Note that the coding named "identity" is reserved
-   for its special role in Accept-Encoding, and thus SHOULD NOT be
+   for its special role in Accept-Encoding and thus SHOULD NOT be
    included.
 
    Additional information about the encoding parameters can be provided
@@ -3205,8 +3171,8 @@
    to be used by an English-literate audience.  In this case, the
    Content-Language would properly only include "en".
 
-   Content-Language MAY be applied to any media type - it is not limited
-   to textual documents.
+   Content-Language MAY be applied to any media type -- it is not
+   limited to textual documents.
 
 8.5.1.  Language Tags
 
@@ -3244,7 +3210,7 @@
    can be used to delimit framing (e.g., Section 6.2 of [HTTP/1.1]).  In
    other cases, Content-Length indicates the selected representation's
    current length, which can be used by recipients to estimate transfer
-   time or compare to previously stored representations.
+   time or to compare to previously stored representations.
 
      Content-Length = 1*DIGIT
 
@@ -3303,12 +3269,12 @@
 
    Likewise, a sender MUST NOT forward a message with a Content-Length
    header field value that does not match the ABNF above, with one
-   exception: A recipient of a Content-Length header field value
+   exception: a recipient of a Content-Length header field value
    consisting of the same decimal value repeated as a comma-separated
-   list (e.g, "Content-Length: 42, 42"), MAY either reject the message
-   as invalid or replace that invalid field value with a single instance
-   of the decimal value, since this likely indicates that a duplicate
-   was generated or combined by an upstream message processor.
+   list (e.g, "Content-Length: 42, 42") MAY either reject the message as
+   invalid or replace that invalid field value with a single instance of
+   the decimal value, since this likely indicates that a duplicate was
+   generated or combined by an upstream message processor.
 
 8.7.  Content-Location
 
@@ -3532,7 +3498,7 @@
    An origin server SHOULD send Last-Modified for any selected
    representation for which a last modification date can be reasonably
    and consistently determined, since its use in conditional requests
-   and evaluating cache freshness ([CACHING]) can substantially reduce
+   and evaluating cache freshness [CACHING] can substantially reduce
    unnecessary transfers and significantly improve service availability
    and scalability.
 
@@ -3648,9 +3614,9 @@
    then the origin server MUST mark the entity-tag as weak by prefixing
    its opaque value with "W/" (case-sensitive).
 
-   A sender MAY send the Etag field in a trailer section (see
+   A sender MAY send the ETag field in a trailer section (see
    Section 6.5).  However, since trailers are often ignored, it is
-   preferable to send Etag as a header field unless the entity-tag is
+   preferable to send ETag as a header field unless the entity-tag is
    generated while sending the content.
 
 8.8.3.1.  Generation
@@ -3673,7 +3639,7 @@
    An origin server SHOULD send an ETag for any selected representation
    for which detection of changes can be reasonably and consistently
    determined, since the entity-tag's use in conditional requests and
-   evaluating cache freshness ([CACHING]) can substantially reduce
+   evaluating cache freshness [CACHING] can substantially reduce
    unnecessary transfers and significantly improve service availability,
    scalability, and reliability.
 
@@ -3942,9 +3908,9 @@
 9.2.3.  Methods and Caching
 
    For a cache to store and use a response, the associated method needs
-   to explicitly allow caching, and detail under what conditions a
+   to explicitly allow caching and to detail under what conditions a
    response can be used to satisfy subsequent requests; a method
-   definition which does not do so cannot be cached.  For additional
+   definition that does not do so cannot be cached.  For additional
    requirements see [CACHING].
 
    This specification defines caching semantics for GET, HEAD, and POST,
@@ -4186,9 +4152,9 @@
    request) and the validator field value reflects the new
    representation.  This requirement allows a user agent to know when
    the representation it sent (and retains in memory) is the result of
-   the PUT, and thus doesn't need to be retrieved again from the origin
-   server.  The new validator(s) received in the response can be used
-   for future conditional requests in order to prevent accidental
+   the PUT, and thus it doesn't need to be retrieved again from the
+   origin server.  The new validator(s) received in the response can be
+   used for future conditional requests in order to prevent accidental
    overwrites (Section 13.1).
 
    The fundamental difference between the POST and PUT methods is
@@ -4250,16 +4216,17 @@
    server will only allow DELETE on resources for which it has a
    prescribed mechanism for accomplishing the deletion.
 
-   Relatively few resources allow the DELETE method - its primary use is
-   for remote authoring environments, where the user has some direction
-   regarding its effect.  For example, a resource that was previously
-   created using a PUT request, or identified via the Location header
-   field after a 201 (Created) response to a POST request, might allow a
-   corresponding DELETE request to undo those actions.  Similarly,
-   custom user agent implementations that implement an authoring
-   function, such as revision control clients using HTTP for remote
-   operations, might use DELETE based on an assumption that the server's
-   URI space has been crafted to correspond to a version repository.
+   Relatively few resources allow the DELETE method -- its primary use
+   is for remote authoring environments, where the user has some
+   direction regarding its effect.  For example, a resource that was
+   previously created using a PUT request, or identified via the
+   Location header field after a 201 (Created) response to a POST
+   request, might allow a corresponding DELETE request to undo those
+   actions.  Similarly, custom user agent implementations that implement
+   an authoring function, such as revision control clients using HTTP
+   for remote operations, might use DELETE based on an assumption that
+   the server's URI space has been crafted to correspond to a version
+   repository.
 
    If a DELETE method is successfully applied, the origin server SHOULD
    send
@@ -4415,7 +4382,7 @@
    the request message.  The final recipient of the request SHOULD
    reflect the message received, excluding some fields described below,
    back to the client as the content of a 200 (OK) response.  The
-   "message/http" (Section 10.1 of [HTTP/1.1]) format is one way to do
+   "message/http" format (Section 10.1 of [HTTP/1.1]) is one way to do
    so.  The final recipient is either the origin server or the first
    server to receive a Max-Forwards value of zero (0) in the request
    (Section 7.6.2).
@@ -4651,12 +4618,12 @@
    The "TE" header field describes capabilities of the client with
    regard to transfer encodings and trailer sections.
 
-   A TE field with a "trailers" member sent in a request indicates that
-   the client will not discard trailer fields, as described in
-   Section 6.5.
+   As described in Section 6.5, a TE field with a "trailers" member sent
+   in a request indicates that the client will not discard trailer
+   fields.
 
-   TE is also used within HTTP/1.1 to advise servers about what transfer
-   codings the client is able to accept in a response.  As of
+   TE is also used within HTTP/1.1 to advise servers about which
+   transfer codings the client is able to accept in a response.  As of
    publication, only HTTP/1.1 uses transfer codings (see Section 7 of
    [HTTP/1.1]).
 
@@ -4751,7 +4718,7 @@
    resource allows no methods, which might occur in a 405 response if
    the resource has been temporarily disabled by configuration.
 
-   A proxy MUST NOT modify the Allow header field - it does not need to
+   A proxy MUST NOT modify the Allow header field -- it does not need to
    understand all of the indicated methods in order to handle them
    according to the generic message handling rules.
 
@@ -4887,7 +4854,7 @@
    authentication schemes, which can be used by a server to challenge a
    client request and by a client to provide authentication information.
    It uses a case-insensitive token to identify the authentication
-   scheme
+   scheme:
 
      auth-scheme    = token
 
@@ -4896,7 +4863,7 @@
    specified independently and ought to be registered within the
    "Hypertext Transfer Protocol (HTTP) Authentication Scheme Registry".
    For example, the "basic" and "digest" authentication schemes are
-   defined by RFC 7617 and RFC 7616, respectively.
+   defined by RFC 7617 [RFC7617] and RFC 7616 [RFC7616], respectively.
 
 11.2.  Authentication Parameters
 
@@ -4908,10 +4875,10 @@
      token68        = 1*( ALPHA / DIGIT /
                           "-" / "." / "_" / "~" / "+" / "/" ) *"="
 
-   The token68 syntax allows the 66 unreserved URI characters ([URI]),
+   The token68 syntax allows the 66 unreserved URI characters [URI],
    plus a few others, so that it can hold a base64, base64url (URL and
    filename safe alphabet), base32, or base16 (hex) encoding, with or
-   without padding, but excluding whitespace ([RFC4648]).
+   without padding, but excluding whitespace [RFC4648].
 
    Authentication parameters are name=value pairs, where the name token
    is matched case-insensitively and each parameter name MUST only occur
@@ -4949,14 +4916,14 @@
       |  supported schemes (such as "basic") first.
 
    A user agent that wishes to authenticate itself with an origin server
-   - usually, but not necessarily, after receiving a 401 (Unauthorized)
-   - can do so by including an Authorization header field with the
+   -- usually, but not necessarily, after receiving a 401 (Unauthorized)
+   -- can do so by including an Authorization header field with the
    request.
 
-   A client that wishes to authenticate itself with a proxy - usually,
+   A client that wishes to authenticate itself with a proxy -- usually,
    but not necessarily, after receiving a 407 (Proxy Authentication
-   Required) - can do so by including a Proxy-Authorization header field
-   with the request.
+   Required) -- can do so by including a Proxy-Authorization header
+   field with the request.
 
 11.4.  Credentials
 
@@ -5067,12 +5034,12 @@
    WWW-Authenticate: Basic realm="simple", Newauth realm="apps",
                     type=1, title="Login to \"apps\""
 
-   This header field contains two challenges; one for the "Basic" scheme
-   with a realm value of "simple", and another for the "Newauth" scheme
-   with a realm value of "apps", and two additional parameters "type"
-   and "title".
+   This header field contains two challenges, one for the "Basic" scheme
+   with a realm value of "simple" and another for the "Newauth" scheme
+   with a realm value of "apps".  It also contains two additional
+   parameters, "type" and "title".
 
-   Some user agents do not recognise this form, however.  As a result,
+   Some user agents do not recognize this form, however.  As a result,
    sending a WWW-Authenticate field value with more than one member on
    the same field line might not be interoperable.
 
@@ -5086,7 +5053,7 @@
 11.6.2.  Authorization
 
    The "Authorization" header field allows a user agent to authenticate
-   itself with an origin server - usually, but not necessarily, after
+   itself with an origin server -- usually, but not necessarily, after
    receiving a 401 (Unauthorized) response.  Its value consists of
    credentials containing the authentication information of the user
    agent for the realm of the resource being requested.
@@ -5106,11 +5073,11 @@
 
 11.6.3.  Authentication-Info
 
-   HTTP authentication schemes can use the Authentication-Info response
-   field to communicate information after the client's authentication
-   credentials have been accepted.  This information can include a
-   finalization message from the server (e.g., it can contain the server
-   authentication).
+   HTTP authentication schemes can use the "Authentication-Info"
+   response field to communicate information after the client's
+   authentication credentials have been accepted.  This information can
+   include a finalization message from the server (e.g., it can contain
+   the server authentication).
 
    The field value is a list of parameters (name/value pairs), using the
    "auth-param" syntax defined in Section 11.3.  This specification only
@@ -5179,11 +5146,11 @@
 
 11.7.3.  Proxy-Authentication-Info
 
-   The Proxy-Authentication-Info response header field is equivalent to
-   Authentication-Info, except that it applies to proxy authentication
-   (Section 11.3) and its semantics are defined by the authentication
-   scheme indicated by the Proxy-Authorization header field
-   (Section 11.7.2) of the corresponding request:
+   The "Proxy-Authentication-Info" response header field is equivalent
+   to Authentication-Info, except that it applies to proxy
+   authentication (Section 11.3) and its semantics are defined by the
+   authentication scheme indicated by the Proxy-Authorization header
+   field (Section 11.7.2) of the corresponding request:
 
      Proxy-Authentication-Info = #auth-param
 
@@ -5216,8 +5183,8 @@
    This specification defines three patterns of content negotiation that
    can be made visible within the protocol: "proactive" negotiation,
    where the server selects the representation based upon the user
-   agent's stated preferences, "reactive" negotiation, where the server
-   provides a list of representations for the user agent to choose from,
+   agent's stated preferences; "reactive" negotiation, where the server
+   provides a list of representations for the user agent to choose from;
    and "request content" negotiation, where the user agent selects the
    representation for a future request based upon the server's stated
    preferences in past responses.
@@ -5256,7 +5223,7 @@
    selecting from among the available representations is difficult to
    describe to a user agent, or when the server desires to send its
    "best guess" to the user agent along with the first response (when
-   that "best guess" is good enough for the user, this avoids the round
+   that "best guess" is good enough for the user, this avoids the round-
    trip delay of a subsequent request).  In order to improve the
    server's guess, a user agent MAY send request header fields that
    describe its preferences.
@@ -5344,7 +5311,7 @@
    content codings for subsequent requests to that resource.
 
    Similarly, Section 3.1 of [RFC5789] defines the "Accept-Patch"
-   response header field which allows discovery of which content types
+   response header field, which allows discovery of which content types
    are accepted in PATCH requests.
 
 12.4.  Content Negotiation Field Features
@@ -5400,13 +5367,13 @@
    variance is unlimited.
 
       |  *Note:* In practice, using wildcards in content negotiation has
-      |  limited practical value, because it is seldom useful to say,
-      |  for example, "I prefer image/* more or less than (some other
-      |  specific value)".  Clients can explicitly request a 406 (Not
-      |  Acceptable) response if a more preferred format is not
-      |  available by sending Accept: */*;q=0, but they still need to be
-      |  able to handle a different response, since the server is
-      |  allowed to ignore their preference.
+      |  limited practical value because it is seldom useful to say, for
+      |  example, "I prefer image/* more or less than (some other
+      |  specific value)".  By sending Accept: */*;q=0, clients can
+      |  explicitly request a 406 (Not Acceptable) response if a more
+      |  preferred format is not available, but they still need to be
+      |  able to handle a different response since the server is allowed
+      |  to ignore their preference.
 
 12.5.  Content Negotiation Fields
 
@@ -5419,8 +5386,8 @@
    of a request for an in-line image.
 
    When sent by a server in a response, Accept provides information
-   about what content types are preferred in the content of a subsequent
-   request to the same resource.
+   about which content types are preferred in the content of a
+   subsequent request to the same resource.
 
      Accept = #( media-range [ weight ] )
 
@@ -5543,7 +5510,7 @@
       |  nearly ubiquitous and sending a detailed list of user-preferred
       |  charsets wastes bandwidth, increases latency, and makes passive
       |  fingerprinting far too easy (Section 17.13).  Most general-
-      |  purpose user agents do not send Accept-Charset, unless
+      |  purpose user agents do not send Accept-Charset unless
       |  specifically configured to do so.
 
 12.5.3.  Accept-Encoding
@@ -5555,7 +5522,7 @@
    content codings acceptable in a response.
 
    When sent by a server in a response, Accept-Encoding provides
-   information about what content codings are preferred in the content
+   information about which content codings are preferred in the content
    of a subsequent request to the same resource.
 
    An "identity" token is used as a synonym for "no encoding" in order
@@ -5602,11 +5569,10 @@
 
    An Accept-Encoding header field with a field value that is empty
    implies that the user agent does not want any content coding in
-   response.  If a non-empty Accept-Encoding header field is present in
-   a request and none of the available representations for the response
-   have a content coding that is listed as acceptable, the origin server
-   SHOULD send a response without any content coding unless the identity
-   coding is indicated as unacceptable.
+   response.  If an Accept-Encoding header field is present in a request
+   and none of the available representations for the response have a
+   content coding that is listed as acceptable, the origin server SHOULD
+   send a response without any content coding.
 
    When the Accept-Encoding header field is present in a response, it
    indicates what content codings the resource was willing to accept in
@@ -5630,11 +5596,11 @@
    The most common use of Accept-Encoding is in responses with a 415
    (Unsupported Media Type) status code, in response to optimistic use
    of a content coding by clients.  However, the header field can also
-   be used to indicate to clients that content codings are supported, to
-   optimize future interactions.  For example, a resource might include
-   it in a 2xx (Successful) response when the request content was big
-   enough to justify use of a compression coding but the client failed
-   do so.
+   be used to indicate to clients that content codings are supported in
+   order to optimize future interactions.  For example, a resource might
+   include it in a 2xx (Successful) response when the request content
+   was big enough to justify use of a compression coding but the client
+   failed do so.
 
 12.5.4.  Accept-Language
 
@@ -5751,7 +5717,7 @@
    There is no need to send the Authorization field name in Vary because
    reuse of that response for a different user is prohibited by the
    field definition (Section 11.6.2).  Likewise, if the response content
-   has been selected or influenced by network region but the origin
+   has been selected or influenced by network region, but the origin
    server wants the cached response to be reused even if recipients move
    from one region to another, then there is no need for the origin
    server to indicate such variance in Vary.
@@ -5838,7 +5804,7 @@
 
    When an origin server receives a request that selects a
    representation and that request includes an If-Match header field,
-   the origin server MUST evaluate the If-Match condition as per
+   the origin server MUST evaluate the If-Match condition per
    Section 13.2 prior to performing the method.
 
    To evaluate a received If-Match header field:
@@ -5869,7 +5835,7 @@
    many authoring use cases, but comes with some risk if multiple user
    agents are making change requests that are very similar but not
    cooperative.  For example, multiple user agents writing to a common
-   resource as a semaphore (e.g., a non-atomic increment) are likely to
+   resource as a semaphore (e.g., a nonatomic increment) are likely to
    collide and potentially lose important state transitions.  For those
    kinds of resources, an origin server is better off being stringent in
    sending 412 for every failed precondition on an unsafe method.  In
@@ -5880,8 +5846,8 @@
    A client MAY send an If-Match header field in a GET request to
    indicate that it would prefer a 412 (Precondition Failed) response if
    the selected representation does not match.  However, this is only
-   useful in range requests (Section 14), for completing a previously
-   received partial representation, when there is no desire for a new
+   useful in range requests (Section 14) for completing a previously
+   received partial representation when there is no desire for a new
    representation.  If-Range (Section 13.1.5) is better suited for range
    requests when the client prefers to receive a new representation.
 
@@ -5935,7 +5901,7 @@
 
    When an origin server receives a request that selects a
    representation and that request includes an If-None-Match header
-   field, the origin server MUST evaluate the If-None-Match condition as
+   field, the origin server MUST evaluate the If-None-Match condition
    per Section 13.2 prior to performing the method.
 
    To evaluate a received If-None-Match header field:
@@ -6024,7 +5990,7 @@
    When an origin server receives a request that selects a
    representation and that request includes an If-Modified-Since header
    field without an If-None-Match header field, the origin server SHOULD
-   evaluate the If-Modified-Since condition as per Section 13.2 prior to
+   evaluate the If-Modified-Since condition per Section 13.2 prior to
    performing the method.
 
    To evaluate a received If-Modified-Since header field:
@@ -6087,8 +6053,8 @@
    When an origin server receives a request that selects a
    representation and that request includes an If-Unmodified-Since
    header field without an If-Match header field, the origin server MUST
-   evaluate the If-Unmodified-Since condition as per Section 13.2 prior
-   to performing the method.
+   evaluate the If-Unmodified-Since condition per Section 13.2 prior to
+   performing the method.
 
    To evaluate a received If-Unmodified-Since header field:
 
@@ -6121,8 +6087,8 @@
    A client MAY send an If-Unmodified-Since header field in a GET
    request to indicate that it would prefer a 412 (Precondition Failed)
    response if the selected representation has been modified.  However,
-   this is only useful in range requests (Section 14), for completing a
-   previously received partial representation, when there is no desire
+   this is only useful in range requests (Section 14) for completing a
+   previously received partial representation when there is no desire
    for a new representation.  If-Range (Section 13.1.5) is better suited
    for range requests when the client prefers to receive a new
    representation.
@@ -6171,8 +6137,8 @@
    strong validator in the sense defined by Section 8.8.2.2.
 
    A server that receives an If-Range header field on a Range request
-   MUST evaluate the condition as per Section 13.2 prior to performing
-   the method.
+   MUST evaluate the condition per Section 13.2 prior to performing the
+   method.
 
    To evaluate a received If-Range header field containing an HTTP-date:
 
@@ -6199,9 +6165,9 @@
    recipient SHOULD process the Range header field as requested.
 
    Note that the If-Range comparison is by exact match, including when
-   the validator is an HTTP-date, and so differs from the "earlier than
-   or equal to" comparison used when evaluating an If-Unmodified-Since
-   conditional.
+   the validator is an HTTP-date, and so it differs from the "earlier
+   than or equal to" comparison used when evaluating an
+   If-Unmodified-Since conditional.
 
 13.2.  Evaluation of Preconditions
 
@@ -6333,7 +6299,7 @@
 
    Representation data can be partitioned into subranges when there are
    addressable structural units inherent to that data's content coding
-   or media type.  For example, octet (a.k.a., byte) boundaries are a
+   or media type.  For example, octet (a.k.a. byte) boundaries are a
    structural unit common to all representation data, allowing
    partitions of the data to be identified as a range of bytes at some
    offset from the start or end of that data.
@@ -6493,7 +6459,7 @@
    and partial retrieval of large representations.
 
    A server MUST ignore a Range header field received with a request
-   method which is unrecognized or for which range handling is not
+   method that is unrecognized or for which range handling is not
    defined.  For this specification, GET is the only method for which
    range handling is defined.
 
@@ -6724,7 +6690,7 @@
 
    3.  A number of clients and servers were coded to an early draft of
        the byteranges specification that used a media type of multipart/
-       x-byteranges , which is almost (but not quite) compatible with
+       x-byteranges, which is almost (but not quite) compatible with
        this type.
 
    Despite the name, the "multipart/byteranges" media type is not
@@ -6767,10 +6733,10 @@
 
    Interoperability considerations:  N/A
 
-   Published specification:  This specification (see Section 14.6).
+   Published specification:  This specification (see Section 14.6)
 
    Applications that use this media type:  HTTP components supporting
-      multiple ranges in a single request.
+      multiple ranges in a single request
 
    Fragment identifier considerations:  N/A
 
@@ -6782,14 +6748,14 @@
 
                             Macintosh file type code(s):  N/A
 
-   Person and email address to contact for further information:  See Aut
-      hors' Addresses section.
+   Person and email address to contact for further information:
+      See Authors' Addresses section
 
    Intended usage:  COMMON
 
    Restrictions on usage:  N/A
 
-   Author:  See Authors' Addresses section.
+   Author:  See Authors' Addresses section
 
    Change controller:  IESG
 
@@ -6846,7 +6812,7 @@
 15.1.  Overview of Status Codes
 
    The status codes listed below are defined in this specification.  The
-   reason phrases listed here are only recommendations - they can be
+   reason phrases listed here are only recommendations -- they can be
    replaced by local equivalents or left out altogether without
    affecting the protocol.
 
@@ -6927,7 +6893,7 @@
    of the content can be summarized as:
 
    +================+============================================+
-   | request method | response content is a representation of    |
+   | Request Method | Response content is a representation of:   |
    +================+============================================+
    | GET            | the target resource                        |
    +----------------+--------------------------------------------+
@@ -7103,10 +7069,10 @@
 
    A sender that generates a 206 response to a request with an If-Range
    header field SHOULD NOT generate other representation header fields
-   beyond those required, because the client already has a prior
-   response containing those header fields.  Otherwise, a sender MUST
-   generate all of the representation header fields that would have been
-   sent in a 200 (OK) response to the same request.
+   beyond those required because the client already has a prior response
+   containing those header fields.  Otherwise, a sender MUST generate
+   all of the representation header fields that would have been sent in
+   a 200 (OK) response to the same request.
 
    A 206 response is heuristically cacheable; i.e., unless otherwise
    indicated by explicit cache controls (see Section 4.2.2 of
@@ -7267,8 +7233,8 @@
       |  eventually converged on changing the method to GET.  307
       |  (Temporary Redirect) and 308 (Permanent Redirect) [RFC7538]
       |  were later added to unambiguously indicate method-preserving
-      |  redirects, and 301/302 have been adjusted to allow a POST
-      |  request to be redirected as GET.
+      |  redirects, and status codes 301 and 302 have been adjusted to
+      |  allow a POST request to be redirected as GET.
 
    If a Location header field (Section 10.2.2) is provided, the user
    agent MAY automatically redirect its request to the URI referenced by
@@ -7299,7 +7265,7 @@
 
        4.  Validating header fields that were added by the
            implementation's cache (e.g., If-None-Match,
-           If-Modified-Since),
+           If-Modified-Since), and
 
        5.  Resource-specific header fields, including (but not limited
            to) Referer, Origin, Authorization, and Cookie.
@@ -7531,8 +7497,8 @@
    Section 4.2.2 of [CACHING]).
 
       |  *Note:* This status code is much younger (June 2014) than its
-      |  sibling codes, and thus might not be recognized everywhere.
-      |  See Section 4 of [RFC7538] for deployment considerations.
+      |  sibling codes and thus might not be recognized everywhere.  See
+      |  Section 4 of [RFC7538] for deployment considerations.
 
 15.5.  Client Error 4xx
 
@@ -7650,7 +7616,7 @@
 
    If the client has an outstanding request in transit, it MAY repeat
    that request.  If the current connection is not usable (e.g., as it
-   would be in HTTP/1.1, because request delimitation is lost), a new
+   would be in HTTP/1.1 because request delimitation is lost), a new
    connection will be used.
 
 15.5.10.  409 Conflict
@@ -7686,7 +7652,7 @@
    for limited-time, promotional services and for resources belonging to
    individuals no longer associated with the origin server's site.  It
    is not necessary to mark all permanently unavailable resources as
-   "gone" or to keep the mark for any length of time - that is left to
+   "gone" or to keep the mark for any length of time -- that is left to
    the discretion of the server owner.
 
    A 410 response is heuristically cacheable; i.e., unless otherwise
@@ -7750,12 +7716,12 @@
 
    If the problem was caused by an unsupported content coding, the
    Accept-Encoding response header field (Section 12.5.3) ought to be
-   used to indicate what (if any) content codings would have been
+   used to indicate which (if any) content codings would have been
    accepted in the request.
 
    On the other hand, if the cause was an unsupported media type, the
    Accept response header field (Section 12.5.1) can be used to indicate
-   what media types would have been accepted in the request.
+   which media types would have been accepted in the request.
 
 15.5.17.  416 Range Not Satisfiable
 
@@ -7798,27 +7764,27 @@
 
 15.5.19.  418 (Unused)
 
-   [RFC2324] was an April 1 RFC that lampooned the various ways HTTP was
-   abused; one such abuse was the definition of an application-specific
-   418 status code.  In the intervening years, this status code has been
-   widely implemented as an "Easter Egg", and therefore is effectively
-   consumed by this use.
-
-   Therefore, the 418 status code is reserved in the IANA HTTP Status
-   Code Registry.  This indicates that the status code cannot be
-   assigned to other applications currently.  If future circumstances
-   require its use (e.g., exhaustion of 4NN status codes), it can be re-
-   assigned to another use.
+   [RFC2324] is an April 1st RFC that lampoons the various ways HTTP has
+   been abused; one such abuse is the definition of an application-
+   specific 418 status code.  In the intervening years, this status code
+   has been widely implemented as an "Easter egg" and therefore is
+   effectively consumed by this use.
+
+   Therefore, the 418 status code is reserved in the IANA "Hypertext
+   Transfer Protocol (HTTP) Status Code Registry".  This indicates that
+   the status code cannot be assigned to other applications currently.
+   If future circumstances require its use (e.g., exhaustion of 4NN
+   status codes), it can be re-assigned to another use.
 
 15.5.20.  421 Misdirected Request
 
-   The 421 (Misdirected Request) status code indicates that the request
-   was directed at a server that is unable or unwilling to produce an
-   authoritative response for the target URI.  An origin server (or
-   gateway acting on behalf of the origin server) sends 421 to reject a
-   target URI that does not match an origin for which the server has
-   been configured (Section 4.3.1) or does not match the connection
-   context over which the request was received (Section 7.4).
+   The _421 (Misdirected Request)_ status code indicates that the
+   request was directed at a server that is unable or unwilling to
+   produce an authoritative response for the target URI.  An origin
+   server (or gateway acting on behalf of the origin server) sends 421
+   to reject a target URI that does not match an origin for which the
+   server has been configured (Section 4.3.1) or does not match the
+   connection context over which the request was received (Section 7.4).
 
    A client that receives a 421 (Misdirected Request) response MAY retry
    the request, whether or not the request method is idempotent, over a
@@ -7829,12 +7795,12 @@
 
 15.5.21.  422 Unprocessable Content
 
-   The 422 (Unprocessable Content) status code indicates that the server
-   understands the content type of the request content (hence a 415
-   (Unsupported Media Type) status code is inappropriate), and the
-   syntax of the request content is correct, but was unable to process
-   the contained instructions.  For example, this status code can be
-   sent if an XML request content contains well-formed (i.e.,
+   The _422 (Unprocessable Content)_ status code indicates that the
+   server understands the content type of the request content (hence a
+   415 (Unsupported Media Type) status code is inappropriate), and the
+   syntax of the request content is correct, but it was unable to
+   process the contained instructions.  For example, this status code
+   can be sent if an XML request content contains well-formed (i.e.,
    syntactically correct), but semantically erroneous XML instructions.
 
 15.5.22.  426 Upgrade Required
@@ -7863,7 +7829,7 @@
    server SHOULD send a representation containing an explanation of the
    error situation, and whether it is a temporary or permanent
    condition.  A user agent SHOULD display any included representation
-   to the user.  These response codes are applicable to any request
+   to the user.  These status codes are applicable to any request
    method.
 
 15.6.1.  500 Internal Server Error
@@ -7927,7 +7893,7 @@
    introduce capabilities to the protocol without introducing a new
    version, including methods, status codes, field names, and further
    extensibility points within defined fields, such as authentication
-   schemes and cache-directives (see Cache-Control extensions in
+   schemes and cache directives (see Cache-Control extensions in
    Section 5.2.3 of [CACHING]).  Because the semantics of HTTP are not
    versioned, these extension points are persistent; the version of the
    protocol in use does not affect their semantics.
@@ -7939,8 +7905,8 @@
 
    Additionally, specific versions of HTTP might have their own
    extensibility points, such as transfer-codings in HTTP/1.1
-   (Section 6.1 of [HTTP/1.1]) and HTTP/2 ([HTTP/2]) SETTINGS or frame
-   types.  These extension points are specific to the version of the
+   (Section 6.1 of [HTTP/1.1]) and HTTP/2 SETTINGS or frame types
+   [HTTP/2].  These extension points are specific to the version of the
    protocol they occur within.
 
    Version-specific extensions cannot override or modify the semantics
@@ -8064,10 +8030,10 @@
 
    By default, a status code applies only to the request corresponding
    to the response it occurs within.  If a status code applies to a
-   larger scope of applicability - for example, all requests to the
-   resource in question, or all requests to a server - this must be
+   larger scope of applicability -- for example, all requests to the
+   resource in question or all requests to a server -- this must be
    explicitly specified.  When doing so, it should be noted that not all
-   clients can be expected to consistently apply a larger scope, because
+   clients can be expected to consistently apply a larger scope because
    they might not understand the new status code.
 
    The definition of a new final status code ought to specify whether or
@@ -8076,7 +8042,7 @@
    information; however, those status codes that are defined as being
    heuristically cacheable are allowed to be cached without explicit
    freshness information.  Likewise, the definition of a status code can
-   place constraints upon cache behavior, if the 'must-understand' cache
+   place constraints upon cache behavior if the 'must-understand' cache
    directive is used.  See [CACHING] for more information.
 
    Finally, the definition of a new status code ought to indicate
@@ -8119,7 +8085,7 @@
    located there or by sending an email to the "ietf-http-wg@w3.org"
    mailing list.
 
-   Field names are registered on the advice of a Designated Expert
+   Field names are registered on the advice of a designated expert
    (appointed by the IESG or their delegate).  Fields with the status
    'permanent' are Specification Required ([RFC8126], Section 4.6).
 
@@ -8127,12 +8093,12 @@
 
    Field name:
       The requested field name.  It MUST conform to the field-name
-      syntax defined in Section 5.1, and SHOULD be restricted to just
+      syntax defined in Section 5.1, and it SHOULD be restricted to just
       letters, digits, and hyphen ('-') characters, with the first
       character being a letter.
 
    Status:
-      "permanent", "provisional", "deprecated", or "obsoleted"
+      "permanent", "provisional", "deprecated", or "obsoleted".
 
    Specification document(s):
       Reference to the document that specifies the field, preferably
@@ -8141,31 +8107,31 @@
       An indication of the relevant section(s) can also be included, but
       is not required.
 
-   And, optionally:
+   And optionally:
 
    Comments:  Additional information, such as about reserved entries.
 
-   The Expert(s) can define additional fields to be collected in the
+   The expert(s) can define additional fields to be collected in the
    registry, in consultation with the community.
 
    Standards-defined names have a status of "permanent".  Other names
-   can also be registered as permanent, if the Expert(s) find that they
+   can also be registered as permanent if the expert(s) find that they
    are in use, in consultation with the community.  Other names should
    be registered as "provisional".
 
-   Provisional entries can be removed by the Expert(s) if - in
-   consultation with the community - the Expert(s) find that they are
-   not in use.  The Experts can change a provisional entry's status to
+   Provisional entries can be removed by the expert(s) if -- in
+   consultation with the community -- the expert(s) finds that they are
+   not in use.  The expert(s) can change a provisional entry's status to
    permanent at any time.
 
    Note that names can be registered by third parties (including the
-   Expert(s)), if the Expert(s) determines that an unregistered name is
+   expert(s)) if the expert(s) determines that an unregistered name is
    widely deployed and not likely to be registered in a timely manner
    otherwise.
 
 16.3.2.  Considerations for New Fields
 
-   HTTP header and trailer fields are a widely-used extension point for
+   HTTP header and trailer fields are widely used extension points for
    the protocol.  While they can be used in an ad hoc fashion, fields
    that are intended for wider use need to be carefully documented to
    ensure interoperability.
@@ -8204,7 +8170,7 @@
       considerations, such as disclosure of privacy-related data.
 
    Request header fields have additional considerations that need to be
-   documented if the default behaviour is not appropriate:
+   documented if the default behavior is not appropriate:
 
    *  If it is appropriate to list the field name in a Vary response
       header field (e.g., when the request header field is used by an
@@ -8214,7 +8180,7 @@
       request (see Section 9.3.4).
 
    *  If the field ought to be removed when automatically redirecting a
-      request, due to security concerns (see Section 15.4).
+      request due to security concerns (see Section 15.4).
 
 16.3.2.1.  Considerations for New Field Names
 
@@ -8244,7 +8210,7 @@
    Other prefixes are sometimes used in HTTP field names; for example,
    "Accept-" is used in many content negotiation headers, and "Content-"
    is used as explained in Section 6.4.  These prefixes are only an aid
-   to recognizing the purpose of a field, and do not trigger automatic
+   to recognizing the purpose of a field and do not trigger automatic
    processing.
 
 16.3.2.2.  Considerations for New Field Values
@@ -8262,7 +8228,7 @@
    multiple field lines will impact them (see Section 5.3).  Because
    senders might erroneously send multiple values, and both
    intermediaries and HTTP libraries can perform combination
-   automatically, this applies to all field values - even when only a
+   automatically, this applies to all field values -- even when only a
    single value is anticipated.
 
    Therefore, authors are advised to delimit or encode values that
@@ -8413,8 +8379,8 @@
    *  Pointer to specification text
 
    Names of content codings MUST NOT overlap with names of transfer
-   codings (as per the "HTTP Transfer Coding registry", located at
-   <https://www.iana.org/assignments/http-parameters/>), unless the
+   codings (per the "HTTP Transfer Coding Registry" located at
+   <https://www.iana.org/assignments/http-parameters/>) unless the
    encoding transformation is identical (as is the case for the
    compression codings defined in Section 8.4.1).
 
@@ -8473,7 +8439,7 @@
    and users of known security concerns relevant to HTTP semantics and
    its use for transferring information over the Internet.
    Considerations related to caching are discussed in Section 7 of
-   [CACHING] and considerations related to HTTP/1.1 message syntax and
+   [CACHING], and considerations related to HTTP/1.1 message syntax and
    parsing are discussed in Section 11 of [HTTP/1.1].
 
    The list of considerations below is not exhaustive.  Most security
@@ -8643,7 +8609,7 @@
    arbitrary code execution due to buffer or arithmetic overflows, and
    increased vulnerability to denial-of-service attacks.
 
-17.6.  Attacks using Shared-dictionary Compression
+17.6.  Attacks Using Shared-Dictionary Compression
 
    Some attacks on encrypted protocols use the differences in size
    created by dynamic compression to reveal confidential information;
@@ -8662,7 +8628,7 @@
    attacker-controlled data so that they cannot share the same
    compression dictionary.  With careful design, a compression scheme
    can be designed in a way that is not considered exploitable in
-   limited use cases, such as HPACK ([HPACK]).
+   limited use cases, such as HPACK [HPACK].
 
 17.7.  Disclosure of Personal Information
 
@@ -8717,7 +8683,7 @@
    the request content.  However, this hinders caching and uses an
    unsafe method for what would otherwise be a safe request.
    Alternative workarounds include transforming the user-provided data
-   prior to constructing the URI, or filtering the data to only include
+   prior to constructing the URI or filtering the data to only include
    common values that are not sensitive.  Likewise, redirecting the
    result of a query to a different (server-generated) URI can remove
    potentially sensitive data from later links and provide a cacheable
@@ -8812,8 +8778,8 @@
    interest here is the set of unique characteristics that might be
    communicated via HTTP.  Fingerprinting is considered a privacy
    concern because it enables tracking of a user agent's behavior over
-   time ([Bujlow]) without the corresponding controls that the user
-   might have over other forms of data collection (e.g., cookies).  Many
+   time [Bujlow] without the corresponding controls that the user might
+   have over other forms of data collection (e.g., cookies).  Many
    general-purpose user agents (i.e., Web browsers) have taken steps to
    reduce their fingerprints.
 
@@ -8977,17 +8943,17 @@
 18.  IANA Considerations
 
    The change controller for the following registrations is: "IETF
-   (iesg@ietf.org) - Internet Engineering Task Force".
+   (iesg@ietf.org) -- Internet Engineering Task Force".
 
 18.1.  URI Scheme Registration
 
-   Please update the registry of URI Schemes [BCP35] at
-   <https://www.iana.org/assignments/uri-schemes/> with the permanent
-   schemes listed in the table in Section 4.2.
+   IANA has updated the "Uniform Resource Identifier (URI) Schemes"
+   registry [BCP35] at <https://www.iana.org/assignments/uri-schemes/>
+   with the permanent schemes listed in Table 2 in Section 4.2.
 
 18.2.  Method Registration
 
-   Please update the "Hypertext Transfer Protocol (HTTP) Method
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Method
    Registry" at <https://www.iana.org/assignments/http-methods> with the
    registration procedure of Section 16.1.1 and the method names
    summarized in the following table.
@@ -9016,13 +8982,13 @@
 
                                   Table 7
 
-   The method name "*" is reserved, since using "*" as a method name
+   The method name "*" is reserved because using "*" as a method name
    would conflict with its usage as a wildcard in some fields (e.g.,
    "Access-Control-Request-Method").
 
 18.3.  Status Code Registration
 
-   Please update the "Hypertext Transfer Protocol (HTTP) Status Code
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Status Code
    Registry" at <https://www.iana.org/assignments/http-status-codes>
    with the registration procedure of Section 16.2.1 and the status code
    values summarized in the following table.
@@ -9127,157 +9093,157 @@
 
 18.4.  Field Name Registration
 
-   This specification updates the HTTP related aspects of the existing
+   This specification updates the HTTP-related aspects of the existing
    registration procedures for message header fields defined in
-   [RFC3864].  It replaces the old procedures as they relate to HTTP, by
+   [RFC3864].  It replaces the old procedures as they relate to HTTP by
    defining a new registration procedure and moving HTTP field
    definitions into a separate registry.
 
-   Please create a new registry as outlined in Section 16.3.1, and let
-   that registry link to this specification (e.g., "See section
-   Section 16.3 of [this document] for information on defining and
-   registering new HTTP Header Fields.").
-
-   After creating the registry, all entries in the Permanent and
-   Provisional Message Header Registries with the protocol 'http' are to
-   be moved to it, with the following changes applied:
+   IANA has created a new registry titled "Hypertext Transfer Protocol
+   (HTTP) Field Name Registry" as outlined in Section 16.3.1.
 
-   1.  The 'Applicable Protocol' field is to be omitted.
+   IANA has moved all entries in the "Permanent Message Header Field
+   Names" and "Provisional Message Header Field Names" registries with
+   the protocol 'http' to this registry and has applied the following
+   changes:
+
+   1.  The 'Applicable Protocol' field has been omitted.
+
+   2.  Entries that had a status of 'standard', 'experimental',
+       'reserved', or 'informational' have been made to have a status of
+       'permanent'.
 
-   2.  Entries with a status of 'standard', 'experimental', 'reserved',
-       or 'informational' are to have a status of 'permanent'.
-
-   3.  Provisional entries without a status are to have a status of
-       'provisional'.
+   3.  Provisional entries without a status have been made to have a
+       status of 'provisional'.
 
    4.  Permanent entries without a status (after confirmation that the
-       registration document did not define one) will have a status of
-       'provisional'.  The Expert(s) can choose to update their status
-       if there is evidence that another is more appropriate.
-
-   Please annotate the Permanent and Provisional Message Header
-   registries to indicate that HTTP field name registrations have moved,
-   with an appropriate link (such as: "HTTP field name registrations
-   have been moved to <https://www.iana.org/assignments/http-fields> per
-   [this document].") and furthermore remove the existing note pointing
-   to [RFC7231] ("See section 8.3.1 of [RFC7231] for information on
-   registering new HTTP Header Fields.").
+       registration document did not define one) have been made to have
+       a status of 'provisional'.  The expert(s) can choose to update
+       the entries' status if there is evidence that another is more
+       appropriate.
+
+   IANA has annotated the "Permanent Message Header Field Names" and
+   "Provisional Message Header Field Names" registries with the
+   following note to indicate that HTTP field name registrations have
+   moved:
+
+      |  *Note* HTTP field name registrations have been moved to
+      |  [https://www.iana.org/assignments/http-fields] per [RFC9110].
 
-   After that is complete, please update the new registry with the field
-   names listed in the following table.
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Field Name
+   Registry" with the field names listed in the following table.
 
    +===========================+============+========+============+
    | Field Name                | Status     | Ref.   | Comments   |
    +===========================+============+========+============+
-   | Accept                    | permanent  | 12.5.1 |            |
+   | Accept                    | standard   | 12.5.1 |            |
    +---------------------------+------------+--------+------------+
    | Accept-Charset            | deprecated | 12.5.2 |            |
    +---------------------------+------------+--------+------------+
-   | Accept-Encoding           | permanent  | 12.5.3 |            |
+   | Accept-Encoding           | standard   | 12.5.3 |            |
    +---------------------------+------------+--------+------------+
-   | Accept-Language           | permanent  | 12.5.4 |            |
+   | Accept-Language           | standard   | 12.5.4 |            |
    +---------------------------+------------+--------+------------+
-   | Accept-Ranges             | permanent  | 14.3   |            |
+   | Accept-Ranges             | standard   | 14.3   |            |
    +---------------------------+------------+--------+------------+
-   | Allow                     | permanent  | 10.2.1 |            |
+   | Allow                     | standard   | 10.2.1 |            |
    +---------------------------+------------+--------+------------+
-   | Authentication-Info       | permanent  | 11.6.3 |            |
+   | Authentication-Info       | standard   | 11.6.3 |            |
    +---------------------------+------------+--------+------------+
-   | Authorization             | permanent  | 11.6.2 |            |
+   | Authorization             | standard   | 11.6.2 |            |
    +---------------------------+------------+--------+------------+
-   | Connection                | permanent  | 7.6.1  |            |
+   | Connection                | standard   | 7.6.1  |            |
    +---------------------------+------------+--------+------------+
-   | Content-Encoding          | permanent  | 8.4    |            |
+   | Content-Encoding          | standard   | 8.4    |            |
    +---------------------------+------------+--------+------------+
-   | Content-Language          | permanent  | 8.5    |            |
+   | Content-Language          | standard   | 8.5    |            |
    +---------------------------+------------+--------+------------+
-   | Content-Length            | permanent  | 8.6    |            |
+   | Content-Length            | standard   | 8.6    |            |
    +---------------------------+------------+--------+------------+
-   | Content-Location          | permanent  | 8.7    |            |
+   | Content-Location          | standard   | 8.7    |            |
    +---------------------------+------------+--------+------------+
-   | Content-Range             | permanent  | 14.4   |            |
+   | Content-Range             | standard   | 14.4   |            |
    +---------------------------+------------+--------+------------+
-   | Content-Type              | permanent  | 8.3    |            |
+   | Content-Type              | standard   | 8.3    |            |
    +---------------------------+------------+--------+------------+
-   | Date                      | permanent  | 6.6.1  |            |
+   | Date                      | standard   | 6.6.1  |            |
    +---------------------------+------------+--------+------------+
-   | ETag                      | permanent  | 8.8.3  |            |
+   | ETag                      | standard   | 8.8.3  |            |
    +---------------------------+------------+--------+------------+
-   | Expect                    | permanent  | 10.1.1 |            |
+   | Expect                    | standard   | 10.1.1 |            |
    +---------------------------+------------+--------+------------+
-   | From                      | permanent  | 10.1.2 |            |
+   | From                      | standard   | 10.1.2 |            |
    +---------------------------+------------+--------+------------+
-   | Host                      | permanent  | 7.2    |            |
+   | Host                      | standard   | 7.2    |            |
    +---------------------------+------------+--------+------------+
-   | If-Match                  | permanent  | 13.1.1 |            |
+   | If-Match                  | standard   | 13.1.1 |            |
    +---------------------------+------------+--------+------------+
-   | If-Modified-Since         | permanent  | 13.1.3 |            |
+   | If-Modified-Since         | standard   | 13.1.3 |            |
    +---------------------------+------------+--------+------------+
-   | If-None-Match             | permanent  | 13.1.2 |            |
+   | If-None-Match             | standard   | 13.1.2 |            |
    +---------------------------+------------+--------+------------+
-   | If-Range                  | permanent  | 13.1.5 |            |
+   | If-Range                  | standard   | 13.1.5 |            |
    +---------------------------+------------+--------+------------+
-   | If-Unmodified-Since       | permanent  | 13.1.4 |            |
+   | If-Unmodified-Since       | standard   | 13.1.4 |            |
    +---------------------------+------------+--------+------------+
-   | Last-Modified             | permanent  | 8.8.2  |            |
+   | Last-Modified             | standard   | 8.8.2  |            |
    +---------------------------+------------+--------+------------+
-   | Location                  | permanent  | 10.2.2 |            |
+   | Location                  | standard   | 10.2.2 |            |
    +---------------------------+------------+--------+------------+
-   | Max-Forwards              | permanent  | 7.6.2  |            |
+   | Max-Forwards              | standard   | 7.6.2  |            |
    +---------------------------+------------+--------+------------+
-   | Proxy-Authenticate        | permanent  | 11.7.1 |            |
+   | Proxy-Authenticate        | standard   | 11.7.1 |            |
    +---------------------------+------------+--------+------------+
-   | Proxy-Authentication-Info | permanent  | 11.7.3 |            |
+   | Proxy-Authentication-Info | standard   | 11.7.3 |            |
    +---------------------------+------------+--------+------------+
-   | Proxy-Authorization       | permanent  | 11.7.2 |            |
+   | Proxy-Authorization       | standard   | 11.7.2 |            |
    +---------------------------+------------+--------+------------+
-   | Range                     | permanent  | 14.2   |            |
+   | Range                     | standard   | 14.2   |            |
    +---------------------------+------------+--------+------------+
-   | Referer                   | permanent  | 10.1.3 |            |
+   | Referer                   | standard   | 10.1.3 |            |
    +---------------------------+------------+--------+------------+
-   | Retry-After               | permanent  | 10.2.3 |            |
+   | Retry-After               | standard   | 10.2.3 |            |
    +---------------------------+------------+--------+------------+
-   | Server                    | permanent  | 10.2.4 |            |
+   | Server                    | standard   | 10.2.4 |            |
    +---------------------------+------------+--------+------------+
-   | TE                        | permanent  | 10.1.4 |            |
+   | TE                        | standard   | 10.1.4 |            |
    +---------------------------+------------+--------+------------+
-   | Trailer                   | permanent  | 6.6.2  |            |
+   | Trailer                   | standard   | 6.6.2  |            |
    +---------------------------+------------+--------+------------+
-   | Upgrade                   | permanent  | 7.8    |            |
+   | Upgrade                   | standard   | 7.8    |            |
    +---------------------------+------------+--------+------------+
-   | User-Agent                | permanent  | 10.1.5 |            |
+   | User-Agent                | standard   | 10.1.5 |            |
    +---------------------------+------------+--------+------------+
-   | Vary                      | permanent  | 12.5.5 |            |
+   | Vary                      | standard   | 12.5.5 |            |
    +---------------------------+------------+--------+------------+
-   | Via                       | permanent  | 7.6.3  |            |
+   | Via                       | standard   | 7.6.3  |            |
    +---------------------------+------------+--------+------------+
-   | WWW-Authenticate          | permanent  | 11.6.1 |            |
+   | WWW-Authenticate          | standard   | 11.6.1 |            |
    +---------------------------+------------+--------+------------+
-   | *                         | permanent  | 12.5.5 | (reserved) |
+   | *                         | standard   | 12.5.5 | (reserved) |
    +---------------------------+------------+--------+------------+
 
                                Table 9
 
-   The field name "*" is reserved, since using that name as an HTTP
+   The field name "*" is reserved because using that name as an HTTP
    header field might conflict with its special semantics in the Vary
    header field (Section 12.5.5).
 
-   Finally, please update the "Content-MD5" entry in the new registry to
-   have a status of 'obsoleted' with references to Section 14.15 of
-   [RFC2616] (for the definition of the header field) and Appendix B of
-   [RFC7231] (which removed the field definition from the updated
-   specification).
+   IANA has updated the "Content-MD5" entry in the new registry to have
+   a status of 'obsoleted' with references to Section 14.15 of [RFC2616]
+   (for the definition of the header field) and Appendix B of [RFC7231]
+   (which removed the field definition from the updated specification).
 
 18.5.  Authentication Scheme Registration
 
-   Please update the "Hypertext Transfer Protocol (HTTP) Authentication
-   Scheme Registry" at <https://www.iana.org/assignments/http-
-   authschemes> with the registration procedure of Section 16.4.1.  No
-   authentication schemes are defined in this document.
+   IANA has updated the "Hypertext Transfer Protocol (HTTP)
+   Authentication Scheme Registry" at <https://www.iana.org/assignments/
+   http-authschemes> with the registration procedure of Section 16.4.1.
+   No authentication schemes are defined in this document.
 
 18.6.  Content Coding Registration
 
-   Please update the "HTTP Content Coding Registry" at
+   IANA has updated the "HTTP Content Coding Registry" at
    <https://www.iana.org/assignments/http-parameters/> with the
    registration procedure of Section 16.6.1 and the content coding names
    summarized in the table below.
@@ -9303,7 +9269,7 @@
 
 18.7.  Range Unit Registration
 
-   Please update the "HTTP Range Unit Registry" at
+   IANA has updated the "HTTP Range Unit Registry" at
    <https://www.iana.org/assignments/http-parameters/> with the
    registration procedure of Section 16.5.1 and the range unit names
    summarized in the table below.
@@ -9321,18 +9287,18 @@
 
 18.8.  Media Type Registration
 
-   Please update the "Media Types" registry at
+   IANA has updated the "Media Types" registry at
    <https://www.iana.org/assignments/media-types> with the registration
    information in Section 14.6 for the media type "multipart/
    byteranges".
 
-   Furthermore please update the registry note about "q" parameters with
-   a link to Section 12.5.1 of this document.
+   IANA has updated the registry note about "q" parameters with a link
+   to Section 12.5.1 of this document.
 
 18.9.  Port Registration
 
-   Please update the "Service Name and Transport Protocol Port Number"
-   registry at <https://www.iana.org/assignments/service-names-port-
+   IANA has updated the "Service Name and Transport Protocol Port Number
+   Registry" at <https://www.iana.org/assignments/service-names-port-
    numbers/> for the services on ports 80 and 443 that use UDP or TCP
    to:
 
@@ -9343,15 +9309,15 @@
 
 18.10.  Upgrade Token Registration
 
-   Please update the "Hypertext Transfer Protocol (HTTP) Upgrade Token
-   Registry" at <https://www.iana.org/assignments/http-upgrade-tokens>
-   with the registration procedure of Section 16.7 and the upgrade token
-   names summarized in the following table.
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Upgrade
+   Token Registry" at <https://www.iana.org/assignments/http-upgrade-
+   tokens> with the registration procedure described in Section 16.7 and
+   the upgrade token names summarized in the following table.
 
    +======+===================+=========================+======+
    | Name | Description       | Expected Version Tokens | Ref. |
    +======+===================+=========================+======+
-   | HTTP | Hypertext         | any DIGIT.DIGIT (e.g,   | 2.5  |
+   | HTTP | Hypertext         | any DIGIT.DIGIT (e.g.,  | 2.5  |
    |      | Transfer Protocol | "2.0")                  |      |
    +------+-------------------+-------------------------+------+
 
@@ -9362,10 +9328,8 @@
 19.1.  Normative References
 
    [CACHING]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Caching", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-cache-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              cache-latest>.
+              Ed., "HTTP Caching", RFC 9111, DOI 10.17487/RFC9111,
+              December 2021, <https://www.rfc-editor.org/info/rfc9111>.
 
    [RFC1950]  Deutsch, P. and J-L. Gailly, "ZLIB Compressed Data Format
               Specification version 3.3", RFC 1950,
@@ -9472,13 +9436,15 @@
 
    [BCP178]   Saint-Andre, P., Crocker, D., and M. Nottingham,
               "Deprecating the "X-" Prefix and Similar Constructs in
-              Application Protocols", BCP 178, RFC 6648, June 2012,
-              <https://www.rfc-editor.org/info/bcp178>.
+              Application Protocols", BCP 178, RFC 6648, June 2012.
+
+              <https://www.rfc-editor.org/info/bcp178>
 
    [BCP35]    Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines
               and Registration Procedures for URI Schemes", BCP 35,
-              RFC 7595, June 2015,
-              <https://www.rfc-editor.org/info/bcp35>.
+              RFC 7595, June 2015.
+
+              <https://www.rfc-editor.org/info/bcp35>
 
    [BREACH]   Gluck, Y., Harris, N., and A. Prado, "BREACH: Reviving the
               CRIME Attack", July 2013,
@@ -9519,10 +9485,8 @@
               <https://www.rfc-editor.org/info/rfc1945>.
 
    [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP/1.1", Work in Progress, Internet-Draft, draft-
-              ietf-httpbis-messaging-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              messaging-latest>.
+              Ed., "HTTP/1.1", RFC 9112, DOI 10.17487/RFC9112, December
+              2021, <https://www.rfc-editor.org/info/rfc9112>.
 
    [HTTP/2]   Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
               Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
@@ -9530,10 +9494,8 @@
               <https://www.rfc-editor.org/info/rfc7540>.
 
    [HTTP/3]   Bishop, M., Ed., "Hypertext Transfer Protocol Version 3
-              (HTTP/3)", Work in Progress, Internet-Draft, draft-ietf-
-              quic-http-34, 2 February 2021,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
-              http-34>.
+              (HTTP/3)", RFC 9113, DOI 10.17487/RFC9113, December 2021,
+              <https://www.rfc-editor.org/info/rfc9113>.
 
    [ISO-8859-1]
               International Organization for Standardization,
@@ -9579,8 +9541,8 @@
               <https://www.rfc-editor.org/info/rfc2295>.
 
    [RFC2324]  Masinter, L., "Hyper Text Coffee Pot Control Protocol
-              (HTCPCP/1.0)", RFC 2324, DOI 10.17487/RFC2324, 1 April
-              1998, <https://www.rfc-editor.org/info/rfc2324>.
+              (HTCPCP/1.0)", RFC 2324, DOI 10.17487/RFC2324, April 1998,
+              <https://www.rfc-editor.org/info/rfc2324>.
 
    [RFC2557]  Palme, J., Hopmann, A., and N. Shelness, "MIME
               Encapsulation of Aggregate Documents, such as HTML
@@ -9749,7 +9711,7 @@
 
 Appendix A.  Collected ABNF
 
-   In the collected ABNF below, list rules are expanded as per
+   In the collected ABNF below, list rules are expanded per
    Section 5.6.1.
 
    Accept = [ ( media-range [ weight ] ) *( OWS "," OWS ( media-range [
@@ -9977,7 +9939,7 @@
 
    year = 4DIGIT
 
-Appendix B.  Changes from previous RFCs
+Appendix B.  Changes from Previous RFCs
 
 B.1.  Changes from RFC 2818
 
@@ -9990,58 +9952,58 @@
    header fields have been moved here.
 
    The requirement on semantic conformance has been replaced with
-   permission to ignore/workaround implementation-specific failures.
-   (Section 2.2)
+   permission to ignore or work around implementation-specific failures
+   (Section 2.2).
 
    The description of an origin and authoritative access to origin
    servers has been extended for both "http" and "https" URIs to account
    for alternative services and secured connections that are not
-   necessarily based on TCP.  (Section 4.2.1, Section 4.2.2,
-   Section 4.3.1, Section 7.3.3)
+   necessarily based on TCP (Sections 4.2.1, 4.2.2, 4.3.1, and 7.3.3).
 
    Explicit requirements have been added to check the target URI
    scheme's semantics and reject requests that don't meet any associated
-   requirements.  (Section 7.4)
+   requirements (Section 7.4).
 
    Parameters in media type, media range, and expectation can be empty
-   via one or more trailing semicolons.  (Section 5.6.6)
+   via one or more trailing semicolons (Section 5.6.6).
 
    "Field value" now refers to the value after multiple field lines are
-   combined with commas - by far the most common use.  To refer to a
-   single header line's value, use "field line value".  (Section 6.3)
+   combined with commas -- by far the most common use.  To refer to a
+   single header line's value, use "field line value" (Section 6.3).
 
    Trailer field semantics now transcend the specifics of chunked
-   encoding.  Use of trailer fields has been further limited to only
-   allow generation as a trailer field when the sender knows the field
-   defines that usage and to only allow merging into the header section
-   if the recipient knows the corresponding field definition permits and
-   defines how to merge.  In all other cases, implementations are
-   encouraged to either store the trailer fields separately or discard
-   them instead of merging.  (Section 6.5.1)
-
-   Made the priority of the absolute form of the request URI over the
-   Host header by origin servers explicit, to align with proxy handling.
-   (Section 7.2)
+   encoding.  The use of trailer fields has been further limited to
+   allow generation as a trailer field only when the sender knows the
+   field defines that usage and to allow merging into the header section
+   only if the recipient knows the corresponding field definition
+   permits and defines how to merge.  In all other cases,
+   implementations are encouraged either to store the trailer fields
+   separately or to discard them instead of merging (Section 6.5.1).
+
+   The priority of the absolute form of the request URI over the Host
+   header field by origin servers has been made explicit to align with
+   proxy handling (Section 7.2).
 
    The grammar definition for the Via field's "received-by" was expanded
-   in 7230 due to changes in the URI grammar for host [URI] that are not
-   desirable for Via. For simplicity, we have removed uri-host from the
-   received-by production because it can be encompassed by the existing
-   grammar for pseudonym.  In particular, this change removed comma from
-   the allowed set of charaters for a host name in received-by.
-   (Section 7.6.3)
+   in RFC 7230 due to changes in the URI grammar for host [URI] that are
+   not desirable for Via. For simplicity, we have removed uri-host from
+   the received-by production because it can be encompassed by the
+   existing grammar for pseudonym.  In particular, this change removed
+   comma from the allowed set of characters for a host name in received-
+   by (Section 7.6.3).
 
 B.3.  Changes from RFC 7231
 
    Minimum URI lengths to be supported by implementations are now
-   recommended.  (Section 3.1)
+   recommended (Section 3.1).
 
-   Clarified that CR and NUL in field values are to be rejected or
-   mapped to SP and that leading and trailing whitespace need to be
-   stripped from field values before they are consumed.  (Section 5.5)
+   The following have been clarified: CR and NUL in field values are to
+   be rejected or mapped to SP, and leading and trailing whitespaces
+   need to be stripped from field values before they are consumed
+   (Section 5.5).
 
    Parameters in media type, media range, and expectation can be empty
-   via one or more trailing semicolons.  (Section 5.6.6)
+   via one or more trailing semicolons (Section 5.6.6).
 
    An abstract data type for HTTP messages has been introduced to define
    the components of a message and their semantics as an abstraction
@@ -10050,66 +10012,67 @@
    the message is parsed.  This makes it easier to distinguish between
    requirements on the content (what is conveyed) versus requirements on
    the messaging syntax (how it is conveyed) and avoids baking
-   limitations of early protocol versions into the future of HTTP.
-   (Section 6)
+   limitations of early protocol versions into the future of HTTP
+   (Section 6).
 
    The terms "payload" and "payload body" have been replaced with
    "content", to better align with its usage elsewhere (e.g., in field
    names) and to avoid confusion with frame payloads in HTTP/2 and
-   HTTP/3.  (Section 6.4)
+   HTTP/3 (Section 6.4).
 
-   The term "effective request URI" has been replaced with "target URI".
-   (Section 7.1)
+   The term "effective request URI" has been replaced with "target URI"
+   (Section 7.1).
 
-   Restrictions on client retries have been loosened, to reflect
-   implementation behavior.  (Section 9.2.2)
+   Restrictions on client retries have been loosened to reflect
+   implementation behavior (Section 9.2.2).
 
-   Clarified that request bodies on GET, HEAD, and DELETE are not
-   interoperable.  (Section 9.3.1, Section 9.3.2, Section 9.3.5)
+   The fact that request bodies on GET, HEAD, and DELETE are not
+   interoperable has been clarified (Sections 9.3.1, 9.3.2, and 9.3.5).
 
-   Allowed use of the Content-Range header field (Section 14.4) as a
-   request modifier on PUT.  (Section 9.3.4)
+   The use of the Content-Range header field (Section 14.4) as a request
+   modifier on PUT is allowed (Section 9.3.4).
 
-   Removed a superfluous requirement about setting Content-Length from
-   the description of the OPTIONS method.  (Section 9.3.7)
+   A superfluous requirement about setting Content-Length has been
+   removed from the description of the OPTIONS method (Section 9.3.7).
 
-   Removed normative requirement to use the "message/http" media type in
-   TRACE responses.  (Section 9.3.8)
+   The normative requirement to use the "message/http" media type in
+   TRACE responses has been removed (Section 9.3.8).
 
-   Restore list-based grammar for Expect for compatibility with RFC
-   2616.  (Section 10.1.1)
+   List-based grammar for Expect has been restored for compatibility
+   with RFC 2616 (Section 10.1.1).
 
-   Allow Accept and Accept-Encoding in response messages; the latter was
-   introduced by [RFC7694].  (Section 12.3)
+   Accept and Accept-Encoding are allowed in response messages; the
+   latter was introduced by [RFC7694] (Section 12.3).
 
    "Accept Parameters" (accept-params and accept-ext ABNF production)
-   have been removed from the definition of the Accept field.
-   (Section 12.5.1)
+   have been removed from the definition of the Accept field
+   (Section 12.5.1).
 
-   The "Accept-Charset" field now is deprecated.  (Section 12.5.2)
+   The Accept-Charset field now is deprecated (Section 12.5.2).
 
    The semantics of "*" in the Vary header field when other values are
-   present was clarified.  (Section 12.5.5)
-
-   Range units are compared in a case insensitive fashion.
-   (Section 14.1)
+   present was clarified (Section 12.5.5).
 
-   Use of "Accept-Ranges" is not restricted to origin servers.
-   (Section 14.3)
+   Range units are compared in a case-insensitive fashion
+   (Section 14.1).
 
-   The process of creating a redirected request has been clarified.
-   (Section 15.4)
+   The use of the Accept-Ranges field is not restricted to origin
+   servers (Section 14.3).
 
-   Added status code 308 (previously defined in [RFC7538]) so that it's
-   defined closer to status codes 301, 302, and 307.  (Section 15.4.9)
+   The process of creating a redirected request has been clarified
+   (Section 15.4).
 
-   Added status code 421 (previously defined in Section 9.1.2 of
-   [HTTP/2]) because of its general applicability. 421 is no longer
-   defined as heuristically cacheable, since the response is specific to
-   the connection (not the target resource).  (Section 15.5.20)
+   Status code 308 (previously defined in [RFC7538]) has been added so
+   that it's defined closer to status codes 301, 302, and 307
+   (Section 15.4.9).
+
+   Status code 421 (previously defined in Section 9.1.2 of [HTTP/2]) has
+   been added because of its general applicability. 421 is no longer
+   defined as heuristically cacheable since the response is specific to
+   the connection (not the target resource) (Section 15.5.20).
 
-   Added status code 422 (previously defined in Section 11.2 of
-   [WEBDAV]) because of its general applicability.  (Section 15.5.21)
+   Status code 422 (previously defined in Section 11.2 of [WEBDAV]) has
+   been added because of its general applicability (Section 15.5.21).
 
 B.4.  Changes from RFC 7232
 
@@ -10118,19 +10081,20 @@
    guard against the possibility that the Date and Last-Modified values
    are generated from different clocks or at somewhat different times
    during the preparation of the response.  This specification has
-   relaxed that to allow reasonable discretion.  (Section 8.8.2.2)
+   relaxed that to allow reasonable discretion (Section 8.8.2.2).
 
-   Removed edge case requirement on If-Match and If-Unmodified-Since
+   Removed edge-case requirement on If-Match and If-Unmodified-Since
    that a validator not be sent in a 2xx response when validation fails
    and the server decides that the same change request has already been
-   applied.  (Section 13.1.1 and Section 13.1.4)
+   applied (Sections 13.1.1 and 13.1.4).
 
-   Clarified that If-Unmodified-Since doesn't apply to a resource
-   without a concept of modification time.  (Section 13.1.4)
+   The fact that If-Unmodified-Since does not apply to a resource
+   without a concept of modification time has been clarified
+   (Section 13.1.4).
 
    Preconditions can now be evaluated before the request content is
    processed rather than waiting until the response would otherwise be
-   successful.  (Section 13.2)
+   successful (Section 13.2).
 
 B.5.  Changes from RFC 7233
 
@@ -10145,11 +10109,11 @@
    also allows protocol specific to byte ranges to be specified
    separately.
 
-   It is now possible to define Range handling on extension methods.
-   (Section 14.2)
+   It is now possible to define Range handling on extension methods
+   (Section 14.2).
 
    Described use of the Content-Range header field (Section 14.4) as a
-   request modifier to perform a partial PUT.  (Section 14.5)
+   request modifier to perform a partial PUT (Section 14.5).
 
 B.6.  Changes from RFC 7235
 
@@ -10165,982 +10129,15 @@
 
 B.9.  Changes from RFC 7694
 
-   This specification includes the extension defined in [RFC7694], but
+   This specification includes the extension defined in [RFC7694] but
    leaves out examples and deployment considerations.
 
-Appendix C.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-C.1.  Between RFC723x and draft 00
-
-   The changes were purely editorial:
-
-   *  Change boilerplate and abstract to indicate the "draft" status,
-      and update references to ancestor specifications.
-
-   *  Remove version "1.1" from document title, indicating that this
-      specification applies to all HTTP versions.
-
-   *  Adjust historical notes.
-
-   *  Update links to sibling specifications.
-
-   *  Replace sections listing changes from RFC 2616 by new empty
-      sections referring to RFC 723x.
-
-   *  Remove acknowledgements specific to RFC 723x.
-
-   *  Move "Acknowledgements" to the very end and make them unnumbered.
-
-C.2.  Since draft-ietf-httpbis-semantics-00
-
-   The changes in this draft are editorial, with respect to HTTP as a
-   whole, to merge core HTTP semantics into this document:
-
-   *  Merged introduction, architecture, conformance, and ABNF
-      extensions from RFC 7230 (Messaging).
-
-   *  Rearranged architecture to extract conformance, http(s) schemes,
-      and protocol versioning into a separate major section.
-
-   *  Moved discussion of MIME differences to [HTTP/1.1] since that is
-      primarily concerned with transforming 1.1 messages.
-
-   *  Merged entire content of RFC 7232 (Conditional Requests).
-
-   *  Merged entire content of RFC 7233 (Range Requests).
-
-   *  Merged entire content of RFC 7235 (Auth Framework).
-
-   *  Moved all extensibility tips, registration procedures, and
-      registry tables from the IANA considerations to normative
-      sections, reducing the IANA considerations to just instructions
-      that will be removed prior to publication as an RFC.
-
-C.3.  Since draft-ietf-httpbis-semantics-01
-
-   *  Improve [Welch] citation (<https://github.com/httpwg/http-core/
-      issues/63>)
-
-   *  Remove HTTP/1.1-ism about Range Requests
-      (<https://github.com/httpwg/http-core/issues/71>)
-
-   *  Cite RFC 8126 instead of RFC 5226 (<https://github.com/httpwg/
-      http-core/issues/75>)
-
-   *  Cite RFC 7538 instead of RFC 7238 (<https://github.com/httpwg/
-      http-core/issues/76>)
-
-   *  Cite RFC 8288 instead of RFC 5988 (<https://github.com/httpwg/
-      http-core/issues/77>)
-
-   *  Cite RFC 8187 instead of RFC 5987 (<https://github.com/httpwg/
-      http-core/issues/78>)
-
-   *  Cite RFC 7578 instead of RFC 2388 (<https://github.com/httpwg/
-      http-core/issues/79>)
-
-   *  Cite RFC 7595 instead of RFC 4395 (<https://github.com/httpwg/
-      http-core/issues/80>)
-
-   *  improve ABNF readability for qdtext (<https://github.com/httpwg/
-      http-core/issues/81>, <https://www.rfc-editor.org/errata/eid4891>)
-
-   *  Clarify "resource" vs "representation" in definition of status
-      code 416 (<https://github.com/httpwg/http-core/issues/83>,
-      <https://www.rfc-editor.org/errata/eid4664>)
-
-   *  Resolved erratum 4072, no change needed here
-      (<https://github.com/httpwg/http-core/issues/84>,
-      <https://www.rfc-editor.org/errata/eid4072>)
-
-   *  Clarify DELETE status code suggestions
-      (<https://github.com/httpwg/http-core/issues/85>,
-      <https://www.rfc-editor.org/errata/eid4436>)
-
-   *  In Section 14.4, fix ABNF for "other-range-resp" to use VCHAR
-      instead of CHAR (<https://github.com/httpwg/http-core/issues/86>,
-      <https://www.rfc-editor.org/errata/eid4707>)
-
-   *  Resolved erratum 5162, no change needed here
-      (<https://github.com/httpwg/http-core/issues/89>,
-      <https://www.rfc-editor.org/errata/eid5162>)
-
-   *  Replace "response code" with "response status code" and "status-
-      code" (the ABNF production name from the HTTP/1.1 message format)
-      by "status code" (<https://github.com/httpwg/http-core/issues/94>,
-      <https://www.rfc-editor.org/errata/eid4050>)
-
-   *  Added a missing word in Section 15.4 (<https://github.com/httpwg/
-      http-core/issues/98>, <https://www.rfc-editor.org/errata/eid4452>)
-
-   *  In Section 5.6.1, fixed an example that had trailing whitespace
-      where it shouldn't (<https://github.com/httpwg/http-core/
-      issues/104>, <https://www.rfc-editor.org/errata/eid4169>)
-
-   *  In Section 15.3.7, remove words that were potentially misleading
-      with respect to the relation to the requested ranges
-      (<https://github.com/httpwg/http-core/issues/102>,
-      <https://www.rfc-editor.org/errata/eid4358>)
-
-C.4.  Since draft-ietf-httpbis-semantics-02
-
-   *  Included (Proxy-)Auth-Info header field definition from RFC 7615
-      (<https://github.com/httpwg/http-core/issues/9>)
-
-   *  In Section 9.3.3, clarify POST caching
-      (<https://github.com/httpwg/http-core/issues/17>)
-
-   *  Add Section 15.5.19 to reserve the 418 status code
-      (<https://github.com/httpwg/http-core/issues/43>)
-
-   *  In Section 3.4 and Section 10.1.1, clarified when a response can
-      be sent (<https://github.com/httpwg/http-core/issues/82>)
-
-   *  In Section 8.3.2, explain the difference between the "token"
-      production, the RFC 2978 ABNF for charset names, and the actual
-      registration practice (<https://github.com/httpwg/http-core/
-      issues/100>, <https://www.rfc-editor.org/errata/eid4689>)
-
-   *  In Section 3.1, removed the fragment component in the URI scheme
-      definitions as per Section 4.3 of [URI], furthermore moved
-      fragment discussion into a separate section
-      (<https://github.com/httpwg/http-core/issues/103>,
-      <https://www.rfc-editor.org/errata/eid4251>, <https://www.rfc-
-      editor.org/errata/eid4252>)
-
-   *  In Section 2.5, add language about minor HTTP version number
-      defaulting (<https://github.com/httpwg/http-core/issues/115>)
-
-   *  Added Section 15.5.21 for status code 422, previously defined in
-      Section 11.2 of [WEBDAV] (<https://github.com/httpwg/http-core/
-      issues/123>)
-
-   *  In Section 15.5.17, fixed prose about byte range comparison
-      (<https://github.com/httpwg/http-core/issues/135>,
-      <https://www.rfc-editor.org/errata/eid5474>)
-
-   *  In Section 3.4, explain that request/response correlation is
-      version specific (<https://github.com/httpwg/http-core/
-      issues/145>)
-
-C.5.  Since draft-ietf-httpbis-semantics-03
-
-   *  In Section 15.4.9, include status code 308 from RFC 7538
-      (<https://github.com/httpwg/http-core/issues/3>)
-
-   *  In Section 8.3.1, clarify that the charset parameter value is
-      case-insensitive due to the definition in RFC 2046
-      (<https://github.com/httpwg/http-core/issues/13>)
-
-   *  Define a separate registry for HTTP header field names
-      (<https://github.com/httpwg/http-core/issues/42>)
-
-   *  In Section 12.1, refactor and clarify description of wildcard
-      ("*") handling (<https://github.com/httpwg/http-core/issues/46>)
-
-   *  Deprecate Accept-Charset (<https://github.com/httpwg/http-core/
-      issues/61>)
-
-   *  In Section 13.2, mention Cache-Control: immutable
-      (<https://github.com/httpwg/http-core/issues/69>)
-
-   *  In Section 5.3, clarify when header field combination is allowed
-      (<https://github.com/httpwg/http-core/issues/74>)
-
-   *  In Section 18.4, instruct IANA to mark Content-MD5 as obsolete
-      (<https://github.com/httpwg/http-core/issues/93>)
-
-   *  Use RFC 7405 ABNF notation for case-sensitive string constants
-      (<https://github.com/httpwg/http-core/issues/133>)
-
-   *  Rework Section 3.4 to be more version-independent
-      (<https://github.com/httpwg/http-core/issues/142>)
-
-   *  In Section 9.3.5, clarify that DELETE needs to be successful to
-      invalidate cache (<https://github.com/httpwg/http-core/
-      issues/167>, <https://www.rfc-editor.org/errata/eid5541>)
-
-C.6.  Since draft-ietf-httpbis-semantics-04
-
-   *  In Section 5.5, fix field-content ABNF
-      (<https://github.com/httpwg/http-core/issues/19>,
-      <https://www.rfc-editor.org/errata/eid4189>)
-
-   *  Move Section 5.6.6 into its own section
-      (<https://github.com/httpwg/http-core/issues/45>)
-
-   *  In Section 8.3, reference MIME Sniffing
-      (<https://github.com/httpwg/http-core/issues/51>)
-
-   *  In Section 5.6.1, simplify the #rule mapping for recipients
-      (<https://github.com/httpwg/http-core/issues/164>,
-      <https://www.rfc-editor.org/errata/eid5257>)
-
-   *  In Section 9.3.7, remove misleading text about "extension" of HTTP
-      is needed to define method content (<https://github.com/httpwg/
-      http-core/issues/204>)
-
-   *  Fix editorial issue in Section 3.2 (<https://github.com/httpwg/
-      http-core/issues/223>)
-
-   *  In Section 15.5.21, rephrase language not to use "entity" anymore,
-      and also avoid lowercase "may" (<https://github.com/httpwg/http-
-      core/issues/224>)
-
-   *  Move discussion of retries from [HTTP/1.1] into Section 9.2.2
-      (<https://github.com/httpwg/http-core/issues/230>)
-
-C.7.  Since draft-ietf-httpbis-semantics-05
-
-   *  Moved transport-independent part of the description of trailers
-      into Section 6.5 (<https://github.com/httpwg/http-core/issues/16>)
-
-   *  Loosen requirements on retries based upon implementation behavior
-      (<https://github.com/httpwg/http-core/issues/27>)
-
-   *  In Section 18.9, update IANA port registry for TCP/UDP on ports 80
-      and 443 (<https://github.com/httpwg/http-core/issues/36>)
-
-   *  In Section 16.3.2.2, revise guidelines for new header field names
-      (<https://github.com/httpwg/http-core/issues/47>)
-
-   *  In Section 9.2.3, remove concept of "cacheable methods" in favor
-      of prose (<https://github.com/httpwg/http-core/issues/54>,
-      <https://www.rfc-editor.org/errata/eid5300>)
-
-   *  In Section 17.1, mention that the concept of authority can be
-      modified by protocol extensions (<https://github.com/httpwg/http-
-      core/issues/143>)
-
-   *  Create new subsection on content in Section 6.4, taken from
-      portions of message body (<https://github.com/httpwg/http-core/
-      issues/159>)
-
-   *  Moved definition of "Whitespace" into new container "Generic
-      Syntax" (<https://github.com/httpwg/http-core/issues/162>)
-
-   *  In Section 3.1, recommend minimum URI size support for
-      implementations (<https://github.com/httpwg/http-core/issues/169>)
-
-   *  In Section 14.1, refactored the range-unit and ranges-specifier
-      grammars (<https://github.com/httpwg/http-core/issues/196>,
-      <https://www.rfc-editor.org/errata/eid5620>)
-
-   *  In Section 9.3.1, caution against a request content more strongly
-      (<https://github.com/httpwg/http-core/issues/202>)
-
-   *  Reorganized text in Section 16.3.2.2 (<https://github.com/httpwg/
-      http-core/issues/214>)
-
-   *  In Section 15.5.4, replace "authorize" with "fulfill"
-      (<https://github.com/httpwg/http-core/issues/218>)
-
-   *  In Section 9.3.7, removed a misleading statement about Content-
-      Length (<https://github.com/httpwg/http-core/issues/235>,
-      <https://www.rfc-editor.org/errata/eid5806>)
-
-   *  In Section 17.1, add text from RFC 2818
-      (<https://github.com/httpwg/http-core/issues/236>)
-
-   *  Changed "cacheable by default" to "heuristically cacheable"
-      throughout (<https://github.com/httpwg/http-core/issues/242>)
-
-C.8.  Since draft-ietf-httpbis-semantics-06
-
-   *  In Section 7.6.3, simplify received-by grammar (and disallow comma
-      character) (<https://github.com/httpwg/http-core/issues/24>)
-
-   *  In Section 5.1, give guidance on interoperable field names
-      (<https://github.com/httpwg/http-core/issues/30>)
-
-   *  In Section 5.6.3, define the semantics and possible replacement of
-      whitespace when it is known to occur (<https://github.com/httpwg/
-      http-core/issues/53>, <https://www.rfc-editor.org/errata/eid5163>)
-
-   *  In Section 6.3, introduce field terminology and distinguish
-      between field line values and field values; use terminology
-      consistently throughout (<https://github.com/httpwg/http-core/
-      issues/111>)
-
-   *  Moved #rule definition into Section 5.5 and whitespace into
-      Section 2.1 (<https://github.com/httpwg/http-core/issues/162>)
-
-   *  In Section 14.1, explicitly call out range unit names as case-
-      insensitive, and encourage registration
-      (<https://github.com/httpwg/http-core/issues/179>)
-
-   *  In Section 8.4.1, explicitly call out content codings as case-
-      insensitive, and encourage registration
-      (<https://github.com/httpwg/http-core/issues/179>)
-
-   *  In Section 5.1, explicitly call out field names as case-
-      insensitive (<https://github.com/httpwg/http-core/issues/179>)
-
-   *  In Section 17.13, cite [Bujlow] (<https://github.com/httpwg/http-
-      core/issues/185>)
-
-   *  In Section 15, formally define "final" and "interim" status codes
-      (<https://github.com/httpwg/http-core/issues/245>)
-
-   *  In Section 9.3.5, caution against a request content more strongly
-      (<https://github.com/httpwg/http-core/issues/258>)
-
-   *  In Section 8.8.3, note that Etag can be used in trailers
-      (<https://github.com/httpwg/http-core/issues/262>)
-
-   *  In Section 18.4, consider reserved fields as well
-      (<https://github.com/httpwg/http-core/issues/273>)
-
-   *  In Section 4.2.4, be more correct about what was deprecated by RFC
-      3986 (<https://github.com/httpwg/http-core/issues/278>,
-      <https://www.rfc-editor.org/errata/eid5964>)
-
-   *  In Section 5.3, recommend comma SP when combining field lines
-      (<https://github.com/httpwg/http-core/issues/148>)
-
-   *  In Section 7.2, make explicit requirements on origin server to use
-      authority from absolute-form when available
-      (<https://github.com/httpwg/http-core/issues/191>)
-
-   *  In Section 4.2.1, Section 4.2.2, Section 4.3.1, and Section 7.3.3,
-      refactored schemes to define origin and authoritative access to an
-      origin server for both "http" and "https" URIs to account for
-      alternative services and secured connections that are not
-      necessarily based on TCP (<https://github.com/httpwg/http-core/
-      issues/237>)
-
-   *  In Section 2.2, reference RFC 8174 as well
-      (<https://github.com/httpwg/http-core/issues/303>)
-
-C.9.  Since draft-ietf-httpbis-semantics-07
-
-   *  In Section 14.2, explicitly reference the definition of
-      representation data as including any content codings
-      (<https://github.com/httpwg/http-core/issues/11>)
-
-   *  Move TE: trailers from [HTTP/1.1] into Section 6.5.1
-      (<https://github.com/httpwg/http-core/issues/18>)
-
-   *  In Section 8.6, adjust requirements for handling multiple content-
-      length values (<https://github.com/httpwg/http-core/issues/59>)
-
-   *  In Section 13.1.1 and Section 13.1.2, clarified condition
-      evaluation (<https://github.com/httpwg/http-core/issues/72>)
-
-   *  In Section 5.5, remove concept of obs-fold, as that is
-      HTTP/1-specific (<https://github.com/httpwg/http-core/issues/116>)
-
-   *  In Section 12, introduce the concept of request content
-      negotiation (Section 12.3) and define for Accept-Encoding
-      (<https://github.com/httpwg/http-core/issues/119>)
-
-   *  In Section 15.3.6, Section 15.5.9, and Section 15.5.14, remove
-      HTTP/1-specific, connection-related requirements
-      (<https://github.com/httpwg/http-core/issues/144>)
-
-   *  In Section 9.3.6, correct language about what is forwarded
-      (<https://github.com/httpwg/http-core/issues/170>)
-
-   *  Throughout, replace "effective request URI", "request-target" and
-      similar with "target URI" (<https://github.com/httpwg/http-core/
-      issues/259>)
-
-   *  In Section 16.3.2.2 and Section 16.2.2, describe how extensions
-      should consider scope of applicability
-      (<https://github.com/httpwg/http-core/issues/265>)
-
-   *  In Section 3.4, don't rely on the HTTP/1.1 Messaging specification
-      to define "message" (<https://github.com/httpwg/http-core/
-      issues/311>)
-
-   *  In Section 8.7 and Section 10.1.3, note that URL resolution is
-      necessary (<https://github.com/httpwg/http-core/issues/321>)
-
-   *  In Section 3.2, explicitly reference 206 as one of the status
-      codes that provide representation data
-      (<https://github.com/httpwg/http-core/issues/325>)
-
-   *  In Section 13.1.4, refine requirements so that they don't apply to
-      resources without a concept of modification time
-      (<https://github.com/httpwg/http-core/issues/326>)
-
-   *  In Section 11.7.1, specify the scope as a request, not a target
-      resource (<https://github.com/httpwg/http-core/issues/331>)
-
-   *  In Section 3.4, introduce concept of "complete" messages
-      (<https://github.com/httpwg/http-core/issues/334>)
-
-   *  In Section 7.1, Section 9.3.6, and Section 9.3.7, refine use of
-      "request target" (<https://github.com/httpwg/http-core/
-      issues/340>)
-
-   *  Throughout, remove "status-line" and "request-line", as these are
-      HTTP/1.1-specific (<https://github.com/httpwg/http-core/
-      issues/361>)
-
-C.10.  Since draft-ietf-httpbis-semantics-08
-
-   *  In Section 15.5.17, remove duplicate definition of what makes a
-      range satisfiable and refer instead to each range unit's
-      definition (<https://github.com/httpwg/http-core/issues/12>)
-
-   *  In Section 14.1.2 and Section 14.2, clarify that a selected
-      representation of zero length can only be satisfiable as a suffix
-      range and that a server can still ignore Range for that case
-      (<https://github.com/httpwg/http-core/issues/12>)
-
-   *  In Section 12.5.1 and Section 15.5.16, allow "Accept" as response
-      field (<https://github.com/httpwg/http-core/issues/48>)
-
-   *  Appendix A now uses the sender variant of the "#" list expansion
-      (<https://github.com/httpwg/http-core/issues/192>)
-
-   *  In Section 12.5.5, make the field list-based even when "*" is
-      present (<https://github.com/httpwg/http-core/issues/272>)
-
-   *  In Section 16.3.1, add optional "Comments" entry
-      (<https://github.com/httpwg/http-core/issues/273>)
-
-   *  In Section 18.4, reserve "*" as field name
-      (<https://github.com/httpwg/http-core/issues/274>)
-
-   *  In Section 18.2, reserve "*" as method name
-      (<https://github.com/httpwg/http-core/issues/274>)
-
-   *  In Section 13.1.1 and Section 13.1.2, state that multiple "*" is
-      unlikely to be interoperable (<https://github.com/httpwg/http-
-      core/issues/305>)
-
-   *  In Section 12.5.1, avoid use of obsolete media type parameter on
-      text/html (<https://github.com/httpwg/http-core/issues/375>,
-      <https://www.rfc-editor.org/errata/eid6149>)
-
-   *  Rephrase prose in Section 3.4 to become version-agnostic
-      (<https://github.com/httpwg/http-core/issues/372>)
-
-   *  In Section 5.5, instruct recipients how to deal with control
-      characters in field values (<https://github.com/httpwg/http-core/
-      issues/377>)
-
-   *  In Section 5.5, update note about field ABNF
-      (<https://github.com/httpwg/http-core/issues/380>)
-
-   *  Add Section 16 about Extending and Versioning HTTP
-      (<https://github.com/httpwg/http-core/issues/384>)
-
-   *  In Section 15.1, include status 308 in list of heuristically
-      cacheable status codes (<https://github.com/httpwg/http-core/
-      issues/385>)
-
-   *  In Section 8.4, make it clearer that "identity" is not to be
-      included (<https://github.com/httpwg/http-core/issues/388>)
-
-C.11.  Since draft-ietf-httpbis-semantics-09
-
-   *  Switch to xml2rfc v3 mode for draft generation
-      (<https://github.com/httpwg/http-core/issues/394>)
-
-C.12.  Since draft-ietf-httpbis-semantics-10
-
-   *  In Section 17.6, mention compression attacks
-      (<https://github.com/httpwg/http-core/issues/6>)
-
-   *  In Section 16.6.1, advise to make new content codings self-
-      descriptive (<https://github.com/httpwg/http-core/issues/21>)
-
-   *  In Section 5.6.6, introduced the "parameters" ABNF rule, allowing
-      empty parameters and trailing semicolons within media type, media
-      range, and expectation (<https://github.com/httpwg/http-core/
-      issues/33>)
-
-   *  In Section 15.4, explain how to create a redirected request
-      (<https://github.com/httpwg/http-core/issues/38>)
-
-   *  In Section 8.3, defined error handling for multiple members
-      (<https://github.com/httpwg/http-core/issues/39>)
-
-   *  In Section 1, revise the introduction and introduce HTTP/2 and
-      HTTP/3 (<https://github.com/httpwg/http-core/issues/64>)
-
-   *  In Section 8.6, added a definition for Content-Length that
-      encompasses its various roles in describing message content or
-      selected representation length; in Section 15.3.7, noted that
-      Content-Length counts only the message content (not the selected
-      representation) and that the representation length is in each
-      Content-Range (<https://github.com/httpwg/http-core/issues/118>)
-
-   *  Noted that "WWW-Authenticate" with more than one value on a line
-      is sometimes not interoperable [HTTP/1.1]
-      (<https://github.com/httpwg/http-core/issues/136>)
-
-   *  In Section 13.1.1 and Section 13.1.4, removed requirement that a
-      validator not be sent in a 2xx response when validation fails and
-      the server decides that the same change request has already been
-      applied (<https://github.com/httpwg/http-core/issues/166>)
-
-   *  Moved requirements specific to HTTP/1.1 from Section 7.2 to
-      [HTTP/1.1] (<https://github.com/httpwg/http-core/issues/182>)
-
-   *  In Section 5.5, introduce the terms "singleton field" and "list-
-      based field" (also - in various places - discuss what to do when a
-      singleton field is received as a list)
-      (<https://github.com/httpwg/http-core/issues/193>)
-
-   *  In Section 10.1.1, change the ABNF back to be a list of
-      expectations, as defined in RFC 2616 (<https://github.com/httpwg/
-      http-core/issues/203>)
-
-   *  In Section 6.6.2 (Trailer), Section 7.6.3 (Via), Section 7.8
-      (Upgrade), Section 7.6.1 (Connection), Section 8.4
-      (Content-Encoding), Section 8.5 (Content-Language), Section 10.1.1
-      (Expect), Section 13.1.1 (If-Match), Section 13.1.2
-      (If-None-Match), Section 12.5.2 (Accept-Charset), Section 12.5.4
-      (Accept-Language), Section 12.5.5 (Vary), Section 11.6.1
-      (WWW-Authenticate), and Section 11.7.1 (Proxy-Authenticate),
-      adjust ABNF to allow empty lists (<https://github.com/httpwg/http-
-      core/issues/210>)
-
-   *  In Section 9.3.1 and Section 17.9, provide a more nuanced
-      explanation of sensitive data in GET-based forms and describe
-      workarounds (<https://github.com/httpwg/http-core/issues/277>)
-
-   *  In Section 13.2, allow preconditions to be evaluated before the
-      request content (if any) is processed (<https://github.com/httpwg/
-      http-core/issues/261>)
-
-   *  In Section 6.3 and Section 6.5.2, allow for trailer fields in
-      multiple trailer sections, depending on the HTTP version and
-      framing in use, with processing being iterative as each section is
-      received (<https://github.com/httpwg/http-core/issues/313>)
-
-   *  Moved definitions of "TE" and "Upgrade" from [HTTP/1.1]
-      (<https://github.com/httpwg/http-core/issues/392>)
-
-   *  Moved 1.1-specific discussion of TLS to Messaging and rewrote
-      Section 4.3.4 to refer to RFC6125 (<https://github.com/httpwg/
-      http-core/issues/404>)
-
-   *  Moved definition of "Connection" from [HTTP/1.1]
-      (<https://github.com/httpwg/http-core/issues/407>)
-
-C.13.  Since draft-ietf-httpbis-semantics-11
-
-   *  The entire document has been reorganized, with no changes to
-      content except editorial for the reorganization
-      (<https://github.com/httpwg/http-core/issues/368>)
-
-   *  Move IANA Upgrade Token Registry instructions from [HTTP/1.1]
-      (<https://github.com/httpwg/http-core/issues/450>)
-
-C.14.  Since draft-ietf-httpbis-semantics-12
-
-   *  In Appendix "Acknowledgements" (Appendix "Acknowledgements"),
-      added acks for the work since 2014 (<https://github.com/httpwg/
-      http-core/issues/442>)
-
-   *  In Section 15.3.7, specifically require that a client check the
-      206 response header fields to determine what ranges are enclosed,
-      since it cannot assume they exactly match those requested
-      (<https://github.com/httpwg/http-core/issues/445>)
-
-   *  In Section 16.3, explain why new fields need to be backwards-
-      compatible (<https://github.com/httpwg/http-core/issues/448>)
-
-   *  In Section 5.3, constrain field combination to be within a section
-      (<https://github.com/httpwg/http-core/issues/454>)
-
-   *  In Section 5.6.7, mention that caching relaxes date sensitivity
-      (<https://github.com/httpwg/http-core/issues/473>)
-
-   *  In Section 18.4, moved "*" field registration into main table
-      (<https://github.com/httpwg/http-core/issues/476>)
-
-   *  In Section 1.2, reference HTTP/0.9 (<https://github.com/httpwg/
-      http-core/issues/497>)
-
-   *  In Section 9.3.4, clarify handling of unrecognized fields
-      (<https://github.com/httpwg/http-core/issues/502>)
-
-   *  In Section 15.2, align language about bodies and trailers with 204
-      and 304 (<https://github.com/httpwg/http-core/issues/503>)
-
-   *  Moved table of content codings into Section 18.6, moved table of
-      range units into Section 18.7 (<https://github.com/httpwg/http-
-      core/issues/506>)
-
-   *  In Section 6, add an abstract data type for message to help define
-      semantics without being dependent on the specific structure of
-      HTTP/1.1 (<https://github.com/httpwg/http-core/issues/557>)
-
-   *  In Section 8.8.2.2, relax arbitrary 60-second comparison limit
-      (<https://github.com/httpwg/http-core/issues/510>)
-
-   *  In Section 7.2, add ":authority" pseudo-header to Host discussion
-      and make section applicable to both (<https://github.com/httpwg/
-      http-core/issues/511>)
-
-   *  In Section 18.4, note that this document updates [RFC3864]
-      (<https://github.com/httpwg/http-core/issues/515>)
-
-   *  Moved transfer-coding ABNF from [HTTP/1.1] to Section 10.1.4 and
-      replaced "t-ranking" ABNF by equivalent "weight"
-      (<https://github.com/httpwg/http-core/issues/531>)
-
-   *  In Section 11.5, replace "canonical root URI" by "origin"
-      (<https://github.com/httpwg/http-core/issues/542>)
-
-   *  In Section 10.1.1, remove obsolete note about a change in RFC 723x
-      (<https://github.com/httpwg/http-core/issues/547>)
-
-   *  Changed to using "payload" when defining requirements about the
-      data being conveyed within a message, instead of the terms
-      "payload body" or "response body" or "representation body", since
-      they often get confused with the HTTP/1.1 message body (which
-      includes transfer coding) (<https://github.com/httpwg/http-core/
-      issues/553>)
-
-   *  Rewrite definition of HEAD method (<https://github.com/httpwg/
-      http-core/issues/559>)
-
-   *  In Section 13.1.5, fix an off-by-one bug about how many chars to
-      consider when checking for etags (<https://github.com/httpwg/http-
-      core/issues/570>)
-
-   *  In Section 15.1, clarify that "no reason phrase" is fine as well
-      (<https://github.com/httpwg/http-core/issues/571>)
-
-   *  In Section 15.3.4, remove an obsolete reference to the Warning
-      response header field (<https://github.com/httpwg/http-core/
-      issues/573>)
-
-   *  In Section 15.5.9, rephrase prose about connection re-use
-      (<https://github.com/httpwg/http-core/issues/579>)
-
-   *  In Section 14.2, potentially allow Range handling on methods other
-      than GET (<https://github.com/httpwg/http-core/issues/581>)
-
-   *  In Section 18.3, remove redundant text about status code 418
-      (<https://github.com/httpwg/http-core/issues/583>)
-
-   *  In Section 17.16.1, rewrite requirement to refer to "secured
-      connection" (<https://github.com/httpwg/http-core/issues/587>)
-
-   *  Make reference to [TLS13] normative (<https://github.com/httpwg/
-      http-core/issues/589>)
-
-C.15.  Since draft-ietf-httpbis-semantics-13
-
-   *  In Section 12.5.1, remove the unused "accept parameters"
-      (<https://github.com/httpwg/http-core/issues/568>)
-
-   *  In Section 1.2, mention that RFC 1945 describes HTTP/0.9 as well
-      (<https://github.com/httpwg/http-core/issues/614>)
-
-   *  In Section 14.5, describe non-standard use of the Content-Range
-      header field (Section 14.4) as a request modifier to perform a
-      partial PUT (<https://github.com/httpwg/http-core/issues/618>)
-
-   *  In Section 15.5.20, import the 421 (Misdirected Request) status
-      code from [HTTP/2] (<https://github.com/httpwg/http-core/
-      issues/622>)
-
-   *  In Section 2.3, rephrase the actual recipient parsing requirements
-      (<https://github.com/httpwg/http-core/issues/634>)
-
-   *  In Section 16.1.2, mention request target forms in considerations
-      for new methods (<https://github.com/httpwg/http-core/issues/636>)
-
-   *  Changed to using "content" instead of "payload" or "payload data"
-      to avoid confusion with the payload of version-specific messaging
-      frames (<https://github.com/httpwg/http-core/issues/654>)
-
-   *  In Section 13.1.3, Section 13.1.4, and Section 13.1.5, specify
-      evaluation in a way similar to other conditional header fields
-      (<https://github.com/httpwg/http-core/issues/665>)
-
-   *  In Section 6.6.1, specify that recipients can replace an invalid
-      Date header field value with the time received
-      (<https://github.com/httpwg/http-core/issues/669>)
-
-C.16.  Since draft-ietf-httpbis-semantics-14
-
-   *  In Section 5.5, relax prohibition of characters in field values to
-      CR and NUL (<https://github.com/httpwg/http-core/issues/683>)
-
-   *  In Section 15, clarify that status code values outside the range
-      100..599 are invalid, and recommend error handling
-      (<https://github.com/httpwg/http-core/issues/684>)
-
-   *  In Section 2.2, replaced requirement on semantic conformance with
-      permission to ignore/workaround implementation-specific failures
-      (<https://github.com/httpwg/http-core/issues/687>)
-
-   *  Avoid the term "whitelist" (<https://github.com/httpwg/http-core/
-      issues/688>)
-
-   *  In Section 9.3.8, remove the normative requirement to use the
-      message/http media type (<https://github.com/httpwg/http-core/
-      issues/690>)
-
-   *  In Section 7.6, discuss extensibility (<https://github.com/httpwg/
-      http-core/issues/692>)
-
-   *  In Section 5.5, tighten the recommendation for characters in newly
-      defined fields, making it consistent with obs-text
-      (<https://github.com/httpwg/http-core/issues/696>)
-
-   *  In Section 5.5, leading/trailing whitespace removal is at time of
-      use, not parsing (<https://github.com/httpwg/http-core/
-      issues/697>)
-
-   *  In Section 6, clarify that HTTP self-descriptive messages have an
-      exception in that the request must be understood in order to parse
-      and interpret the response (<https://github.com/httpwg/http-core/
-      issues/700>)
-
-   *  Remove "Canonicalization and Text Defaults"
-      (<https://github.com/httpwg/http-core/issues/703>)
-
-   *  In Section 10.1.3, refine what can be sent in Referer, and when
-      (<https://github.com/httpwg/http-core/issues/709>)
-
-   *  In Section 11.5, explain that the protection space is not defined
-      without additional information (<https://github.com/httpwg/http-
-      core/issues/710>)
-
-   *  Simplify description of reactive content negotiation in
-      Section 12.2 (<https://github.com/httpwg/http-core/issues/712>)
-
-   *  In Section 8.3.2, remove the "charset" ABNF production, and
-      clarify where charsets appear (<https://github.com/httpwg/http-
-      core/issues/713>)
-
-   *  In Section 12.5.3, clarify that selection _between_ multiple
-      acceptable codings is only relevant when they have the same
-      purpose (<https://github.com/httpwg/http-core/issues/714>)
-
-   *  In Section 13, rewrite introduction, mentioning extensibility
-      (<https://github.com/httpwg/http-core/issues/715>)
-
-   *  Throughout, be consistent about 'content coding' vs 'content-
-      coding' (<https://github.com/httpwg/http-core/issues/719>)
-
-   *  In Section 9.3.6, clarify that the port is mandatory in a CONNECT
-      request target (<https://github.com/httpwg/http-core/issues/736>)
-      and that the tunnel begins after the header section
-      (<https://github.com/httpwg/http-core/issues/737>)
-
-   *  In Section 6.5, remove mid-stream trailers
-      (<https://github.com/httpwg/http-core/issues/740>)
-
-   *  In Section 3.3, clarify duplexing semantics
-      (<https://github.com/httpwg/http-core/issues/741>)
-
-   *  In Section 3.3, explain the implications of statelessness more
-      clearly (<https://github.com/httpwg/http-core/issues/743>)
-
-   *  In Section 8.6, be more explicit about invalid and incorrect
-      values (<https://github.com/httpwg/http-core/issues/748> and
-      <https://github.com/httpwg/http-core/issues/749>)
-
-   *  Move discussion of statelessness from Section 3.7 to Section 3.3
-      (<https://github.com/httpwg/http-core/issues/753>)
-
-   *  In Section 15.2.2, clarify that the upgraded protocol is in effect
-      after the 101 response (<https://github.com/httpwg/http-core/
-      issues/776>)
-
-   *  In Section 9.3.6, state that data received after the headers of a
-      CONNECT message is version-specific (<https://github.com/httpwg/
-      http-core/issues/780>)
-
-   *  In Section 4.2.3, clarify how normalization works, and align with
-      RF3986 (<https://github.com/httpwg/http-core/issues/788>)
-
-   *  In Section 6.6.2, note that the Trailer field can be used to
-      discover deleted trailers (<https://github.com/httpwg/http-core/
-      issues/793>)
-
-   *  Throughout, remove unneeded normative references to [HTTP/1.1]
-      (<https://github.com/httpwg/http-core/issues/795>)
-
-   *  In Section 10.1.4, explicitly require listing in Connection
-      (<https://github.com/httpwg/http-core/issues/809>)
-
-C.17.  Since draft-ietf-httpbis-semantics-15
-
-   *  For [HTTP/3], add an RFC Editor note to rename to "RFCnnn" before
-      publication (<https://github.com/httpwg/http-core/issues/815>)
-
-   *  In Section 9.3.2, align prose about content in HEAD requests with
-      description of GET (<https://github.com/httpwg/http-core/
-      issues/826>)
-
-   *  In Section 5.3, remove the restriction to non-empty field line
-      values (<https://github.com/httpwg/http-core/issues/836>)
-
-   *  Add forward references to definition of OWS
-      (<https://github.com/httpwg/http-core/issues/841>)
-
-   *  In Section 17.10, add a security consideration regarding
-      application handling of field names (<https://github.com/httpwg/
-      http-core/issues/843>)
-
-C.18.  Since draft-ietf-httpbis-semantics-16
-
-   This draft addresses mostly editorial issues raised during or past
-   IETF Last Call; see <https://github.com/httpwg/http-core/
-   issues?q=label%3Asemantics+created%3A%3E2021-05-26> for a summary.
-
-   Furthermore:
-
-   *  In Section 15.3.7, reinstate 'to a request'
-      (<https://github.com/httpwg/http-core/issues/857>)
-
-   *  Align Section 16.3.1 with Section 16.3.2.1
-      (<https://github.com/httpwg/http-core/issues/857>)
-
-   *  In Section 14.3, clarify that Accept-Ranges can be sent by any
-      server, remove "none" from the ABNF because it is now a reserved
-      range unit, and allow the field to be sent in a trailer section
-      while noting why that is much less useful than as a header field
-      (<https://github.com/httpwg/http-core/issues/857>)
-
-   *  In Section 7.6.3, don't specify TCP (<https://github.com/httpwg/
-      http-core/issues/865>)
-
-   *  In Section 6.4, explain the "Content-" prefix
-      (<https://github.com/httpwg/http-core/issues/878>)
-
-   *  In Section 7.4, check all target URIs for scheme semantic
-      mismatches (<https://github.com/httpwg/http-core/issues/896>)
-
-   *  In Section 9.3.1, Section 9.3.2, and Section 9.3.5, clarify
-      (again) that sending content in a request for a method that does
-      not define such content will not interoperate without prior
-      agreement, even if it is parsed correctly, and cannot be relied
-      upon by an origin server unless they control the entire request
-      chain (<https://github.com/httpwg/http-core/issues/904>)
-
-C.19.  Since draft-ietf-httpbis-semantics-17
-
-   *  Move ABNF for obs-text into Section 5.5
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 6.4.1, note that response metadata can be relevant as
-      well (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 6.6.2, use the term "signature" througout and lower
-      expectations on what Trailer indicates without a trailer section
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 8.3, cleanup mime sniffing discussion
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 10.1.4, add a forward reference to "weight"
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 12.5.3, clarify that the examples contains multiple
-      values; also remove obsolete HTTP/1.0 note about qvalues
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  In Section 15.4, remove incorrect mention of Etag as request field
-      (<https://github.com/httpwg/http-core/issues/914>)
-
-   *  Move text about obs-fold in message/http to [HTTP/1.1]; also note
-      that LF is forbidden in field values just as CR and NUL
-      (<https://github.com/httpwg/http-core/issues/923>)
-
-   *  In Section 7.7, properly refer to text that has moved to
-      [HTTP/1.1] (<https://github.com/httpwg/http-core/issues/930>)
-
-   *  Rewrite description of validators and move cache-related aspects
-      into [CACHING] (<https://github.com/httpwg/http-core/issues/933>)
-
-   *  In Section 12.5.5, rephrase description to be more explanatory
-      (<https://github.com/httpwg/http-core/issues/938>)
-
-   *  In Section 13.2.2, clarify that a false If-Range means ignore the
-      Range (<https://github.com/httpwg/http-core/issues/940>)
-
-   *  In Section 13.1.3 and Section 13.1.4, restore text about missing
-      modification date (<https://github.com/httpwg/http-core/
-      issues/942>)
-
-   *  In Section 5.6.1.1, avoid duplicate normative requirement
-      (<https://github.com/httpwg/http-core/issues/943>)
-
-   *  In Section 8.8.2.1, reference 'Date' more visibly
-      (<https://github.com/httpwg/http-core/issues/945>)
-
-   *  In Section 11.7.3, state that Proxy-Authentication-Info can be
-      used as trailer (<https://github.com/httpwg/http-core/issues/946>)
-
-   *  In Section 15.4, slightly clarify history of redirect status codes
-      (<https://github.com/httpwg/http-core/issues/947>)
-
-   *  In Section 16.3.1, fix requirements for provisional registrations
-      (<https://github.com/httpwg/http-core/issues/950>)
-
-   *  In Section 4.3, explicitly refer to how this spec defines access
-      to http or https resources (<https://github.com/httpwg/http-core/
-      issues/951>)
-
-   *  In Section 6.6.1, make clock a defined term and use that
-      definition throughout the spec (<https://github.com/httpwg/http-
-      core/issues/953>)
-
-   *  In Section 13.1, make preconditions consistent on when they are
-      required to be evaluated (<https://github.com/httpwg/http-core/
-      issues/954>)
-
-   *  Throughout, disambiguate "selected representation" and "selected
-      response" (now "chosen response") (<https://github.com/httpwg/
-      http-core/issues/958>)
-
-C.20.  Since draft-ietf-httpbis-semantics-18
-
-   *  In Section 12.5.1, align text about "q" parameter with recent
-      changes to IANA media types registry, and instruct IANA to
-      reference this document with respect to the "q" special case
-      (<https://github.com/httpwg/http-core/issues/970>)
-
-   *  In Section 18.4, rephrase text about the relation with [RFC3864]
-      (<https://github.com/httpwg/http-core/pull/973>)
-
-   *  In Section 3.7, avoid bare "for the sake of security"
-      (<https://github.com/httpwg/http-core/pull/974>)
-
-   *  In Section 12.2, wordsmith future guidance on reactive negotiation
-      (<https://github.com/httpwg/http-core/pull/975>)
-
-   *  In Section 15.4.2 and Section 15.4.9, improve text about automatic
-      link-editing (<https://github.com/httpwg/http-core/pull/976>)
-
-   *  In Section 17, reference [URI] security considerations
-      (<https://github.com/httpwg/http-core/pull/977>)
-
-C.21.  Since draft-ietf-httpbis-semantics-19
-
-   *  In Section 16.3.1, add states 'obsoleted' and 'deprecated'; in
-      Section 18.4, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
-
-   *  In Section 12.5.3, slightly relax requirements for handling
-      Accept-Encoding field values (<https://github.com/httpwg/http-
-      core/issues/980>)
-
-   *  In Section 18.4, update IANA instructions based on received
-      feedback (<https://github.com/httpwg/http-core/issues/982>)
-
 Acknowledgements
 
    Aside from the current editors, the following individuals deserve
    special recognition for their contributions to early aspects of HTTP
    and its core specifications: Marc Andreessen, Tim Berners-Lee, Robert
-   Cailliau, Daniel W.  Connolly, Bob Denny, John Franks, Jim Gettys,
+   Cailliau, Daniel W. Connolly, Bob Denny, John Franks, Jim Gettys,
    Jean-François Groff, Phillip M. Hallam-Baker, Koen Holtman, Jeffery
    L. Hostetler, Shel Kaphan, Dave Kristol, Yves Lafon, Scott
    D. Lawrence, Paul J. Leach, Håkon W. Lie, Ari Luotonen, Larry
@@ -11148,11 +10145,13 @@
    Henrik Frystyk Nielsen, Dave Raggett, Eric Rescorla, Tony Sanders,
    Lawrence C. Stewart, Marc VanHeyningen, and Steve Zilles.
 
-   This edition builds on the many contributions that went into past
-   specifications of HTTP, including RFC 1945, RFC 2068, RFC 2145, RFC
-   2616, RFC 2617, RFC 2818, RFC 7230, RFC 7231, RFC 7232, RFC 7233, RFC
-   7234, and RFC 7235.  The acknowledgements within those documents
-   still apply.
+   This document builds on the many contributions that went into past
+   specifications of HTTP, including RFC 1945 [HTTP/1.0], RFC 2068
+   [RFC2068], RFC 2145 [RFC2145], RFC 2616 [RFC2616], RFC 2617
+   [RFC2617], RFC 2818 [RFC2818], RFC 7230 [RFC7230], RFC 7231
+   [RFC7231], RFC 7232 [RFC7232], RFC 7233 [RFC7233], RFC 7234
+   [RFC7234], and RFC 7235 [RFC7235].  The acknowledgements within those
+   documents still apply.
 
    Since 2014, the following contributors have helped improve this
    specification by reporting bugs, asking smart questions, drafting or
@@ -11277,7 +10276,7 @@
          Content-Language header field  Section 8.5
          Content-Length header field  Section 8.6
          Content-Location header field  Section 8.7
-         Content-MD5 header field  Section 18.4, Paragraph 9
+         Content-MD5 header field  Section 18.4, Paragraph 10
          Content-Range header field  Section 14.4; Section 14.5
          Content-Type header field  Section 8.3
          cache  Section 3.8
@@ -11312,7 +10311,7 @@
       F
 
          Fields
-            *  Section 18.4, Paragraph 8
+            *  Section 18.4, Paragraph 9
             Accept  Section 12.5.1
             Accept-Charset  Section 12.5.2
             Accept-Encoding  Section 12.5.3
@@ -11326,7 +10325,7 @@
             Content-Language  Section 8.5
             Content-Length  Section 8.6
             Content-Location  Section 8.7
-            Content-MD5  Section 18.4, Paragraph 9
+            Content-MD5  Section 18.4, Paragraph 10
             Content-Range  Section 14.4; Section 14.5
             Content-Type  Section 8.3
             Date  Section 6.6.1
@@ -11536,7 +10535,7 @@
             Content-Language  Section 8.5
             Content-Length  Section 8.6
             Content-Location  Section 8.7
-            Content-MD5  Section 18.4, Paragraph 9
+            Content-MD5  Section 18.4, Paragraph 10
             Content-Range  Section 14.4; Section 14.5
             Content-Type  Section 8.3
             Date  Section 6.6.1
@@ -11679,12 +10678,11 @@
 
          TE header field  Section 10.1.4
          TRACE method  Section 9.3.8
-         Trailer Fields
+         Trailer Fields  Section 6.5
             ETag  Section 8.8.3
          Trailer header field  Section 6.6.2
          target URI  Section 7.1
          target resource  Section 7.1
-         trailer fields  Section 6.5
          trailer section  Section 6.5
          trailers  Section 6.5
          transforming proxy  Section 7.7
