--- draft-ietf-httpbis-messaging-latest.txt	2022-01-02 16:19:24.967170100 +0100
+++ rfc9112-to-be.txt	2022-01-02 14:06:24.439099300 +0100
@@ -2,17 +2,16 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 7230 (if approved)                         M. Nottingham, Ed.
-Intended status: Standards Track                                  Fastly
-Expires: 6 July 2022                                     J. Reschke, Ed.
-                                                              greenbytes
-                                                          2 January 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9112                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 7230                                                   Fastly
+Category: Standards Track                                J. Reschke, Ed.
+ISSN: 2070-1721                                               greenbytes
+                                                            October 2021
 
 
                                 HTTP/1.1
-                  draft-ietf-httpbis-messaging-latest
 
 Abstract
 
@@ -24,50 +23,34 @@
 
    This document obsoletes portions of RFC 7230.
 
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix D.21.
-
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
-
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
+   This is an Internet Standards Track document.
 
-   This Internet-Draft will expire on 6 July 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9112.
 
 Copyright Notice
 
-   Copyright (c) 2022 IETF Trust and the persons identified as the
+   Copyright (c) 2021 IETF Trust and the persons identified as the
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -149,36 +132,14 @@
      B.3.  Conversion of Date Formats
      B.4.  Conversion of Content-Encoding
      B.5.  Conversion of Content-Transfer-Encoding
-     B.6.  MHTML and Line Length Limitations
-   Appendix C.  Changes from previous RFCs
+     B.6.  MHTML and Line-Length Limitations
+   Appendix C.  Changes from Previous RFCs
      C.1.  Changes from HTTP/0.9
      C.2.  Changes from HTTP/1.0
        C.2.1.  Multihomed Web Servers
        C.2.2.  Keep-Alive Connections
        C.2.3.  Introduction of Transfer-Encoding
      C.3.  Changes from RFC 7230
-   Appendix D.  Change Log
-     D.1.  Between RFC7230 and draft 00
-     D.2.  Since draft-ietf-httpbis-messaging-00
-     D.3.  Since draft-ietf-httpbis-messaging-01
-     D.4.  Since draft-ietf-httpbis-messaging-02
-     D.5.  Since draft-ietf-httpbis-messaging-03
-     D.6.  Since draft-ietf-httpbis-messaging-04
-     D.7.  Since draft-ietf-httpbis-messaging-05
-     D.8.  Since draft-ietf-httpbis-messaging-06
-     D.9.  Since draft-ietf-httpbis-messaging-07
-     D.10. Since draft-ietf-httpbis-messaging-08
-     D.11. Since draft-ietf-httpbis-messaging-09
-     D.12. Since draft-ietf-httpbis-messaging-10
-     D.13. Since draft-ietf-httpbis-messaging-11
-     D.14. Since draft-ietf-httpbis-messaging-12
-     D.15. Since draft-ietf-httpbis-messaging-13
-     D.16. Since draft-ietf-httpbis-messaging-14
-     D.17. Since draft-ietf-httpbis-messaging-15
-     D.18. Since draft-ietf-httpbis-messaging-16
-     D.19. Since draft-ietf-httpbis-messaging-17
-     D.20. Since draft-ietf-httpbis-messaging-18
-     D.21. Since draft-ietf-httpbis-messaging-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -190,14 +151,14 @@
    self-descriptive messages for flexible interaction with network-based
    hypertext information systems.  HTTP/1.1 is defined by:
 
-   *  This document
+   *  RFC 9112
 
    *  "HTTP Semantics" [HTTP]
 
    *  "HTTP Caching" [CACHING]
 
    This document specifies how HTTP semantics are conveyed using the
-   HTTP/1.1 message syntax, framing and connection management
+   HTTP/1.1 message syntax, framing, and connection management
    mechanisms.  Its goal is to define the complete set of requirements
    for HTTP/1.1 message parsers and message-forwarding intermediaries.
 
@@ -210,8 +171,8 @@
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    Conformance criteria and considerations regarding error handling are
@@ -225,7 +186,7 @@
 
    It also uses a list extension, defined in Section 5.6.1 of [HTTP],
    that allows for compact definition of comma-separated lists using a
-   '#' operator (similar to how the '*' operator indicates repetition).
+   "#" operator (similar to how the "*" operator indicates repetition).
    Appendix A shows the collected grammar with all list operators
    expanded to standard ABNF notation.
 
@@ -281,7 +242,7 @@
                       [ message-body ]
 
    A message can be either a request from client to server or a response
-   from server to client.  Syntactically, the two types of message
+   from server to client.  Syntactically, the two types of messages
    differ only in the start-line, which is either a request-line (for
    requests) or a status-line (for responses), and in the algorithm for
    determining the length of the message body (Section 6).
@@ -291,12 +252,12 @@
    In theory, a client could receive requests and a server could receive
    responses, distinguishing them by their different start-line formats.
    In practice, servers are implemented to only expect a request (a
-   response is interpreted as an unknown or invalid request method) and
+   response is interpreted as an unknown or invalid request method), and
    clients are implemented to only expect a response.
 
-   HTTP makes use of some protocol elements similar to the Multipurpose
-   Internet Mail Extensions (MIME) [RFC2045].  See Appendix B for the
-   differences between HTTP and MIME messages.
+   HTTP makes use of some protocol elements similar to Multipurpose
+   Internet Mail Extensions (MIME) [RFC2045].  See Appendix B of this
+   document for the differences between HTTP and MIME messages.
 
 2.2.  Message Parsing
 
@@ -409,9 +370,9 @@
 
 3.  Request Line
 
-   A request-line begins with a method token, followed by a single space
-   (SP), the request-target, another single space (SP), and ends with
-   the protocol version.
+   A request-line begins with a method token, followed by a single SP,
+   the request-target, and another single SP, and ends with the protocol
+   version.
 
      request-line   = method SP request-target SP HTTP-version
 
@@ -445,8 +406,8 @@
      method         = token
 
    The request methods defined by this specification can be found in
-   Section 9 of [HTTP], along with information regarding the HTTP method
-   registry and considerations for defining new methods.
+   Section 9 of [HTTP], along with information regarding the "HTTP
+   Method Registry" and considerations for defining new methods.
 
 3.2.  Request Target
 
@@ -524,7 +485,7 @@
 
    The proxy is requested to either service that request from a valid
    cache, if possible, or make the same request on the client's behalf
-   to either the next inbound proxy server or directly to the origin
+   either to the next inbound proxy server or directly to the origin
    server indicated by the request-target.  Requirements on such
    "forwarding" of messages are defined in Section 7.6 of [HTTP].
 
@@ -568,7 +529,8 @@
    destination as the request-target.  The client obtains the host and
    port from the target URI's authority component, except that it sends
    the scheme's default port if the target URI elides the port.  For
-   example, a CONNECT request to "http://www.example.com" looks like
+   example, a CONNECT request to "http://www.example.com" looks like the
+   following:
 
    CONNECT www.example.com:80 HTTP/1.1
    Host: www.example.com
@@ -638,7 +600,7 @@
       the scheme, "://", authority, and combined path and query
       component.
 
-   Example 1: the following message received over a secure connection
+   Example 1: The following message received over a secure connection
 
    GET /pub/WWW/TheProject.html HTTP/1.1
    Host: www.example.org
@@ -647,7 +609,7 @@
 
      https://www.example.org/pub/WWW/TheProject.html
 
-   Example 2: the following message received over an insecure connection
+   Example 2: The following message received over an insecure connection
 
    OPTIONS * HTTP/1.1
    Host: www.example.org:8080
@@ -661,7 +623,7 @@
    "https"), the server can reject the request or determine whether a
    configured default applies that is consistent with the incoming
    connection's context.  Context might include connection details like
-   address and port, what security has been applied, and locally-defined
+   address and port, what security has been applied, and locally defined
    information specific to that server's configuration.  An empty
    authority is replaced with the configured default before further
    processing of the request.
@@ -683,11 +645,10 @@
 4.  Status Line
 
    The first line of a response message is the status-line, consisting
-   of the protocol version, a space (SP), the status code, another
-   space, and ending with an OPTIONAL textual phrase describing the
-   status code.
+   of the protocol version, an SP, the status code, and another SP and
+   ending with an OPTIONAL textual phrase describing the status code.
 
-     status-line = HTTP-version SP status-code SP [reason-phrase]
+     status-line = HTTP-version SP status-code SP [ reason-phrase ]
 
    Although the status-line grammar rule requires that each of the
    component elements be separated by a single SP octet, recipients MAY
@@ -726,8 +687,8 @@
    reliable channel for information (it might be translated for a given
    locale, overwritten by intermediaries, or discarded when the message
    is forwarded via other versions of HTTP).  A server MUST send the
-   space that separates status-code from the reason-phrase even when the
-   reason-phrase is absent (i.e., the status-line would end with the
+   space that separates the status-code from the reason-phrase even when
+   the reason-phrase is absent (i.e., the status-line would end with the
    three octets SP CR LF).
 
 5.  Field Syntax
@@ -820,7 +781,7 @@
 
    The presence of a message body in a response depends on both the
    request method to which it is responding and the response status code
-   (Section 4), and corresponds to when content is allowed; see
+   (Section 4), and it corresponds to when content is allowed; see
    Section 6.4 of [HTTP].
 
 6.1.  Transfer-Encoding
@@ -865,7 +826,7 @@
    Unlike Content-Encoding (Section 8.4.1 of [HTTP]), Transfer-Encoding
    is a property of the message, not of the representation, and any
    recipient along the request/response chain MAY decode the received
-   transfer coding(s) or apply additional transfer coding(s) to the
+   transfer coding(s) or apply an additional transfer coding(s) to the
    message body, assuming that corresponding changes are made to the
    Transfer-Encoding field value.  Additional information about the
    encoding parameters can be provided by other header fields not
@@ -995,9 +956,9 @@
        invalid Content-Length header field, then the message framing is
        invalid and the recipient MUST treat it as an unrecoverable
        error, unless the field value can be successfully parsed as a
-       comma-separated list (Section 5.6.1 of [HTTP]), all values in the
-       list are valid, and all values in the list are the same (in which
-       case the message is processed with that single value used as the
+       comma-separated list (Section 5.6.1 of [HTTP]); all values in the
+       list are valid; and all values in the list are the same (in which
+       case, the message is processed with that single value used as the
        Content-Length field value).  If the unrecoverable error is in a
        request message, the server MUST respond with a 400 (Bad Request)
        status code and then close the connection.  If it is in a
@@ -1044,7 +1005,7 @@
    existing services respond to chunked with a 411 (Length Required)
    status code even though they understand the chunked transfer coding.
    This is typically because such services are implemented via a gateway
-   that requires a content-length in advance of being called and the
+   that requires a content-length in advance of being called, and the
    server is unable or unwilling to buffer the entire request before
    processing.
 
@@ -1074,10 +1035,11 @@
    that is being transferred.
 
    All transfer-coding names are case-insensitive and ought to be
-   registered within the HTTP Transfer Coding registry, as defined in
-   Section 7.3.  They are used in the Transfer-Encoding (Section 6.1)
-   and TE (Section 10.1.4 of [HTTP]) header fields (the latter also
-   defining the "transfer-coding" grammar).
+   registered within the "Hypertext Transfer Protocol (HTTP) Transfer
+   Coding Registry", as defined in Section 7.3.  They are used in the
+   Transfer-Encoding (Section 6.1) and TE (Section 10.1.4 of [HTTP])
+   header fields (the latter also defining the "transfer-coding"
+   grammar).
 
 7.1.  Chunked Transfer Coding
 
@@ -1137,10 +1099,11 @@
    The chunked encoding is specific to each connection and is likely to
    be removed or recoded by each recipient (including intermediaries)
    before any higher-level application would have a chance to inspect
-   the extensions.  Hence, use of chunk extensions is generally limited
-   to specialized HTTP services such as "long polling" (where client and
-   server can have shared expectations regarding the use of chunk
-   extensions) or for padding within an end-to-end secured connection.
+   the extensions.  Hence, the use of chunk extensions is generally
+   limited to specialized HTTP services such as "long polling" (where
+   client and server can have shared expectations regarding the use of
+   chunk extensions) or for padding within an end-to-end secured
+   connection.
 
    A recipient MUST ignore unrecognized chunk extensions.  A server
    ought to limit the total length of chunk extensions received in a
@@ -1219,8 +1182,8 @@
 
 7.3.  Transfer Coding Registry
 
-   The "HTTP Transfer Coding Registry" defines the namespace for
-   transfer coding names.  It is maintained at
+   The "Hypertext Transfer Protocol (HTTP) Transfer Coding Registry"
+   defines the namespace for transfer coding names.  It is maintained at
    <https://www.iana.org/assignments/http-parameters>.
 
    Registrations MUST include the following fields:
@@ -1234,17 +1197,17 @@
    Names of transfer codings MUST NOT overlap with names of content
    codings (Section 8.4.1 of [HTTP]) unless the encoding transformation
    is identical, as is the case for the compression codings defined in
-   Section 7.2.
+   Section 7.2 of this document.
 
-   The TE header field (Section 10.1.4 of [HTTP]) uses a pseudo
-   parameter named "q" as rank value when multiple transfer codings are
-   acceptable.  Future registrations of transfer codings SHOULD NOT
+   The TE header field (Section 10.1.4 of [HTTP]) uses a pseudo-
+   parameter named "q" as the rank value when multiple transfer codings
+   are acceptable.  Future registrations of transfer codings SHOULD NOT
    define parameters called "q" (case-insensitively) in order to avoid
    ambiguities.
 
    Values to be added to this namespace require IETF Review (see
-   Section 4.8 of [RFC8126]), and MUST conform to the purpose of
-   transfer coding defined in this specification.
+   Section 4.8 of [RFC8126]) and MUST conform to the purpose of transfer
+   coding defined in this specification.
 
    Use of program names for the identification of encoding formats is
    not desirable and is discouraged for future encodings.
@@ -1253,7 +1216,7 @@
 
    The TE field (Section 10.1.4 of [HTTP]) is used in HTTP/1.1 to
    indicate what transfer-codings, besides chunked, the client is
-   willing to accept in the response, and whether the client is willing
+   willing to accept in the response and whether the client is willing
    to preserve trailer fields in a chunked transfer coding.
 
    A client MUST NOT send the chunked transfer coding name in TE;
@@ -1267,7 +1230,7 @@
 
    When multiple transfer codings are acceptable, the client MAY rank
    the codings by preference using a case-insensitive "q" parameter
-   (similar to the qvalues used in content negotiation fields,
+   (similar to the qvalues used in content negotiation fields; see
    Section 12.4.2 of [HTTP]).  The rank value is a real number in the
    range 0 through 1, where 0.001 is the least preferred and 1 is the
    most preferred; a value of 0 means "not acceptable".
@@ -1331,10 +1294,10 @@
    to use a proxy via some other connection, port, or protocol.
 
    HTTP implementations are expected to engage in connection management,
-   which includes maintaining the state of current connections,
-   establishing a new connection or reusing an existing connection,
-   processing messages received on a connection, detecting connection
-   failures, and closing each connection.  Most clients maintain
+   which includes maintaining the state of current connections;
+   establishing a new connection or reusing an existing connection;
+   processing messages received on a connection; detecting connection
+   failures; and closing each connection.  Most clients maintain
    multiple connections in parallel, including more than one connection
    per server endpoint.  Most servers are designed to maintain thousands
    of concurrent connections, while controlling request queues to enable
@@ -1354,7 +1317,7 @@
    messages.  Hence, it relies on the order of response arrival to
    correspond exactly to the order in which requests are made on the
    same connection.  More than one response message per request only
-   occurs when one or more informational responses (1xx, see
+   occurs when one or more informational responses (1xx; see
    Section 15.2 of [HTTP]) precede a final response to the same request.
 
    A client that has more than one outstanding request on a connection
@@ -1367,7 +1330,7 @@
    outstanding requests, the client MUST NOT consider that data to be a
    valid response; the client SHOULD close the connection, since message
    delimitation is now ambiguous, unless the data consists only of one
-   or more CRLF (which can be discarded, as per Section 2.2).
+   or more CRLF (which can be discarded per Section 2.2).
 
 9.3.  Persistence
 
@@ -1410,7 +1373,7 @@
    have a self-defined message length (i.e., one not defined by closure
    of the connection), as described in Section 6.  A server MUST read
    the entire request message body or close the connection after sending
-   its response, since otherwise the remaining data on a persistent
+   its response; otherwise, the remaining data on a persistent
    connection would be misinterpreted as the next request.  Likewise, a
    client MUST read the entire response message body if it intends to
    reuse the same connection for a subsequent request.
@@ -1521,7 +1484,7 @@
 
    A server SHOULD sustain persistent connections, when possible, and
    allow the underlying transport's flow-control mechanisms to resolve
-   temporary overloads, rather than terminate connections with the
+   temporary overloads rather than terminate connections with the
    expectation that clients will retry.  The latter technique can
    exacerbate network congestion or server load.
 
@@ -1543,8 +1506,8 @@
    Connection: close
 
    as a request header field indicates that this is the last request
-   that the client will send on this connection, while in a response the
-   same field indicates that the server is going to close this
+   that the client will send on this connection, while in a response,
+   the same field indicates that the server is going to close this
    connection after the response message is complete.
 
    Note that the field name "Close" is reserved, since using that name
@@ -1609,7 +1572,7 @@
    connection to the server on the appropriate port and sends the TLS
    ClientHello to begin the TLS handshake.  When the TLS handshake has
    finished, the client may then initiate the first HTTP request.  All
-   HTTP data MUST be sent as TLS "application data", but is otherwise
+   HTTP data MUST be sent as TLS "application data" but is otherwise
    treated like a normal connection for HTTP (including potential reuse
    as a persistent connection).
 
@@ -1631,7 +1594,7 @@
    data already received, but it could indicate that subsequent data
    might have been truncated.  As TLS is not directly aware of HTTP
    message framing, it is necessary to examine the HTTP data itself to
-   determine whether messages were complete.  Handling of incomplete
+   determine whether messages are complete.  Handling of incomplete
    messages is defined in Section 8.
 
    When encountering an incomplete close, a client SHOULD treat as
@@ -1666,7 +1629,7 @@
    The message/http media type can be used to enclose a single HTTP
    request or response message, provided that it obeys the MIME
    restrictions for all "message" types regarding line length and
-   encodings.  Because of the line length limitations, field values
+   encodings.  Because of the line-length limitations, field values
    within message/http are allowed to use line folding (obs-fold), as
    described in Section 5.2, to convey the field value over multiple
    lines.  A recipient of message/http data MUST replace any obsolete
@@ -1685,7 +1648,7 @@
          "1.1").  If not present, the version can be determined from the
          first line of the body.
 
-      msgtype:  The message type - "request" or "response".  If not
+      msgtype:  The message type -- "request" or "response".  If not
          present, the type can be determined from the first line of the
          body.
 
@@ -1696,7 +1659,7 @@
 
    Interoperability considerations:  N/A
 
-   Published specification:  This specification (see Section 10.1).
+   Published specification:  RFC 9112 (see Section 10.1).
 
    Applications that use this media type:  N/A
 
@@ -1710,8 +1673,8 @@
 
                             Macintosh file type code(s):  N/A
 
-   Person and email address to contact for further information:  See Aut
-      hors' Addresses section.
+   Person and email address to contact for further information:
+      See Authors' Addresses section.
 
    Intended usage:  COMMON
 
@@ -1738,7 +1701,7 @@
          "1.1").  If not present, the version can be determined from the
          first line of the body.
 
-      msgtype:  The message type - "request" or "response".  If not
+      msgtype:  The message type -- "request" or "response".  If not
          present, the type can be determined from the first line of the
          body.
 
@@ -1750,7 +1713,7 @@
 
    Interoperability considerations:  N/A
 
-   Published specification:  This specification (see Section 10.2).
+   Published specification:  RFC 9112 (see Section 10.2).
 
    Applications that use this media type:  N/A
 
@@ -1764,8 +1727,8 @@
 
                             Macintosh file type code(s):  N/A
 
-   Person and email address to contact for further information:  See Aut
-      hors' Addresses section.
+   Person and email address to contact for further information:
+      See Authors' Addresses section.
 
    Intended usage:  COMMON
 
@@ -1784,7 +1747,7 @@
 
 11.1.  Response Splitting
 
-   Response splitting (a.k.a., CRLF injection) is a common technique,
+   Response splitting (a.k.a. CRLF injection) is a common technique,
    used in various attacks on Web usage, that exploits the line-based
    nature of HTTP message framing and the ordered association of
    requests to responses on persistent connections [Klein].  This
@@ -1796,7 +1759,7 @@
    within some parameter of the request that is later decoded and echoed
    within any of the response header fields of the response.  If the
    decoded data is crafted to look like the response has ended and a
-   subsequent response has begun, the response has been split and the
+   subsequent response has begun, the response has been split, and the
    content within the apparent second response is controlled by the
    attacker.  The attacker can then make any other request on the same
    persistent connection and trick the recipients (including
@@ -1814,7 +1777,7 @@
    A common defense against response splitting is to filter requests for
    data that looks like encoded CR and LF (e.g., "%0D" and "%0A").
    However, that assumes the application server is only performing URI
-   decoding, rather than more obscure data transformations like charset
+   decoding rather than more obscure data transformations like charset
    transcoding, XML entity translation, base64 decoding, sprintf
    reformatting, etc.  A more effective mitigation is to prevent
    anything other than the server's core protocol libraries from sending
@@ -1825,12 +1788,11 @@
 
 11.2.  Request Smuggling
 
-   Request smuggling ([Linhart]) is a technique that exploits
-   differences in protocol parsing among various recipients to hide
-   additional requests (which might otherwise be blocked or disabled by
-   policy) within an apparently harmless request.  Like response
-   splitting, request smuggling can lead to a variety of attacks on HTTP
-   usage.
+   Request smuggling [Linhart] is a technique that exploits differences
+   in protocol parsing among various recipients to hide additional
+   requests (which might otherwise be blocked or disabled by policy)
+   within an apparently harmless request.  Like response splitting,
+   request smuggling can lead to a variety of attacks on HTTP usage.
 
    This specification has introduced new requirements on request
    parsing, particularly with regard to message framing in Section 6.3,
@@ -1850,7 +1812,7 @@
 
    The mechanisms provided with the "https" scheme, such as
    authenticated encryption, provide protection against modification of
-   messages.  Care is needed however to ensure that connection closure
+   messages.  Care is needed, however, to ensure that connection closure
    cannot be used to truncate messages (see Section 9.8).  User agents
    might refuse to accept incomplete messages or treat them specially.
    For example, a browser being used to view medical history or drug
@@ -1884,70 +1846,67 @@
 12.  IANA Considerations
 
    The change controller for the following registrations is: "IETF
-   (iesg@ietf.org) - Internet Engineering Task Force".
+   (iesg@ietf.org) -- Internet Engineering Task Force".
 
 12.1.  Field Name Registration
 
-   First, introduce the new "Hypertext Transfer Protocol (HTTP) Field
-   Name Registry" at <https://www.iana.org/assignments/http-fields> as
-   described in Section 18.4 of [HTTP].
-
-   Then, please update the registry with the field names listed in the
-   table below:
-
-   +===================+===========+======+============+
-   | Field Name        | Status    | Ref. | Comments   |
-   +===================+===========+======+============+
-   | Close             | permanent | 9.6  | (reserved) |
-   +-------------------+-----------+------+------------+
-   | MIME-Version      | permanent | B.1  |            |
-   +-------------------+-----------+------+------------+
-   | Transfer-Encoding | permanent | 6.1  |            |
-   +-------------------+-----------+------+------------+
+   IANA has added the following field names to the "Hypertext Transfer
+   Protocol (HTTP) Field Name Registry" at
+   <https://www.iana.org/assignments/http-fields>, as described in
+   Section 18.4 of [HTTP].
+
+   +===================+==========+==============+============+
+   | Field Name        | Status   | Ref.         | Comments   |
+   +===================+==========+==============+============+
+   | Close             | standard | Section 9.6  | (reserved) |
+   +-------------------+----------+--------------+------------+
+   | MIME-Version      | standard | Appendix B.1 |            |
+   +-------------------+----------+--------------+------------+
+   | Transfer-Encoding | standard | Section 6.1  |            |
+   +-------------------+----------+--------------+------------+
 
-                          Table 1
+                             Table 1
 
 12.2.  Media Type Registration
 
-   Please update the "Media Types" registry at
+   IANA has updated the "Media Types" registry at
    <https://www.iana.org/assignments/media-types> with the registration
-   information in Section 10.1 and Section 10.2 for the media types
-   "message/http" and "application/http", respectively.
+   information in Sections 10.1 and 10.2 for the media types "message/
+   http" and "application/http", respectively.
 
 12.3.  Transfer Coding Registration
 
-   Please update the "HTTP Transfer Coding Registry" at
-   <https://www.iana.org/assignments/http-parameters/> with the
-   registration procedure of Section 7.3 and the content coding names
-   summarized in the table below.
-
-   +============+===============================+===========+
-   | Name       | Description                   | Reference |
-   +============+===============================+===========+
-   | chunked    | Transfer in a series of       | Section   |
-   |            | chunks                        | 7.1       |
-   +------------+-------------------------------+-----------+
-   | compress   | UNIX "compress" data format   | Section   |
-   |            | [Welch]                       | 7.2       |
-   +------------+-------------------------------+-----------+
-   | deflate    | "deflate" compressed data     | Section   |
-   |            | ([RFC1951]) inside the "zlib" | 7.2       |
-   |            | data format ([RFC1950])       |           |
-   +------------+-------------------------------+-----------+
-   | gzip       | GZIP file format [RFC1952]    | Section   |
-   |            |                               | 7.2       |
-   +------------+-------------------------------+-----------+
-   | trailers   | (reserved)                    | Section   |
-   |            |                               | 12.3      |
-   +------------+-------------------------------+-----------+
-   | x-compress | Deprecated (alias for         | Section   |
-   |            | compress)                     | 7.2       |
-   +------------+-------------------------------+-----------+
-   | x-gzip     | Deprecated (alias for gzip)   | Section   |
-   |            |                               | 7.2       |
-   +------------+-------------------------------+-----------+
+   IANA has updated the "HTTP Transfer Coding Registry" at
+   <https://www.iana.org/assignments/http-parameters/> with the content
+   coding names summarized in the table below, per the registration
+   procedure in Section 7.3.
+
+   +============+=========================================+===========+
+   | Name       | Description                             | Reference |
+   +============+=========================================+===========+
+   | chunked    | Transfer in a series of chunks          | Section   |
+   |            |                                         | 7.1       |
+   +------------+-----------------------------------------+-----------+
+   | compress   | UNIX "compress" data format [Welch]     | Section   |
+   |            |                                         | 7.2       |
+   +------------+-----------------------------------------+-----------+
+   | deflate    | "deflate" compressed data [RFC1951]     | Section   |
+   |            | inside the "zlib" data format [RFC1950] | 7.2       |
+   +------------+-----------------------------------------+-----------+
+   | gzip       | GZIP file format [RFC1952]              | Section   |
+   |            |                                         | 7.2       |
+   +------------+-----------------------------------------+-----------+
+   | trailers   | (reserved)                              | Section   |
+   |            |                                         | 12.3      |
+   +------------+-----------------------------------------+-----------+
+   | x-compress | Deprecated (alias for compress)         | Section   |
+   |            |                                         | 7.2       |
+   +------------+-----------------------------------------+-----------+
+   | x-gzip     | Deprecated (alias for gzip)             | Section   |
+   |            |                                         | 7.2       |
+   +------------+-----------------------------------------+-----------+
 
-                            Table 2
+                                 Table 2
 
       |  *Note:* the coding name "trailers" is reserved because its use
       |  would conflict with the keyword "trailers" in the TE header
@@ -1955,35 +1914,30 @@
 
 12.4.  ALPN Protocol ID Registration
 
-   Please update the "TLS Application-Layer Protocol Negotiation (ALPN)
-   Protocol IDs" registry at <https://www.iana.org/assignments/tls-
-   extensiontype-values/tls-extensiontype-values.xhtml> with the
-   registration below:
-
-        +==========+=============================+================+
-        | Protocol | Identification Sequence     | Reference      |
-        +==========+=============================+================+
-        | HTTP/1.1 | 0x68 0x74 0x74 0x70 0x2f    | (this          |
-        |          | 0x31 0x2e 0x31 ("http/1.1") | specification) |
-        +----------+-----------------------------+----------------+
+   IANA has updated the "TLS Application-Layer Protocol Negotiation
+   (ALPN) Protocol IDs" registry at <https://www.iana.org/assignments/
+   tls-extensiontype-values/> with the registration below:
+
+          +==========+=============================+===========+
+          | Protocol | Identification Sequence     | Reference |
+          +==========+=============================+===========+
+          | HTTP/1.1 | 0x68 0x74 0x74 0x70 0x2f    | RFC 9112  |
+          |          | 0x31 0x2e 0x31 ("http/1.1") |           |
+          +----------+-----------------------------+-----------+
 
-                                  Table 3
+                                 Table 3
 
 13.  References
 
 13.1.  Normative References
 
    [CACHING]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Caching", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-cache-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              cache-latest>.
+              Ed., "HTTP Caching", RFC 9111, DOI 10.17487/RFC9111,
+              December 2021, <https://www.rfc-editor.org/info/rfc9111>.
 
    [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Semantics", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-semantics-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              semantics-latest>.
+              Ed., "HTTP Semantics", RFC 9110, DOI 10.17487/RFC9110,
+              December 2021, <https://www.rfc-editor.org/info/rfc9110>.
 
    [RFC1950]  Deutsch, P. and J-L. Gailly, "ZLIB Compressed Data Format
               Specification version 3.3", RFC 1950,
@@ -2095,7 +2049,7 @@
 
 Appendix A.  Collected ABNF
 
-   In the collected ABNF below, list rules are expanded as per
+   In the collected ABNF below, list rules are expanded per
    Section 5.6.1 of [HTTP].
 
    BWS = <BWS, see [HTTP], Section 5.6.3>
@@ -2164,16 +2118,15 @@
 Appendix B.  Differences between HTTP and MIME
 
    HTTP/1.1 uses many of the constructs defined for the Internet Message
-   Format [RFC5322] and the Multipurpose Internet Mail Extensions (MIME)
+   Format [RFC5322] and Multipurpose Internet Mail Extensions (MIME)
    [RFC2045] to allow a message body to be transmitted in an open
    variety of representations and with extensible fields.  However, RFC
-   2045 is focused only on email; applications of HTTP have many
+   2045 is focused only on email, and applications of HTTP have many
    characteristics that differ from email; hence, HTTP has features that
    differ from MIME.  These differences were carefully chosen to
-   optimize performance over binary connections, to allow greater
-   freedom in the use of new media types, to make date comparisons
-   easier, and to acknowledge the practice of some early HTTP servers
-   and clients.
+   optimize performance over binary connections to allow greater freedom
+   in the use of new media types, to make date comparisons easier, and
+   to acknowledge the practice of some early HTTP servers and clients.
 
    This appendix describes specific areas where HTTP differs from MIME.
    Proxies and gateways to and from strict MIME environments need to be
@@ -2194,17 +2147,17 @@
 
    MIME requires that an Internet mail body part be converted to
    canonical form prior to being transferred, as described in Section 4
-   of [RFC2049], and that content with a type of "text" represent line
-   breaks as CRLF, forbidding the use of CR or LF outside of line break
+   of [RFC2049], and that content with a type of "text" represents line
+   breaks as CRLF, forbidding the use of CR or LF outside of line-break
    sequences [RFC2046].  In contrast, HTTP does not care whether CRLF,
    bare CR, or bare LF are used to indicate a line break within content.
 
    A proxy or gateway from HTTP to a strict MIME environment ought to
-   translate all line breaks within text media types to the RFC 2049
-   canonical form of CRLF.  Note, however, this might be complicated by
-   the presence of a Content-Encoding and by the fact that HTTP allows
-   the use of some charsets that do not use octets 13 and 10 to
-   represent CR and LF, respectively.
+   translate all line breaks within text media types to the canonical
+   form of CRLF per [RFC2049].  However, note that this might be
+   complicated by the presence of a Content-Encoding and by the fact
+   that HTTP allows the use of some charsets that do not use octets 13
+   and 10 to represent CR and LF, respectively.
 
    Conversion will break any cryptographic checksums applied to the
    original content unless the original content is already in canonical
@@ -2216,20 +2169,20 @@
    HTTP/1.1 uses a restricted set of date formats (Section 5.6.7 of
    [HTTP]) to simplify the process of date comparison.  Proxies and
    gateways from other protocols ought to ensure that any Date header
-   field present in a message conforms to one of the HTTP/1.1 formats
-   and rewrite the date if necessary.
+   field present in a message conforms to one of the HTTP/1.1 formats;
+   otherwise, rewrite the date if necessary.
 
 B.4.  Conversion of Content-Encoding
 
-   MIME does not include any concept equivalent to HTTP/1.1's Content-
-   Encoding header field.  Since this acts as a modifier on the media
+   MIME does not include any concept equivalent to the Content-Encoding
+   header field of HTTP/1.1.  Since this acts as a modifier on the media
    type, proxies and gateways from HTTP to MIME-compliant protocols
    ought to either change the value of the Content-Type header field or
    decode the representation before forwarding the message.  (Some
    experimental applications of Content-Type for Internet mail have used
    a media-type parameter of ";conversions=<content-coding>" to perform
    a function equivalent to Content-Encoding.  However, this parameter
-   is not part of the MIME standards).
+   is not part of the MIME standards.)
 
 B.5.  Conversion of Content-Transfer-Encoding
 
@@ -2246,19 +2199,20 @@
    appropriate Content-Transfer-Encoding if doing so will improve the
    likelihood of safe transport over the destination protocol.
 
-B.6.  MHTML and Line Length Limitations
+B.6.  MHTML and Line-Length Limitations
 
-   HTTP implementations that share code with MHTML [RFC2557]
-   implementations need to be aware of MIME line length limitations.
-   Since HTTP does not have this limitation, HTTP does not fold long
-   lines.  MHTML messages being transported by HTTP follow all
-   conventions of MHTML, including line length limitations and folding,
-   canonicalization, etc., since HTTP transfers message-bodies without
-   modification and, aside from the "multipart/byteranges" type
-   (Section 14.6 of [HTTP]), does not interpret the content or any MIME
-   header lines that might be contained therein.
+   HTTP implementations that share code with MIME Encapsulation of
+   Aggregate Documents, such as HTML (MHTML) [RFC2557] implementations
+   need to be aware of MIME line-length limitations.  Since HTTP does
+   not have this limitation, HTTP does not fold long lines.  MHTML
+   messages being transported by HTTP follow all conventions of MHTML,
+   including line-length limitations and folding, canonicalization,
+   etc., since HTTP transfers message-bodies without modification and,
+   aside from the "multipart/byteranges" type (Section 14.6 of [HTTP]),
+   does not interpret the content or any MIME header lines that might be
+   contained therein.
 
-Appendix C.  Changes from previous RFCs
+Appendix C.  Changes from Previous RFCs
 
 C.1.  Changes from HTTP/0.9
 
@@ -2276,14 +2230,14 @@
 
    The requirements that clients and servers support the Host header
    field (Section 7.2 of [HTTP]), report an error if it is missing from
-   an HTTP/1.1 request, and accept absolute URIs (Section 3.2) are among
-   the most important changes defined by HTTP/1.1.
+   an HTTP/1.1 request, and accept absolute URIs (Section 3.2 of this
+   document) are among the most important changes defined by HTTP/1.1.
 
    Older HTTP/1.0 clients assumed a one-to-one relationship of IP
-   addresses and servers; there was no other established mechanism for
-   distinguishing the intended server of a request than the IP address
-   to which that request was directed.  The Host header field was
-   introduced during the development of HTTP/1.1 and, though it was
+   addresses and servers; there was no established mechanism for
+   distinguishing the intended server of a request other than the IP
+   address to which that request was directed.  The Host header field
+   was introduced during the development of HTTP/1.1 and, though it was
    quickly implemented by most HTTP/1.0 browsers, additional
    requirements were placed on all HTTP/1.1 requests in order to ensure
    complete adoption.  At the time of this writing, most HTTP-based
@@ -2315,8 +2269,8 @@
    As a result, clients are encouraged not to send the Proxy-Connection
    header field in any requests.
 
-   Clients are also encouraged to consider the use of Connection: keep-
-   alive in requests carefully; while they can enable persistent
+   Clients are also encouraged to consider the use of "Connection: keep-
+   alive" in requests carefully; while they can enable persistent
    connections with HTTP/1.0 servers, clients using them will need to
    monitor the connection for "hung" requests (which indicate that the
    client ought to stop sending the header field), and this mechanism
@@ -2336,20 +2290,20 @@
    document has been reduced to just the messaging syntax and connection
    management requirements specific to HTTP/1.1.
 
-   Bare CRs have been prohibited outside of content.  (Section 2.2)
+   Bare CRs have been prohibited outside of content (Section 2.2).
 
    The ABNF definition of authority-form has changed from the more
    general authority component of a URI (in which port is optional) to
-   the specific host:port format that is required by CONNECT.
-   (Section 3.2.3)
+   the specific host:port format that is required by CONNECT
+   (Section 3.2.3).
 
-   Required recipients to avoid smuggling/splitting attacks when
-   processing an ambiguous message framing.  (Section 6.1)
+   Recipients are required to avoid smuggling/splitting attacks when
+   processing an ambiguous message framing (Section 6.1).
 
-   In the ABNF for chunked extensions, re-introduced (bad) whitespace
-   around ";" and "=".  Whitespace was removed in [RFC7230], but that
-   change was found to break existing implementations (see [Err4667]).
-   (Section 7.1.1)
+   In the ABNF for chunked extensions, (bad) whitespace around ";" and
+   "=" has been reintroduced.  Whitespace was removed in [RFC7230], but
+   that change was found to break existing implementations (see
+   [Err4667] and Section 7.1.1 of this document).
 
    Trailer field semantics now transcend the specifics of chunked
    encoding.  The decoding algorithm for chunked (Section 7.1.3) has
@@ -2359,342 +2313,16 @@
    definition permits and defines how to merge, and otherwise to discard
    the trailer fields instead of merging.  The trailer part is now
    called the trailer section to be more consistent with the header
-   section and more distinct from a body part.  (Section 7.1.2)
-
-   Disallowed transfer coding parameters called "q" in order to avoid
-   conflicts with the use of ranks in the TE header field.
-   (Section 7.3)
-
-Appendix D.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-D.1.  Between RFC7230 and draft 00
-
-   The changes were purely editorial:
-
-   *  Change boilerplate and abstract to indicate the "draft" status,
-      and update references to ancestor specifications.
-
-   *  Adjust historical notes.
-
-   *  Update links to sibling specifications.
-
-   *  Replace sections listing changes from RFC 2616 by new empty
-      sections referring to RFC 723x.
-
-   *  Remove acknowledgements specific to RFC 723x.
-
-   *  Move "Acknowledgements" to the very end and make them unnumbered.
-
-D.2.  Since draft-ietf-httpbis-messaging-00
-
-   The changes in this draft are editorial, with respect to HTTP as a
-   whole, to move all core HTTP semantics into [HTTP]:
-
-   *  Moved introduction, architecture, conformance, and ABNF extensions
-      from RFC 7230 (Messaging) to semantics [HTTP].
-
-   *  Moved discussion of MIME differences from RFC 7231 (Semantics) to
-      Appendix B since they mostly cover transforming 1.1 messages.
-
-   *  Moved all extensibility tips, registration procedures, and
-      registry tables from the IANA considerations to normative
-      sections, reducing the IANA considerations to just instructions
-      that will be removed prior to publication as an RFC.
-
-D.3.  Since draft-ietf-httpbis-messaging-01
-
-   *  Cite RFC 8126 instead of RFC 5226 (<https://github.com/httpwg/
-      http-core/issues/75>)
-
-   *  Resolved erratum 4779, no change needed here
-      (<https://github.com/httpwg/http-core/issues/87>,
-      <https://www.rfc-editor.org/errata/eid4779>)
-
-   *  In Section 7, fixed prose claiming transfer parameters allow bare
-      names (<https://github.com/httpwg/http-core/issues/88>,
-      <https://www.rfc-editor.org/errata/eid4839>)
-
-   *  Resolved erratum 4225, no change needed here
-      (<https://github.com/httpwg/http-core/issues/90>,
-      <https://www.rfc-editor.org/errata/eid4225>)
-
-   *  Replace "response code" with "response status code"
-      (<https://github.com/httpwg/http-core/issues/94>,
-      <https://www.rfc-editor.org/errata/eid4050>)
-
-   *  In Section 9.3, clarify statement about HTTP/1.0 keep-alive
-      (<https://github.com/httpwg/http-core/issues/96>,
-      <https://www.rfc-editor.org/errata/eid4205>)
-
-   *  In Section 7.1.1, re-introduce (bad) whitespace around ";" and "="
-      (<https://github.com/httpwg/http-core/issues/101>,
-      <https://www.rfc-editor.org/errata/eid4667>, <https://www.rfc-
-      editor.org/errata/eid4825>)
-
-   *  In Section 7.3, state that transfer codings should not use
-      parameters named "q" (<https://github.com/httpwg/http-core/
-      issues/15>, <https://www.rfc-editor.org/errata/eid4683>)
-
-   *  In Section 7, mark coding name "trailers" as reserved in the IANA
-      registry (<https://github.com/httpwg/http-core/issues/108>)
-
-D.4.  Since draft-ietf-httpbis-messaging-02
-
-   *  In Section 4, explain why the reason phrase should be ignored by
-      clients (<https://github.com/httpwg/http-core/issues/60>).
-
-   *  Add Section 9.2 to explain how request/response correlation is
-      performed (<https://github.com/httpwg/http-core/issues/145>)
-
-D.5.  Since draft-ietf-httpbis-messaging-03
-
-   *  In Section 9.2, caution against treating data on a connection as
-      part of a not-yet-issued request (<https://github.com/httpwg/http-
-      core/issues/26>)
-
-   *  In Section 7, remove the predefined codings from the ABNF and make
-      it generic instead (<https://github.com/httpwg/http-core/
-      issues/66>)
-
-   *  Use RFC 7405 ABNF notation for case-sensitive string constants
-      (<https://github.com/httpwg/http-core/issues/133>)
-
-D.6.  Since draft-ietf-httpbis-messaging-04
-
-   *  In Section 7.8 of [HTTP], clarify that protocol-name is to be
-      matched case-insensitively (<https://github.com/httpwg/http-core/
-      issues/8>)
-
-   *  In Section 5.2, add leading optional whitespace to obs-fold ABNF
-      (<https://github.com/httpwg/http-core/issues/19>,
-      <https://www.rfc-editor.org/errata/eid4189>)
-
-   *  In Section 4, add clarifications about empty reason phrases
-      (<https://github.com/httpwg/http-core/issues/197>)
-
-   *  Move discussion of retries from Section 9.3.1 into [HTTP]
-      (<https://github.com/httpwg/http-core/issues/230>)
-
-D.7.  Since draft-ietf-httpbis-messaging-05
-
-   *  In Section 7.1.2, the trailer part has been renamed the trailer
-      section (for consistency with the header section) and trailers are
-      no longer merged as header fields by default, but rather can be
-      discarded, kept separate from header fields, or merged with header
-      fields only if understood and defined as being mergeable
-      (<https://github.com/httpwg/http-core/issues/16>)
-
-   *  In Section 2.1 and related Sections, move the trailing CRLF from
-      the line grammars into the message format
-      (<https://github.com/httpwg/http-core/issues/62>)
-
-   *  Moved Section 2.3 down (<https://github.com/httpwg/http-core/
-      issues/68>)
-
-   *  In Section 7.8 of [HTTP], use 'websocket' instead of 'HTTP/2.0' in
-      examples (<https://github.com/httpwg/http-core/issues/112>)
-
-   *  Move version non-specific text from Section 6 into semantics as
-      "payload" (<https://github.com/httpwg/http-core/issues/159>)
-
-   *  In Section 9.8, add text from RFC 2818
-      (<https://github.com/httpwg/http-core/issues/236>)
-
-D.8.  Since draft-ietf-httpbis-messaging-06
-
-   *  In Section 12.4, update the ALPN protocol ID for HTTP/1.1
-      (<https://github.com/httpwg/http-core/issues/49>)
-
-   *  In Section 5, align with updates to field terminology in semantics
-      (<https://github.com/httpwg/http-core/issues/111>)
-
-   *  In Section 7.6.1 of [HTTP], clarify that new connection options
-      indeed need to be registered (<https://github.com/httpwg/http-
-      core/issues/285>)
-
-   *  In Section 1.1, reference RFC 8174 as well
-      (<https://github.com/httpwg/http-core/issues/303>)
-
-D.9.  Since draft-ietf-httpbis-messaging-07
-
-   *  Move TE: trailers into [HTTP] (<https://github.com/httpwg/http-
-      core/issues/18>)
-
-   *  In Section 6.3, adjust requirements for handling multiple content-
-      length values (<https://github.com/httpwg/http-core/issues/59>)
-
-   *  Throughout, replace "effective request URI" with "target URI"
-      (<https://github.com/httpwg/http-core/issues/259>)
-
-   *  In Section 6.1, don't claim Transfer-Encoding is supported by
-      HTTP/2 or later (<https://github.com/httpwg/http-core/issues/297>)
-
-D.10.  Since draft-ietf-httpbis-messaging-08
-
-   *  In Section 2.2, disallow bare CRs (<https://github.com/httpwg/
-      http-core/issues/31>)
-
-   *  Appendix A now uses the sender variant of the "#" list expansion
-      (<https://github.com/httpwg/http-core/issues/192>)
-
-   *  In Section 5, adjust IANA "Close" entry for new registry format
-      (<https://github.com/httpwg/http-core/issues/273>)
-
-D.11.  Since draft-ietf-httpbis-messaging-09
-
-   *  Switch to xml2rfc v3 mode for draft generation
-      (<https://github.com/httpwg/http-core/issues/394>)
-
-D.12.  Since draft-ietf-httpbis-messaging-10
-
-   *  In Section 6.3, note that TCP half-close does not delimit a
-      request; talk about corresponding server-side behaviour in
-      Section 9.6 (<https://github.com/httpwg/http-core/issues/22>)
-
-   *  Moved requirements specific to HTTP/1.1 from [HTTP] into
-      Section 3.2 (<https://github.com/httpwg/http-core/issues/182>)
-
-   *  In Section 6.1 (Transfer-Encoding), adjust ABNF to allow empty
-      lists (<https://github.com/httpwg/http-core/issues/210>)
-
-   *  In Section 9.7, add text from RFC 2818
-      (<https://github.com/httpwg/http-core/issues/236>)
-
-   *  Moved definitions of "TE" and "Upgrade" into [HTTP]
-      (<https://github.com/httpwg/http-core/issues/392>)
-
-   *  Moved definition of "Connection" into [HTTP]
-      (<https://github.com/httpwg/http-core/issues/407>)
-
-D.13.  Since draft-ietf-httpbis-messaging-11
-
-   *  Move IANA Upgrade Token Registry instructions to [HTTP]
-      (<https://github.com/httpwg/http-core/issues/450>)
-
-D.14.  Since draft-ietf-httpbis-messaging-12
-
-   *  Moved content of history appendix to Semantics
-      (<https://github.com/httpwg/http-core/issues/451>)
-
-   *  Moved note about "close" being reserved as field name to
-      Section 9.3 (<https://github.com/httpwg/http-core/issues/500>)
-
-   *  Moved table of transfer codings into Section 12.3
-      (<https://github.com/httpwg/http-core/issues/506>)
-
-   *  In Section 13.2, updated the URI for the [Linhart] paper
-      (<https://github.com/httpwg/http-core/issues/517>)
-
-   *  Changed document title to just "HTTP/1.1"
-      (<https://github.com/httpwg/http-core/issues/524>)
-
-   *  In Section 7, moved transfer-coding ABNF to Section 10.1.4 of
-      [HTTP] (<https://github.com/httpwg/http-core/issues/531>)
-
-   *  Changed to using "payload data" when defining requirements about
-      the data being conveyed within a message, instead of the terms
-      "payload body" or "response body" or "representation body", since
-      they often get confused with the HTTP/1.1 message body (which
-      includes transfer coding) (<https://github.com/httpwg/http-core/
-      issues/553>)
-
-D.15.  Since draft-ietf-httpbis-messaging-13
-
-   *  In Section 6.3, clarify that a message needs to be checked for
-      both Content-Length and Transfer-Encoding, before processing
-      Transfer-Encoding, and that ought to be treated as an error, but
-      an intermediary can choose to forward the message downstream after
-      removing the Content-Length and processing the Transfer-Encoding
-      (<https://github.com/httpwg/http-core/issues/617>)
-
-   *  Changed to using "content" instead of "payload" or "payload data"
-      to avoid confusion with the payload of version-specific messaging
-      frames (<https://github.com/httpwg/http-core/issues/654>)
-
-D.16.  Since draft-ietf-httpbis-messaging-14
-
-   *  In Section 9.6, define the close connection option, since its
-      definition was removed from the Connection header field for being
-      specific to 1.1 (<https://github.com/httpwg/http-core/issues/678>)
-
-   *  In Section 3.3, clarify how the target URI is reconstructed when
-      the request-target is not in absolute-form and highlight risk in
-      selecting a default host (<https://github.com/httpwg/http-core/
-      issues/722>)
-
-   *  In Section 7.1, clarify large chunk handling issues
-      (<https://github.com/httpwg/http-core/issues/749>)
-
-   *  In Section 2.2, explicitly close the connection after sending a
-      400 (<https://github.com/httpwg/http-core/issues/750>)
-
-   *  In Section 2.3, refine version requirements for intermediaries
-      (<https://github.com/httpwg/http-core/issues/751>)
-
-   *  In Section 7.1.3, don't remove the Trailer header field
-      (<https://github.com/httpwg/http-core/issues/793>)
-
-   *  In Section 3.2.3, changed the ABNF definition of authority-form
-      from the authority component (in which port is optional) to the
-      host:port format that has always been required by CONNECT
-      (<https://github.com/httpwg/http-core/issues/806>)
-
-D.17.  Since draft-ietf-httpbis-messaging-15
-
-   *  None.
-
-D.18.  Since draft-ietf-httpbis-messaging-16
-
-   This draft addresses mostly editorial issues raised during or past
-   IETF Last Call; see <https://github.com/httpwg/http-core/
-   issues?q=label%3Ah1-messaging+created%3A%3E2021-05-26> for a summary.
-
-   Furthermore:
-
-   *  In Section 6.1, require recipients to avoid smuggling/splitting
-      attacks when processing an ambiguous message framing
-      (<https://github.com/httpwg/http-core/issues/879>)
-
-D.19.  Since draft-ietf-httpbis-messaging-17
-
-   *  In Section 4, rephrase text about status code definitions in
-      [HTTP] (<https://github.com/httpwg/http-core/issues/915>)
-
-   *  In Section 9.2, clarify how to match responses to requests
-      (<https://github.com/httpwg/http-core/issues/915>)
-
-   *  Made reference to [RFC5322] normative, as it is referenced from
-      the ABNF (for "From" header field) (<https://github.com/httpwg/
-      http-core/issues/915>)
-
-   *  In Section 5.2, include text about message/http that previously
-      was in [HTTP] (<https://github.com/httpwg/http-core/issues/923>)
-
-   *  Throughout, disambiguate "selected representation" and "selected
-      response" (now "chosen response") (<https://github.com/httpwg/
-      http-core/issues/958>)
-
-D.20.  Since draft-ietf-httpbis-messaging-18
-
-   *  Improve a few crossrefs into [HTTP] (<https://github.com/httpwg/
-      http-core/issues/966>)
-
-   *  In Section 7.1.2, improve readability of formerly overlong
-      sentence (<https://github.com/httpwg/http-core/issues/966>)
-
-   *  Slightly rephrase Section 9.8 (<https://github.com/httpwg/http-
-      core/pull/972>)
-
-D.21.  Since draft-ietf-httpbis-messaging-19
+   section and more distinct from a body part (Section 7.1.2).
 
-   *  In Section 12.1, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
+   Transfer coding parameters called "q" are disallowed in order to
+   avoid conflicts with the use of ranks in the TE header field
+   (Section 7.3).
 
 Acknowledgements
 
-   See Appendix "Acknowledgements" of [HTTP].
+   See the "Acknowledgements" section in [HTTP], which applies to this
+   document.
 
 Index
 
