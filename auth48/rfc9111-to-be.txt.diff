--- draft-ietf-httpbis-cache-latest.txt	2022-01-06 13:47:17.565360400 +0100
+++ rfc9111-to-be.txt	2022-01-06 13:11:20.943800100 +0100
@@ -2,17 +2,16 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 7234 (if approved)                         M. Nottingham, Ed.
-Intended status: Standards Track                                  Fastly
-Expires: 10 July 2022                                    J. Reschke, Ed.
-                                                              greenbytes
-                                                          6 January 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9111                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 7234                                                   Fastly
+Category: Standards Track                                J. Reschke, Ed.
+ISSN: 2070-1721                                               greenbytes
+                                                            January 2022
 
 
                               HTTP Caching
-                    draft-ietf-httpbis-cache-latest
 
 Abstract
 
@@ -24,36 +23,19 @@
 
    This document obsoletes RFC 7234.
 
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix C.21.
-
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
-
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
+   This is an Internet Standards Track document.
 
-   This Internet-Draft will expire on 10 July 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9111.
 
 Copyright Notice
 
@@ -61,13 +43,14 @@
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -112,7 +95,7 @@
    5.  Field Definitions
      5.1.  Age
      5.2.  Cache-Control
-       5.2.1.  Request Cache-Control Directives
+       5.2.1.  Request Directives
          5.2.1.1.  max-age
          5.2.1.2.  max-stale
          5.2.1.3.  min-fresh
@@ -120,7 +103,7 @@
          5.2.1.5.  no-store
          5.2.1.6.  no-transform
          5.2.1.7.  only-if-cached
-       5.2.2.  Response Cache-Control Directives
+       5.2.2.  Response Directives
          5.2.2.1.  max-age
          5.2.2.2.  must-revalidate
          5.2.2.3.  must-understand
@@ -131,7 +114,7 @@
          5.2.2.8.  proxy-revalidate
          5.2.2.9.  public
          5.2.2.10. s-maxage
-       5.2.3.  Cache Control Extensions
+       5.2.3.  Extension Directives
        5.2.4.  Cache Directive Registry
      5.3.  Expires
      5.4.  Pragma
@@ -150,28 +133,6 @@
      9.2.  Informative References
    Appendix A.  Collected ABNF
    Appendix B.  Changes from RFC 7234
-   Appendix C.  Change Log
-     C.1.  Between RFC7234 and draft 00
-     C.2.  Since draft-ietf-httpbis-cache-00
-     C.3.  Since draft-ietf-httpbis-cache-01
-     C.4.  Since draft-ietf-httpbis-cache-02
-     C.5.  Since draft-ietf-httpbis-cache-03
-     C.6.  Since draft-ietf-httpbis-cache-04
-     C.7.  Since draft-ietf-httpbis-cache-05
-     C.8.  Since draft-ietf-httpbis-cache-06
-     C.9.  Since draft-ietf-httpbis-cache-07
-     C.10. Since draft-ietf-httpbis-cache-08
-     C.11. Since draft-ietf-httpbis-cache-09
-     C.12. Since draft-ietf-httpbis-cache-10
-     C.13. Since draft-ietf-httpbis-cache-11
-     C.14. Since draft-ietf-httpbis-cache-12
-     C.15. Since draft-ietf-httpbis-cache-13
-     C.16. Since draft-ietf-httpbis-cache-14
-     C.17. Since draft-ietf-httpbis-cache-15
-     C.18. Since draft-ietf-httpbis-cache-16
-     C.19. Since draft-ietf-httpbis-cache-17
-     C.20. Since draft-ietf-httpbis-cache-18
-     C.21. Since draft-ietf-httpbis-cache-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -216,8 +177,8 @@
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    Section 2 of [HTTP] defines conformance criteria and contains
@@ -231,7 +192,7 @@
 
    It also uses a list extension, defined in Section 5.6.1 of [HTTP],
    that allows for compact definition of comma-separated lists using a
-   '#' operator (similar to how the '*' operator indicates repetition).
+   "#" operator (similar to how the "*" operator indicates repetition).
    Appendix A shows the collected grammar with all list operators
    expanded to standard ABNF notation.
 
@@ -284,7 +245,7 @@
    reuse is the default behavior when no requirement or local
    configuration prevents it.  Therefore, HTTP cache requirements are
    focused on preventing a cache from either storing a non-reusable
-   response or reusing a stored response inappropriately rather than
+   response or reusing a stored response inappropriately, rather than
    mandating that caches always store and reuse particular responses.
 
    The _cache key_ is the information a cache uses to choose a response
@@ -343,27 +304,27 @@
       response directive is present that explicitly allows shared
       caching (see Section 3.5); and
 
-   *  the response contains at least one of:
+   *  the response contains at least one of the following:
 
-      -  a public response directive (see Section 5.2.2.9);
+      -  a "public" response directive (see Section 5.2.2.9);
 
-      -  a private response directive, if the cache is not shared (see
+      -  a "private" response directive, if the cache is not shared (see
          Section 5.2.2.7);
 
       -  an Expires header field (see Section 5.3);
 
-      -  a max-age response directive (see Section 5.2.2.1);
+      -  a "max-age" response directive (see Section 5.2.2.1);
 
-      -  if the cache is shared: an s-maxage response directive (see
+      -  if the cache is shared: an "s-maxage" response directive (see
          Section 5.2.2.10);
 
-      -  a Cache Control Extension that allows it to be cached (see
+      -  a Cache-Control extension that allows it to be cached (see
          Section 5.2.3); or
 
       -  a status code that is defined as heuristically cacheable (see
          Section 4.2.2).
 
-   Note that a cache-control extension can override any of the
+   Note that a Cache-Control extension can override any of the
    requirements listed; see Section 5.2.3.
 
    In this context, a cache has "understood" a request method or a
@@ -377,8 +338,8 @@
 
 3.1.  Storing Header and Trailer Fields
 
-   Caches MUST include all received response header fields - including
-   unrecognised ones - when storing a response; this assures that new
+   Caches MUST include all received response header fields -- including
+   unrecognized ones -- when storing a response; this assures that new
    HTTP header fields can be successfully deployed.  However, the
    following exceptions are made:
 
@@ -391,8 +352,8 @@
       forwarding the message, and this MAY be implemented by doing so
       before storage; see Section 7.6.1 of [HTTP] for some examples.
 
-   *  The no-cache (Section 5.2.2.4) and private (Section 5.2.2.7) cache
-      directives can have arguments that prevent storage of header
+   *  The "no-cache" (Section 5.2.2.4) and private (Section 5.2.2.7)
+      cache directives can have arguments that prevent storage of header
       fields by all caches and shared caches, respectively.
 
    *  Header fields that are specific to the proxy that a cache uses
@@ -410,7 +371,7 @@
 
    Caches are required to update a stored response's header fields from
    another (typically newer) response in several situations; for
-   example, see Section 3.4, Section 4.3.4 and Section 4.3.5.
+   example, see Sections 3.4, 4.3.4, and 4.3.5.
 
    When doing so, the cache MUST add each header field in the provided
    response to the stored response, replacing field values that are
@@ -445,7 +406,7 @@
    invalid.
 
    Furthermore, some fields are automatically processed and removed by
-   the HTTP implementation; for example, the Content-Range header field.
+   the HTTP implementation, such as the Content-Range header field.
    Implementations MAY automatically omit such header fields from
    updates, even when the processing does not actually occur.
 
@@ -457,7 +418,7 @@
 
    If the request method is GET, the response status code is 200 (OK),
    and the entire response header section has been received, a cache MAY
-   store a response body that is not complete (Section 3.4 of [HTTP]) if
+   store a response body that is not complete (Section 6.1 of [HTTP]) if
    the stored response is recorded as being incomplete.  Likewise, a 206
    (Partial Content) response MAY be stored as if it were an incomplete
    200 (OK) response.  However, a cache MUST NOT store incomplete or
@@ -500,15 +461,15 @@
    directive for that response.
 
    In this specification, the following response directives have such an
-   effect: must-revalidate (Section 5.2.2.2), public (Section 5.2.2.9),
-   and s-maxage (Section 5.2.2.10).
+   effect: "must-revalidate" (Section 5.2.2.2), public
+   (Section 5.2.2.9), and s-maxage (Section 5.2.2.10).
 
 4.  Constructing Responses from Caches
 
    When presented with a request, a cache MUST NOT reuse a stored
    response unless:
 
-   *  The presented target URI (Section 7.1 of [HTTP]) and that of the
+   *  the presented target URI (Section 7.1 of [HTTP]) and that of the
       stored response match, and
 
    *  the request method associated with the stored response allows it
@@ -521,7 +482,7 @@
       (Section 5.2.2.4), unless it is successfully validated
       (Section 4.3), and
 
-   *  the stored response is either:
+   *  the stored response is one of the following:
 
       -  fresh (see Section 4.2), or
 
@@ -529,7 +490,7 @@
 
       -  successfully validated (see Section 4.3).
 
-   Note that a cache-control extension can override any of the
+   Note that a Cache-Control extension can override any of the
    requirements listed; see Section 5.2.3.
 
    When a stored response is used to satisfy a request without
@@ -545,15 +506,15 @@
    Also, note that unsafe requests might invalidate already-stored
    responses; see Section 4.4.
 
-   A response that is stored or storable can be used to satisfy multiple
-   requests, provided that it is allowed to reuse that response for the
-   requests in question.  This enables caches to _collapse requests_ -
-   or combine multiple incoming requests into a single forward request
-   upon a cache miss - thereby reducing load on the origin server and
-   network.  However, note that if the response returned is not able to
-   be used for some or all of the collapsed requests, additional latency
-   might be introduced, because they will need to be forwarded to be
-   satisfied.
+   A cache can use a response that is stored or storable to satisfy
+   multiple requests, provided that it is allowed to reuse that response
+   for the requests in question.  This enables a cache to _collapse
+   requests_ -- or combine multiple incoming requests into a single
+   forward request upon a cache miss -- thereby reducing load on the
+   origin server and network.  Note, however, that if the cache cannot
+   use the returned response for some or all of the collapsed requests,
+   it will need to forward the requests in order to satisfy them,
+   potentially introducing additional latency.
 
    When more than one suitable response is stored, a cache MUST use the
    most recent one (as determined by the Date header field).  It can
@@ -575,7 +536,7 @@
 
    The header fields from two requests are defined to match if and only
    if those in the first request can be transformed to those in the
-   second request by applying any of:
+   second request by applying any of the following:
 
    *  adding or removing whitespace, where allowed in the header field's
       syntax
@@ -663,7 +624,7 @@
    freshness_lifetime is defined in Section 4.2.1; current_age is
    defined in Section 4.2.3.
 
-   Clients can send the max-age or min-fresh request directives
+   Clients can send the max-age or "min-fresh" request directives
    (Section 5.2.1) to suggest limits on the freshness calculations for
    the corresponding response.  However, caches are not required to
    honor them.
@@ -692,7 +653,8 @@
 4.2.1.  Calculating Freshness Lifetime
 
    A cache can calculate the freshness lifetime (denoted as
-   freshness_lifetime) of a response by using the first match of:
+   freshness_lifetime) of a response by using the first match as
+   follows:
 
    *  If the cache is shared and the s-maxage response directive
       (Section 5.2.2.10) is present, use its value, or
@@ -729,16 +691,15 @@
    is not specified, employing algorithms that use other field values
    (such as the Last-Modified time) to estimate a plausible expiration
    time.  This specification does not provide specific algorithms, but
-   does impose worst-case constraints on their results.
+   it does impose worst-case constraints on their results.
 
    A cache MUST NOT use heuristics to determine freshness when an
    explicit expiration time is present in the stored response.  Because
-   of the requirements in Section 3, this means that heuristics can only
-   be used on responses without explicit freshness whose status codes
-   are defined as _heuristically cacheable_ (e.g., see Section 15.1 of
-   [HTTP]), and those responses without explicit freshness that have
-   been marked as explicitly cacheable (e.g., with a "public" response
-   directive).
+   of the requirements in Section 3, heuristics can only be used on
+   responses without explicit freshness whose status codes are defined
+   as _heuristically cacheable_ (e.g., see Section 15.1 of [HTTP]) and
+   on responses without explicit freshness that have been marked as
+   explicitly cacheable (e.g., with a public response directive).
 
    Note that in previous specifications, heuristically cacheable
    response status codes were called "cacheable by default".
@@ -748,12 +709,13 @@
    that is no more than some fraction of the interval since that time.
    A typical setting of this fraction might be 10%.
 
-      |  *Note:* Section 13.9 of [RFC2616] prohibited caches from
-      |  calculating heuristic freshness for URIs with query components
-      |  (i.e., those containing '?').  In practice, this has not been
-      |  widely implemented.  Therefore, origin servers are encouraged
-      |  to send explicit directives (e.g., Cache-Control: no-cache) if
-      |  they wish to prevent caching.
+      |  *Note:* A previous version of the HTTP specification
+      |  (Section 13.9 of [RFC2616]) prohibited caches from calculating
+      |  heuristic freshness for URIs with query components (i.e., those
+      |  containing "?").  In practice, this has not been widely
+      |  implemented.  Therefore, origin servers are encouraged to send
+      |  explicit directives (e.g., Cache-Control: no-cache) if they
+      |  wish to prevent caching.
 
 4.2.3.  Calculating Age
 
@@ -767,23 +729,27 @@
 
    Age calculation uses the following data:
 
-   _age_value_  The term "age_value" denotes the value of the Age header
-      field (Section 5.1), in a form appropriate for arithmetic
-      operation; or 0, if not available.
-
-   _date_value_  The term "date_value" denotes the value of the Date
-      header field, in a form appropriate for arithmetic operations.
-      See Section 6.6.1 of [HTTP] for the definition of the Date header
-      field, and for requirements regarding responses without it.
-
-   _now_  The term "now" means the current value of this
-      implementation's clock (Section 5.6.7 of [HTTP]).
-
-   _request_time_  The value of the clock at the time of the request
-      that resulted in the stored response.
+   _age_value_
+      The term "age_value" denotes the value of the Age header field
+      (Section 5.1), in a form appropriate for arithmetic operation; or
+      0, if not available.
+
+   _date_value_
+      The term "date_value" denotes the value of the Date header field,
+      in a form appropriate for arithmetic operations.  See
+      Section 6.6.1 of [HTTP] for the definition of the Date header
+      field and for requirements regarding responses without it.
+
+   _now_
+      The term "now" means the current value of this implementation's
+      clock (Section 5.6.7 of [HTTP]).
+
+   _request_time_
+      The value of the clock at the time of the request that resulted in
+      the stored response.
 
-   _response_time_  The value of the clock at the time the response was
-      received.
+   _response_time_
+      The value of the clock at the time the response was received.
 
    A response's age can be calculated in two entirely independent ways:
 
@@ -823,15 +789,14 @@
    according to the calculations in Section 4.2.
 
    A cache MUST NOT generate a stale response if it is prohibited by an
-   explicit in-protocol directive (e.g., by a "no-cache" cache
-   directive, a "must-revalidate" cache-response-directive, or an
-   applicable "s-maxage" or "proxy-revalidate" cache-response-directive;
-   see Section 5.2.2).
+   explicit in-protocol directive (e.g., by a no-cache cache directive,
+   a must-revalidate response directive, or an applicable s-maxage or
+   "proxy-revalidate" response directive; see Section 5.2.2).
 
    A cache MUST NOT generate a stale response unless it is disconnected
    or doing so is explicitly permitted by the client or origin server
-   (e.g., by the max-stale request directive in Section 5.2.1, by
-   extension directives such as those defined in [RFC5861], or by
+   (e.g., by the "max-stale" request directive in Section 5.2.1,
+   extension directives such as those defined in [RFC5861], or
    configuration in accordance with an out-of-band contract).
 
 4.3.  Validation
@@ -839,27 +804,26 @@
    When a cache has one or more stored responses for a requested URI,
    but cannot serve any of them (e.g., because they are not fresh, or
    one cannot be chosen; see Section 4.1), it can use the conditional
-   request mechanism (Section 13.1 of [HTTP]) in the forwarded request
-   to give the next inbound server an opportunity to choose a valid
-   stored response to use, updating the stored metadata in the process,
-   or to replace the stored response(s) with a new response.  This
-   process is known as _validating_ or _revalidating_ the stored
-   response.
+   request mechanism (Section 13 of [HTTP]) in the forwarded request to
+   give the next inbound server an opportunity to choose a valid stored
+   response to use, updating the stored metadata in the process, or to
+   replace the stored response(s) with a new response.  This process is
+   known as _validating_ or _revalidating_ the stored response.
 
 4.3.1.  Sending a Validation Request
 
-   When generating a conditional request for validation, a cache starts
-   with either a request it is attempting to satisfy, or - if it is
-   initiating the request independently - it synthesises a request using
-   a stored response by copying the method, target URI, and request
-   header fields identified by the Vary header field (Section 4.1).
+   When generating a conditional request for validation, a cache either
+   starts with a request it is attempting to satisfy or -- if it is
+   initiating the request independently -- synthesizes a request using a
+   stored response by copying the method, target URI, and request header
+   fields identified by the Vary header field (Section 4.1).
 
    It then updates that request with one or more precondition header
-   fields.  These contain validator metadata sourced from stored
-   response(s) that have the same URI.  Typically, this will include
-   only those stored responses(s) that have the same cache key, although
-   a cache is allowed to validate a response that it cannot choose with
-   the request header fields it is sending (see Section 4.1).
+   fields.  These contain validator metadata sourced from a stored
+   response(s) that has the same URI.  Typically, this will include only
+   the stored response(s) that has the same cache key, although a cache
+   is allowed to validate a response that it cannot choose with the
+   request header fields it is sending (see Section 4.1).
 
    The precondition header fields are then compared by recipients to
    determine whether any stored response is equivalent to a current
@@ -973,14 +937,14 @@
       stored response can be updated and reused; see Section 4.3.4.
 
    *  A full response (i.e., one containing content) indicates that none
-      of the stored responses nominated in the conditional request is
+      of the stored responses nominated in the conditional request are
       suitable.  Instead, the cache MUST use the full response to
       satisfy the request.  The cache MAY store such a full response,
       subject to its constraints (see Section 3).
 
    *  However, if a cache receives a 5xx (Server Error) response while
       attempting to validate a response, it can either forward this
-      response to the requesting client, or act as if the server failed
+      response to the requesting client or act as if the server failed
       to respond.  In the latter case, the cache can send a previously
       stored response, subject to its constraints on doing so (see
       Section 4.2.4), or retry the validation request.
@@ -992,20 +956,21 @@
    information provided, and then do so.
 
    The initial set of stored responses to update are those that could
-   have been chosen for that request - i.e., those that meet the
+   have been chosen for that request -- i.e., those that meet the
    requirements in Section 4, except the last requirement to be fresh,
-   able to be served stale or just validated.
+   served stale, or just validated.
 
-   Then, that initial set of stored response(s) is further filtered by
-   the first match of:
+   Then, that initial set of stored response is further filtered by the
+   first match of:
 
    *  If the new response contains one or more _strong validators_ (see
       Section 8.8.1 of [HTTP]), then each of those strong validators
-      identify a selected representation for update.  All the stored
+      identifies a selected representation for update.  All the stored
       responses in the initial set with one of those same strong
       validators are identified for update.  If none of the initial set
-      contain at least one of the same strong validators, then the cache
-      MUST NOT use the new response to update any stored responses.
+      contains at least one of the same strong validators, then the
+      cache MUST NOT use the new response to update any stored
+      responses.
 
    *  If the new response contains no strong validators but does contain
       one or more _weak validators_, and those validators correspond to
@@ -1073,7 +1038,7 @@
    attacks.
 
    _Invalidate_ means that the cache will either remove all stored
-   responses whose target URI matches the given URI or will mark them as
+   responses whose target URI matches the given URI or mark them as
    "invalid" and in need of a mandatory validation before they can be
    sent in response to a subsequent request.
 
@@ -1117,10 +1082,10 @@
 5.2.  Cache-Control
 
    The "Cache-Control" header field is used to list directives for
-   caches along the request/response chain.  Such cache directives are
-   unidirectional in that the presence of a directive in a request does
-   not imply that the same directive is present in the response, or to
-   be repeated in it.
+   caches along the request/response chain.  Cache directives are
+   unidirectional, in that the presence of a directive in a request does
+   not imply that the same directive is present or copied in the
+   response.
 
    See Section 5.2.3 for information about how Cache-Control directives
    defined elsewhere are handled.
@@ -1144,7 +1109,7 @@
    For the cache directives defined below, no argument is defined (nor
    allowed) unless stated otherwise.
 
-5.2.1.  Request Cache-Control Directives
+5.2.1.  Request Directives
 
    This section defines cache request directives.  They are advisory;
    caches MAY implement them, but are not required to.
@@ -1153,7 +1118,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-age" request directive indicates that the client prefers a
    response whose age is less than or equal to the specified number of
@@ -1168,7 +1133,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-stale" request directive indicates that the client will
    accept a response that has exceeded its freshness lifetime.  If a
@@ -1185,7 +1150,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "min-fresh" request directive indicates that the client prefers a
    response whose freshness lifetime is no less than its current age
@@ -1199,7 +1164,7 @@
 
 5.2.1.4.  no-cache
 
-   The "no-cache" request directive indicates that the client prefers
+   The "no-cache" request directive indicates that the client prefers a
    stored response not be used to satisfy the request without successful
    validation on the origin server.
 
@@ -1232,11 +1197,11 @@
 
    The "only-if-cached" request directive indicates that the client only
    wishes to obtain a stored response.  Caches that honor this request
-   directive SHOULD, upon receiving it, either respond using a stored
-   response consistent with the other constraints of the request, or
-   respond with a 504 (Gateway Timeout) status code.
+   directive SHOULD, upon receiving it, respond with either a stored
+   response consistent with the other constraints of the request or a
+   504 (Gateway Timeout) status code.
 
-5.2.2.  Response Cache-Control Directives
+5.2.2.  Response Directives
 
    This section defines cache response directives.  A cache MUST obey
    the Cache-Control directives defined in this section.
@@ -1245,7 +1210,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-age" response directive indicates that the response is to be
    considered stale after its age is greater than the specified number
@@ -1285,17 +1250,17 @@
    response to a cache that understands and conforms to the requirements
    for that response's status code.
 
-   Responses containing "must-understand" SHOULD also contain the "no-
-   store" directive; caches that implement "must-understand" SHOULD
-   ignore the "no-store" directive in responses that contain both
-   directives and a status code that the cache understands and conforms
-   to any related caching requirements.
+   A response that contains the must-understand directive SHOULD also
+   contain the no-store directive.  When a cache that implements the
+   must-understand directive receives a response that includes it, the
+   cache SHOULD ignore the no-store directive if it understands and
+   implements the status code's caching requirements.
 
 5.2.2.4.  no-cache
 
    Argument syntax:
 
-      #field-name
+         #field-name
 
    The "no-cache" response directive, in its unqualified form (without
    an argument), indicates that the response MUST NOT be used to satisfy
@@ -1306,15 +1271,15 @@
    response to satisfy a request without contacting it, even by caches
    that have been configured to send stale responses.
 
-   The qualified form of no-cache response directive, with an argument
-   that lists one or more field names, indicates that a cache MAY use
-   the response to satisfy a subsequent request, subject to any other
-   restrictions on caching, if the listed header fields are excluded
-   from the subsequent response or the subsequent response has been
-   successfully revalidated with the origin server (updating or removing
-   those fields).  This allows an origin server to prevent the re-use of
-   certain header fields in a response, while still allowing caching of
-   the rest of the response.
+   The qualified form of the no-cache response directive, with an
+   argument that lists one or more field names, indicates that a cache
+   MAY use the response to satisfy a subsequent request, subject to any
+   other restrictions on caching, if the listed header fields are
+   excluded from the subsequent response or the subsequent response has
+   been successfully revalidated with the origin server (updating or
+   removing those fields).  This allows an origin server to prevent the
+   reuse of certain header fields in a response, while still allowing
+   caching of the rest of the response.
 
    The field names given are not limited to the set of header fields
    defined by this specification.  Field names are case-insensitive.
@@ -1325,14 +1290,14 @@
 
       |  *Note:* The qualified form of the directive is often handled by
       |  caches as if an unqualified no-cache directive was received;
-      |  i.e., the special handling for the qualified form is not widely
-      |  implemented.
+      |  that is, the special handling for the qualified form is not
+      |  widely implemented.
 
 5.2.2.5.  no-store
 
    The "no-store" response directive indicates that a cache MUST NOT
-   store any part of either the immediate request or response and MUST
-   NOT use the response to satisfy any other request.
+   store any part of either the immediate request or the response and
+   MUST NOT use the response to satisfy any other request.
 
    This directive applies to both private and shared caches.  "MUST NOT
    store" in this context means that the cache MUST NOT intentionally
@@ -1345,8 +1310,8 @@
    might not recognize or obey this directive, and communications
    networks might be vulnerable to eavesdropping.
 
-   Note that the "must-understand" cache directive overrides "no-store"
-   in certain circumstances; see Section 5.2.2.3.
+   Note that the must-understand cache directive overrides no-store in
+   certain circumstances; see Section 5.2.2.3.
 
 5.2.2.6.  no-transform
 
@@ -1358,14 +1323,14 @@
 
    Argument syntax:
 
-      #field-name
+         #field-name
 
    The unqualified "private" response directive indicates that a shared
    cache MUST NOT store the response (i.e., the response is intended for
    a single user).  It also indicates that a private cache MAY store the
-   response, subject the constraints defined in Section 3, even if the
-   response would not otherwise be heuristically cacheable by a private
-   cache.
+   response, subject to the constraints defined in Section 3, even if
+   the response would not otherwise be heuristically cacheable by a
+   private cache.
 
    If a qualified private response directive is present, with an
    argument that lists one or more field names, then only the listed
@@ -1385,8 +1350,8 @@
       |  the response can be stored; it cannot ensure the privacy of the
       |  message content.  Also, the qualified form of the directive is
       |  often handled by caches as if an unqualified private directive
-      |  was received; i.e., the special handling for the qualified form
-      |  is not widely implemented.
+      |  was received; that is, the special handling for the qualified
+      |  form is not widely implemented.
 
 5.2.2.8.  proxy-revalidate
 
@@ -1397,10 +1362,10 @@
    analogous to must-revalidate (Section 5.2.2.2), except that proxy-
    revalidate does not apply to private caches.
 
-   Note that "proxy-revalidate" on its own does not imply that a
-   response is cacheable.  For example, it might be combined with the
-   public directive (Section 5.2.2.9), allowing the response to be
-   cached while requiring only a shared cache to revalidate when stale.
+   Note that proxy-revalidate on its own does not imply that a response
+   is cacheable.  For example, it might be combined with the public
+   directive (Section 5.2.2.9), allowing the response to be cached while
+   requiring only a shared cache to revalidate when stale.
 
 5.2.2.9.  public
 
@@ -1421,19 +1386,19 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "s-maxage" response directive indicates that, for a shared cache,
    the maximum age specified by this directive overrides the maximum age
    specified by either the max-age directive or the Expires header
    field.
 
-   The s-maxage directive incorporates the proxy-revalidate
-   (Section 5.2.2.8) response directive's semantics for a shared cache.
-   A shared cache MUST NOT reuse a stale response with s-maxage to
-   satisfy another request until it has been successfully validated by
-   the origin, as defined by Section 4.3.  This directive also permits a
-   shared cache to reuse a response to a request containing an
+   The s-maxage directive incorporates the semantics of the
+   proxy-revalidate response directive (Section 5.2.2.8) for a shared
+   cache.  A shared cache MUST NOT reuse a stale response with s-maxage
+   to satisfy another request until it has been successfully validated
+   by the origin, as defined by Section 4.3.  This directive also
+   permits a shared cache to reuse a response to a request containing an
    Authorization header field, subject to the above requirements on
    maximum age and revalidation (Section 3.5).
 
@@ -1441,7 +1406,7 @@
    's-maxage=10' not 's-maxage="10"'.  A sender MUST NOT generate the
    quoted-string form.
 
-5.2.3.  Cache Control Extensions
+5.2.3.  Extension Directives
 
    The Cache-Control header field can be extended through the use of one
    or more extension cache directives.  A cache MUST ignore unrecognized
@@ -1457,13 +1422,13 @@
    understand the new directive will default to the behavior specified
    by the old directive, and those that understand the new directive
    will recognize it as modifying the requirements associated with the
-   old directive.  In this way, extensions to the existing cache-control
+   old directive.  In this way, extensions to the existing Cache-Control
    directives can be made without breaking deployed caches.
 
    For example, consider a hypothetical new response directive called
    "community" that acts as a modifier to the private directive: in
-   addition to private caches, any cache that is shared only by members
-   of the named community is allowed to cache the response.  An origin
+   addition to private caches, only a cache that is shared by members of
+   the named community is allowed to cache the response.  An origin
    server wishing to allow the UCI community to use an otherwise private
    response in their shared cache(s) could do so by including
 
@@ -1482,10 +1447,10 @@
       an argument is present,
 
    *  When the directive requires an argument, what it means when it is
-      missing,
+      missing, and
 
-   *  Whether the directive is specific to requests, responses, or able
-      to be used in either.
+   *  Whether the directive is specific to requests, specific to
+      responses, or able to be used in either.
 
 5.2.4.  Cache Directive Registry
 
@@ -1595,7 +1560,7 @@
    apparent to or easily controllable by the user, it is strongly
    encouraged to define its operation with respect to HTTP cache
    directives so as not to surprise authors who expect caching semantics
-   to be honoured.  For example, while it might be reasonable to define
+   to be honored.  For example, while it might be reasonable to define
    an application cache "above" HTTP that allows a response containing
    Cache-Control: no-store to be reused for requests that are directly
    related to the request that fetched it (such as those created during
@@ -1611,9 +1576,9 @@
    (Section 11 of [HTTP/1.1]) and "HTTP Semantics" (Section 17 of
    [HTTP]).
 
-   Caches expose an additional attack surface, since the contents of the
-   cache represent an attractive target for malicious exploitation.
-   Because cache contents persist after an HTTP request is complete, an
+   Caches expose an additional attack surface because the contents of
+   the cache represent an attractive target for malicious exploitation.
+   Since cache contents persist after an HTTP request is complete, an
    attack on the cache can reveal information long after a user believes
    that the information has been removed from the network.  Therefore,
    cache contents need to be protected as sensitive information.
@@ -1621,8 +1586,8 @@
    In particular, because private caches are restricted to a single
    user, they can be used to reconstruct a user's activity.  As a
    result, it is important for user agents to allow end users to control
-   them; for example, allowing stored responses to be removed for some
-   or all origin servers.
+   them, for example, by allowing stored responses to be removed for
+   some or all origin servers.
 
 7.1.  Cache Poisoning
 
@@ -1640,13 +1605,13 @@
 
 7.2.  Timing Attacks
 
-   Because one of the primary uses of a cache is to optimise
-   performance, its use can "leak" information about what resources have
-   been previously requested.
+   Because one of the primary uses of a cache is to optimize
+   performance, its use can "leak" information about which resources
+   have been previously requested.
 
    For example, if a user visits a site and their browser caches some of
    its responses and then navigates to a second site, that site can
-   attempt to load responses it knows exists on the first site.  If they
+   attempt to load responses it knows exist on the first site.  If they
    load quickly, it can be assumed that the user has visited that site,
    or even a specific page on it.
 
@@ -1657,16 +1622,16 @@
 
 7.3.  Caching of Sensitive Information
 
-   Implementation and deployment flaws (as well as misunderstanding of
-   cache operation) might lead to caching of sensitive information
-   (e.g., authentication credentials) that is thought to be private,
-   exposing it to unauthorized parties.
+   Implementation and deployment flaws (often led to by the
+   misunderstanding of cache operation) might lead to the caching of
+   sensitive information (e.g., authentication credentials) that is
+   thought to be private, exposing it to unauthorized parties.
 
    Note that the Set-Cookie response header field [COOKIE] does not
    inhibit caching; a cacheable response with a Set-Cookie header field
    can be (and often is) used to satisfy subsequent requests to caches.
-   Servers who wish to control caching of these responses are encouraged
-   to emit appropriate Cache-Control response header fields.
+   Servers that wish to control caching of these responses are
+   encouraged to emit appropriate Cache-Control response header fields.
 
 8.  IANA Considerations
 
@@ -1749,10 +1714,8 @@
 9.1.  Normative References
 
    [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Semantics", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-semantics-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              semantics-latest>.
+              Ed., "HTTP Semantics", RFC 9110, DOI 10.17487/RFC9110,
+              January 2022, <https://www.rfc-editor.org/info/rfc9110>.
 
    [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
               Requirement Levels", BCP 14, RFC 2119,
@@ -1779,10 +1742,8 @@
               <https://www.rfc-editor.org/info/rfc6265>.
 
    [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP/1.1", Work in Progress, Internet-Draft, draft-
-              ietf-httpbis-messaging-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              messaging-latest>.
+              Ed., "HTTP/1.1", RFC 9112, DOI 10.17487/RFC9112, January
+              2022, <https://www.rfc-editor.org/info/rfc9112>.
 
    [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
               Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
@@ -1832,360 +1793,43 @@
 Appendix B.  Changes from RFC 7234
 
    Handling of duplicate and conflicting cache directives has been
-   clarified.  (Section 4.2.1)
+   clarified (Section 4.2.1).
 
    Cache invalidation of the URIs in the Location and Content-Location
-   header fields is no longer required, but still allowed.
-   (Section 4.4)
+   header fields is no longer required but is still allowed
+   (Section 4.4).
 
    Cache invalidation of the URIs in the Location and Content-Location
    header fields is disallowed when the origin is different; previously,
-   it was the host.  (Section 4.4)
+   it was the host (Section 4.4).
 
    Handling invalid and multiple Age header field values has been
-   clarified.  (Section 5.1)
+   clarified (Section 5.1).
 
    Some cache directives defined by this specification now have stronger
    prohibitions against generating the quoted form of their values,
    since this has been found to create interoperability problems.
    Consumers of extension cache directives are no longer required to
    accept both token and quoted-string forms, but they still need to
-   parse them properly for unknown extensions.  (Section 5.2)
+   parse them properly for unknown extensions (Section 5.2).
 
-   The "public" and "private" cache directives were clarified, so that
-   they do not make responses reusable under any condition.
-   (Section 5.2.2)
+   The public and private cache directives were clarified, so that they
+   do not make responses reusable under any condition (Section 5.2.2).
 
-   The "must-understand" cache directive was introduced; caches are no
+   The must-understand cache directive was introduced; caches are no
    longer required to understand the semantics of new response status
-   codes unless it is present.  (Section 5.2.2.3)
+   codes unless it is present (Section 5.2.2.3).
 
    The Warning response header was obsoleted.  Much of the information
    supported by Warning could be gleaned by examining the response, and
-   the remaining warn-codes - although potentially useful - were
+   the remaining information -- although potentially useful -- was
    entirely advisory.  In practice, Warning was not added by caches or
-   intermediaries.  (Section 5.5)
-
-Appendix C.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-C.1.  Between RFC7234 and draft 00
-
-   The changes were purely editorial:
-
-   *  Change boilerplate and abstract to indicate the "draft" status,
-      and update references to ancestor specifications.
-
-   *  Remove version "1.1" from document title, indicating that this
-      specification applies to all HTTP versions.
-
-   *  Adjust historical notes.
-
-   *  Update links to sibling specifications.
-
-   *  Replace sections listing changes from RFC 2616 by new empty
-      sections referring to RFC 723x.
-
-   *  Remove acknowledgements specific to RFC 723x.
-
-   *  Move "Acknowledgements" to the very end and make them unnumbered.
-
-C.2.  Since draft-ietf-httpbis-cache-00
-
-   The changes are purely editorial:
-
-   *  Moved all extensibility tips, registration procedures, and
-      registry tables from the IANA considerations to normative
-      sections, reducing the IANA considerations to just instructions
-      that will be removed prior to publication as an RFC.
-
-C.3.  Since draft-ietf-httpbis-cache-01
-
-   *  Cite RFC 8126 instead of RFC 5226 (<https://github.com/httpwg/
-      http-core/issues/75>)
-
-   *  In Section 5.4, misleading statement about the relation between
-      Pragma and Cache-Control (<https://github.com/httpwg/http-core/
-      issues/92>, <https://www.rfc-editor.org/errata/eid4674>)
-
-C.4.  Since draft-ietf-httpbis-cache-02
-
-   *  In Section 3, explain that only final responses are cacheable
-      (<https://github.com/httpwg/http-core/issues/29>)
-
-   *  In Section 5.2.2, clarify what responses various directives apply
-      to (<https://github.com/httpwg/http-core/issues/52>)
-
-   *  In Section 4.3.1, clarify the source of validators in conditional
-      requests (<https://github.com/httpwg/http-core/issues/110>)
-
-   *  Revise Section 6 to apply to more than just History Lists
-      (<https://github.com/httpwg/http-core/issues/126>)
-
-   *  In Section 5.5, deprecated "Warning" header field
-      (<https://github.com/httpwg/http-core/issues/139>)
-
-   *  In Section 3.5, remove a spurious note
-      (<https://github.com/httpwg/http-core/issues/141>)
-
-C.5.  Since draft-ietf-httpbis-cache-03
-
-   *  In Section 2, define what a disconnected cache is
-      (<https://github.com/httpwg/http-core/issues/5>)
-
-   *  In Section 4, clarify language around how to select a response
-      when more than one matches (<https://github.com/httpwg/http-core/
-      issues/23>)
-
-   *  in Section 4.2.4, mention stale-while-revalidate and stale-if-
-      error (<https://github.com/httpwg/http-core/issues/122>)
-
-   *  Remove requirements around cache request directives
-      (<https://github.com/httpwg/http-core/issues/129>)
-
-   *  Deprecate Pragma (<https://github.com/httpwg/http-core/
-      issues/140>)
-
-   *  In Section 3.5 and Section 5.2.2, note effect of some directives
-      on authenticated requests (<https://github.com/httpwg/http-core/
-      issues/161>)
-
-C.6.  Since draft-ietf-httpbis-cache-04
-
-   *  In Section 5.2, remove the registrations for stale-if-error and
-      stale-while-revalidate which happened in RFC 7234
-      (<https://github.com/httpwg/http-core/issues/207>)
-
-C.7.  Since draft-ietf-httpbis-cache-05
-
-   *  In Section 3.3, clarify how weakly framed content is considered
-      for purposes of completeness (<https://github.com/httpwg/http-
-      core/issues/25>)
-
-   *  Throughout, describe Vary and cache key operations more clearly
-      (<https://github.com/httpwg/http-core/issues/28>)
-
-   *  In Section 3, remove concept of "cacheable methods" in favor of
-      prose (<https://github.com/httpwg/http-core/issues/54>,
-      <https://www.rfc-editor.org/errata/eid5300>)
-
-   *  Refactored Section 7, and added a section on timing attacks
-      (<https://github.com/httpwg/http-core/issues/233>)
-
-   *  Changed "cacheable by default" to "heuristically cacheable"
-      throughout (<https://github.com/httpwg/http-core/issues/242>)
-
-C.8.  Since draft-ietf-httpbis-cache-06
-
-   *  In Section 3 and Section 5.2.2.3, change response cacheability to
-      only require understanding the response status code if the must-
-      understand cache directive is present (<https://github.com/httpwg/
-      http-core/issues/120>)
-
-   *  Change requirements for handling different forms of cache
-      directives in Section 5.2 (<https://github.com/httpwg/http-core/
-      issues/128>)
-
-   *  Fix typo in Section 5.2.2.10 (<https://github.com/httpwg/http-
-      core/issues/264>)
-
-   *  In Section 5.2.2.9 and Section 5.2.2.7, clarify "private" and
-      "public" so that they do not override all other cache directives
-      (<https://github.com/httpwg/http-core/issues/268>)
-
-   *  In Section 3, distinguish between private with and without
-      qualifying headers (<https://github.com/httpwg/http-core/
-      issues/270>)
-
-   *  In Section 4.1, clarify that any "*" as a member of Vary will
-      disable caching (<https://github.com/httpwg/http-core/issues/286>)
-
-   *  In Section 1.1, reference RFC 8174 as well
-      (<https://github.com/httpwg/http-core/issues/303>)
-
-C.9.  Since draft-ietf-httpbis-cache-07
-
-   *  Throughout, replace "effective request URI", "request-target" and
-      similar with "target URI" (<https://github.com/httpwg/http-core/
-      issues/259>)
-
-   *  In Section 5.2.2.9 and Section 5.2.2.7, make it clear that these
-      directives do not ignore other requirements for caching
-      (<https://github.com/httpwg/http-core/issues/320>)
-
-   *  In Section 3.3, move definition of "complete" into semantics
-      (<https://github.com/httpwg/http-core/issues/334>)
-
-C.10.  Since draft-ietf-httpbis-cache-08
-
-   *  Appendix A now uses the sender variant of the "#" list expansion
-      (<https://github.com/httpwg/http-core/issues/192>)
-
-C.11.  Since draft-ietf-httpbis-cache-09
-
-   *  In Section 5.1, discuss handling of invalid and multiple Age
-      header field values (<https://github.com/httpwg/http-core/
-      issues/193>)
-
-   *  Switch to xml2rfc v3 mode for draft generation
-      (<https://github.com/httpwg/http-core/issues/394>)
-
-C.12.  Since draft-ietf-httpbis-cache-10
-
-   *  In Section 5.2 (Cache-Control), adjust ABNF to allow empty lists
-      (<https://github.com/httpwg/http-core/issues/210>)
-
-C.13.  Since draft-ietf-httpbis-cache-11
-
-   *  None.
-
-C.14.  Since draft-ietf-httpbis-cache-12
-
-   *  In Section 4.2.4, remove 'no-store', as it won't be in cache in
-      the first place (<https://github.com/httpwg/http-core/issues/447>,
-      <https://www.rfc-editor.org/errata/eid6279>)
-
-   *  In Section 3.1, make it clear that only response headers need be
-      stored (<https://github.com/httpwg/http-core/issues/457>)
-
-   *  Rewrote "Updating Stored Header Fields" Section 3.2
-      (<https://github.com/httpwg/http-core/issues/458>)
-
-   *  In Section 4.2.1 clarify how to handle invalid and conflicting
-      directives (<https://github.com/httpwg/http-core/issues/460>)
-
-   *  In Section 4.3.3, mention retry of failed validation requests
-      (<https://github.com/httpwg/http-core/issues/462>)
-
-   *  In Section 4.3.3, clarify requirement on storing a full response
-      to a conditional request (<https://github.com/httpwg/http-core/
-      issues/463>)
-
-   *  In Section 5.1, clarify error handling
-      (<https://github.com/httpwg/http-core/issues/471>)
-
-   *  In Section 4.2, remove spurious "UTC" (<https://github.com/httpwg/
-      http-core/issues/472>)
-
-   *  In Section 4.2, correct the date-related rule names to consider
-      case-insensitive (<https://github.com/httpwg/http-core/
-      issues/473>)
-
-   *  In Section 6, strengthen recommendation for application caches to
-      pay attention to cache directives (<https://github.com/httpwg/
-      http-core/issues/474>)
-
-   *  In Section 4, mention collapsed requests
-      (<https://github.com/httpwg/http-core/issues/475>)
-
-   *  In Section 4.4, relax requirements on Content-Location and
-      Location invalidation (<https://github.com/httpwg/http-core/
-      issues/478>)
-
-   *  In Section 4.3.4, refine the exceptions to update on a 304
-      (<https://github.com/httpwg/http-core/issues/488>)
-
-   *  Moved table of Cache-Control directives into Section 8.2
-      (<https://github.com/httpwg/http-core/issues/506>)
-
-   *  In Section 1.2, remove unused core ABNF rules
-      (<https://github.com/httpwg/http-core/issues/529>)
-
-   *  Changed to using "payload data" when defining requirements about
-      the data being conveyed within a message, instead of the terms
-      "payload body" or "response body" or "representation body", since
-      they often get confused with the HTTP/1.1 message body (which
-      includes transfer coding) (<https://github.com/httpwg/http-core/
-      issues/553>)
-
-C.15.  Since draft-ietf-httpbis-cache-13
-
-   *  In Section 5.2.2.2, clarify requirements around generating an
-      error response (<https://github.com/httpwg/http-core/issues/608>)
-
-   *  Changed to using "content" instead of "payload" or "payload data"
-      to avoid confusion with the payload of version-specific messaging
-      frames (<https://github.com/httpwg/http-core/issues/654>)
-
-   *  In Section 4.3.4, clarify how multiple validators are handled
-      (<https://github.com/httpwg/http-core/issues/659>)
-
-   *  In Section 4.2.3, Section 5.2, and Section 5.2.2.4, remove notes
-      about very old HTTP/1.0 behaviours (<https://github.com/httpwg/
-      http-core/issues/660>)
-
-   *  In Section 5.2.2.3, modify operation to be more backwards-
-      compatible with existing implementations
-      (<https://github.com/httpwg/http-core/issues/661>)
-
-C.16.  Since draft-ietf-httpbis-cache-14
-
-   *  Fix subsection ordering in Section 5.2.2
-      (<https://github.com/httpwg/http-core/issues/674>)
-
-   *  In Section 2, define what a cache key is
-      (<https://github.com/httpwg/http-core/issues/728>)
-
-   *  In Section 3.1, clarify what cache proxy headers apply to
-      (<https://github.com/httpwg/http-core/issues/729>)
-
-   *  In Section 7.1, cache poisoning can affect private caches too
-      (<https://github.com/httpwg/http-core/issues/730>)
-
-   *  In Section 5.1, adjust handling of invalid values to match most
-      deployed caches (<https://github.com/httpwg/http-core/issues/778>)
-
-   *  In Section 5.3, mention parsing requirement relaxation
-      (<https://github.com/httpwg/http-core/issues/779>)
-
-C.17.  Since draft-ietf-httpbis-cache-15
-
-   *  In Section 4.3.1, tune description of relation between cache keys
-      and validators (<https://github.com/httpwg/http-core/issues/832>)
-
-C.18.  Since draft-ietf-httpbis-cache-16
-
-   This draft addresses mostly editorial issues raised during or past
-   IETF Last Call; see <https://github.com/httpwg/http-core/
-   issues?q=label%3Acaching+created%3A%3E2021-05-26> for a summary.
-
-   Furthermore:
-
-   *  Addressed Genart last call review comments
-      (<https://github.com/httpwg/http-core/issues/847>)
-
-   *  In Section 4.3.4, clarify that only selectable responses are
-      updated (<https://github.com/httpwg/http-core/issues/839>)
-
-C.19.  Since draft-ietf-httpbis-cache-17
-
-   *  Made reference to [HTTP/1.1] informative only
-      (<https://github.com/httpwg/http-core/issues/911>)
-
-   *  Move cache-related aspects of validator use from [HTTP] into
-      Section 4.3.1 (<https://github.com/httpwg/http-core/issues/933>)
-
-   *  Use term "clock" defined in Section 6.6.1 of [HTTP] throughout
-      (<https://github.com/httpwg/http-core/issues/953>)
-
-   *  Throughout, disambiguate "selected representation" and "selected
-      response" (now "chosen response") (<https://github.com/httpwg/
-      http-core/issues/958>)
-
-C.20.  Since draft-ietf-httpbis-cache-18
-
-   *  In Section 8.1, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
-
-C.21.  Since draft-ietf-httpbis-cache-19
-
-   *  None.
+   intermediaries (Section 5.5).
 
 Acknowledgements
 
-   See Appendix "Acknowledgements" of [HTTP], which applies to this
-   document as well.
+   See the "Acknowledgements" section in [HTTP], which applies to this
+   document.
 
 Index
 
