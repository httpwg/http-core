--- draft-ietf-httpbis-cache-latest.txt	2022-01-02 15:15:52.784315800 +0100
+++ rfc9111-to-be.txt	2022-01-02 14:06:20.374300000 +0100
@@ -2,17 +2,16 @@
 
 
 
-HTTP Working Group                                      R. Fielding, Ed.
-Internet-Draft                                                     Adobe
-Obsoletes: 7234 (if approved)                         M. Nottingham, Ed.
-Intended status: Standards Track                                  Fastly
-Expires: 6 July 2022                                     J. Reschke, Ed.
-                                                              greenbytes
-                                                          2 January 2022
+Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
+Request for Comments: 9111                                         Adobe
+STD: 97                                               M. Nottingham, Ed.
+Obsoletes: 7234                                                   Fastly
+Category: Standards Track                                J. Reschke, Ed.
+ISSN: 2070-1721                                               greenbytes
+                                                           December 2021
 
 
                               HTTP Caching
-                    draft-ietf-httpbis-cache-latest
 
 Abstract
 
@@ -24,50 +23,34 @@
 
    This document obsoletes RFC 7234.
 
-Editorial Note
-
-   This note is to be removed before publishing as an RFC.
-
-   Discussion of this draft takes place on the HTTP working group
-   mailing list (ietf-http-wg@w3.org), which is archived at
-   <https://lists.w3.org/Archives/Public/ietf-http-wg/>.
-
-   Working Group information can be found at <https://httpwg.org/>;
-   source code and issues list for this draft can be found at
-   <https://github.com/httpwg/http-core>.
-
-   The changes in this draft are summarized in Appendix C.21.
-
 Status of This Memo
 
-   This Internet-Draft is submitted in full conformance with the
-   provisions of BCP 78 and BCP 79.
-
-   Internet-Drafts are working documents of the Internet Engineering
-   Task Force (IETF).  Note that other groups may also distribute
-   working documents as Internet-Drafts.  The list of current Internet-
-   Drafts is at https://datatracker.ietf.org/drafts/current/.
-
-   Internet-Drafts are draft documents valid for a maximum of six months
-   and may be updated, replaced, or obsoleted by other documents at any
-   time.  It is inappropriate to use Internet-Drafts as reference
-   material or to cite them other than as "work in progress."
+   This is an Internet Standards Track document.
 
-   This Internet-Draft will expire on 6 July 2022.
+   This document is a product of the Internet Engineering Task Force
+   (IETF).  It represents the consensus of the IETF community.  It has
+   received public review and has been approved for publication by the
+   Internet Engineering Steering Group (IESG).  Further information on
+   Internet Standards is available in Section 2 of RFC 7841.
+
+   Information about the current status of this document, any errata,
+   and how to provide feedback on it may be obtained at
+   https://www.rfc-editor.org/info/rfc9111.
 
 Copyright Notice
 
-   Copyright (c) 2022 IETF Trust and the persons identified as the
+   Copyright (c) 2021 IETF Trust and the persons identified as the
    document authors.  All rights reserved.
 
    This document is subject to BCP 78 and the IETF Trust's Legal
-   Provisions Relating to IETF Documents (https://trustee.ietf.org/
-   license-info) in effect on the date of publication of this document.
-   Please review these documents carefully, as they describe your rights
-   and restrictions with respect to this document.  Code Components
-   extracted from this document must include Revised BSD License text as
-   described in Section 4.e of the Trust Legal Provisions and are
-   provided without warranty as described in the Revised BSD License.
+   Provisions Relating to IETF Documents
+   (https://trustee.ietf.org/license-info) in effect on the date of
+   publication of this document.  Please review these documents
+   carefully, as they describe your rights and restrictions with respect
+   to this document.  Code Components extracted from this document must
+   include Revised BSD License text as described in Section 4.e of the
+   Trust Legal Provisions and are provided without warranty as described
+   in the Revised BSD License.
 
    This document may contain material from IETF Documents or IETF
    Contributions published or made publicly available before November
@@ -150,28 +133,6 @@
      9.2.  Informative References
    Appendix A.  Collected ABNF
    Appendix B.  Changes from RFC 7234
-   Appendix C.  Change Log
-     C.1.  Between RFC7234 and draft 00
-     C.2.  Since draft-ietf-httpbis-cache-00
-     C.3.  Since draft-ietf-httpbis-cache-01
-     C.4.  Since draft-ietf-httpbis-cache-02
-     C.5.  Since draft-ietf-httpbis-cache-03
-     C.6.  Since draft-ietf-httpbis-cache-04
-     C.7.  Since draft-ietf-httpbis-cache-05
-     C.8.  Since draft-ietf-httpbis-cache-06
-     C.9.  Since draft-ietf-httpbis-cache-07
-     C.10. Since draft-ietf-httpbis-cache-08
-     C.11. Since draft-ietf-httpbis-cache-09
-     C.12. Since draft-ietf-httpbis-cache-10
-     C.13. Since draft-ietf-httpbis-cache-11
-     C.14. Since draft-ietf-httpbis-cache-12
-     C.15. Since draft-ietf-httpbis-cache-13
-     C.16. Since draft-ietf-httpbis-cache-14
-     C.17. Since draft-ietf-httpbis-cache-15
-     C.18. Since draft-ietf-httpbis-cache-16
-     C.19. Since draft-ietf-httpbis-cache-17
-     C.20. Since draft-ietf-httpbis-cache-18
-     C.21. Since draft-ietf-httpbis-cache-19
    Acknowledgements
    Index
    Authors' Addresses
@@ -190,8 +151,8 @@
    subsystem that controls storage, retrieval, and deletion of messages
    in it.  A cache stores cacheable responses to reduce the response
    time and network bandwidth consumption on future equivalent requests.
-   Any client or server MAY use a cache, though not when acting as a
-   tunnel (Section 3.7 of [HTTP]).
+   Any client or server MAY use a cache but not when acting as a tunnel
+   (Section 3.7 of [HTTP]).
 
    A _shared cache_ is a cache that stores responses for reuse by more
    than one user; shared caches are usually (but not always) deployed as
@@ -216,8 +177,8 @@
 
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
-   "OPTIONAL" in this document are to be interpreted as described in BCP
-   14 [RFC2119] [RFC8174] when, and only when, they appear in all
+   "OPTIONAL" in this document are to be interpreted as described in
+   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
    capitals, as shown here.
 
    Section 2 of [HTTP] defines conformance criteria and contains
@@ -231,7 +192,7 @@
 
    It also uses a list extension, defined in Section 5.6.1 of [HTTP],
    that allows for compact definition of comma-separated lists using a
-   '#' operator (similar to how the '*' operator indicates repetition).
+   "#" operator (similar to how the "*" operator indicates repetition).
    Appendix A shows the collected grammar with all list operators
    expanded to standard ABNF notation.
 
@@ -284,7 +245,7 @@
    reuse is the default behavior when no requirement or local
    configuration prevents it.  Therefore, HTTP cache requirements are
    focused on preventing a cache from either storing a non-reusable
-   response or reusing a stored response inappropriately, rather than
+   response or reusing a stored response inappropriately rather than
    mandating that caches always store and reuse particular responses.
 
    The _cache key_ is the information a cache uses to choose a response
@@ -292,7 +253,7 @@
    used to retrieve the stored response; the method determines under
    which circumstances that response can be used to satisfy a subsequent
    request.  However, many HTTP caches in common use today only cache
-   GET responses, and therefore only use the URI as the cache key,
+   GET responses and therefore only use the URI as the cache key,
    forwarding other methods.
 
    A cache might store multiple responses for a request target that is
@@ -341,9 +302,9 @@
    *  if the cache is shared: the Authorization header field is not
       present in the request (see Section 11.6.2 of [HTTP]) or a
       response directive is present that explicitly allows shared
-      caching (see Section 3.5); and,
+      caching (see Section 3.5); and
 
-   *  the response contains at least one of:
+   *  the response contains at least one of the following:
 
       -  a public response directive (see Section 5.2.2.9);
 
@@ -354,16 +315,16 @@
 
       -  a max-age response directive (see Section 5.2.2.1);
 
-      -  if the cache is shared: an s-maxage response directive (see
+      -  if the cache is shared: a s-maxage response directive (see
          Section 5.2.2.10);
 
-      -  a Cache Control Extension that allows it to be cached (see
-         Section 5.2.3); or,
+      -  a Cache-Control extension that allows it to be cached (see
+         Section 5.2.3); or
 
       -  a status code that is defined as heuristically cacheable (see
          Section 4.2.2).
 
-   Note that a cache-control extension can override any of the
+   Note that a Cache-Control extension can override any of the
    requirements listed; see Section 5.2.3.
 
    In this context, a cache has "understood" a request method or a
@@ -377,8 +338,8 @@
 
 3.1.  Storing Header and Trailer Fields
 
-   Caches MUST include all received response header fields - including
-   unrecognised ones - when storing a response; this assures that new
+   Caches MUST include all received response header fields -- including
+   unrecognized ones -- when storing a response; this assures that new
    HTTP header fields can be successfully deployed.  However, the
    following exceptions are made:
 
@@ -402,15 +363,15 @@
       of [HTTP]), Proxy-Authentication-Info (Section 11.7.3 of [HTTP]),
       and Proxy-Authorization (Section 11.7.2 of [HTTP]).
 
-   Caches MAY either store trailer fields separate from header fields,
-   or discard them.  Caches MUST NOT combine trailer fields with header
+   Caches MAY either store trailer fields separate from header fields or
+   discard them.  Caches MUST NOT combine trailer fields with header
    fields.
 
 3.2.  Updating Stored Header Fields
 
    Caches are required to update a stored response's header fields from
    another (typically newer) response in several situations; for
-   example, see Section 3.4, Section 4.3.4 and Section 4.3.5.
+   example, see Sections 3.4, 4.3.4, and 4.3.5.
 
    When doing so, the cache MUST add each header field in the provided
    response to the stored response, replacing field values that are
@@ -431,7 +392,7 @@
    and updating header fields that affect that processing can result in
    inconsistent behavior and security issues.  Caches in this situation
    MAY omit these header fields from updating stored responses on an
-   exceptional basis, but SHOULD limit such omission to those fields
+   exceptional basis but SHOULD limit such omission to those fields
    necessary to assure integrity of the stored response.
 
    For example, a browser might decode the content coding of a response
@@ -439,13 +400,13 @@
    has stored and the response's original metadata.  Updating that
    stored metadata with a different Content-Encoding header field would
    be problematic.  Likewise, a browser might store a post-parse HTML
-   tree, rather than the content received in the response; updating the
-   Content-Type header field would not be workable in this case, because
+   tree rather than the content received in the response; updating the
+   Content-Type header field would not be workable in this case because
    any assumptions about the format made in parsing would now be
    invalid.
 
    Furthermore, some fields are automatically processed and removed by
-   the HTTP implementation; for example, the Content-Range header field.
+   the HTTP implementation, such as the Content-Range header field.
    Implementations MAY automatically omit such header fields from
    updates, even when the processing does not actually occur.
 
@@ -496,7 +457,7 @@
    Authorization header field (Section 11.6.2 of [HTTP]) to satisfy any
    subsequent request unless the response contains a Cache-Control field
    with a response directive (Section 5.2.2) that allows it to be stored
-   by a shared cache and the cache conforms to the requirements of that
+   by a shared cache, and the cache conforms to the requirements of that
    directive for that response.
 
    In this specification, the following response directives have such an
@@ -508,7 +469,7 @@
    When presented with a request, a cache MUST NOT reuse a stored
    response unless:
 
-   *  The presented target URI (Section 7.1 of [HTTP]) and that of the
+   *  the presented target URI (Section 7.1 of [HTTP]) and that of the
       stored response match, and
 
    *  the request method associated with the stored response allows it
@@ -529,7 +490,7 @@
 
       -  successfully validated (see Section 4.3).
 
-   Note that a cache-control extension can override any of the
+   Note that a Cache-Control extension can override any of the
    requirements listed; see Section 5.2.3.
 
    When a stored response is used to satisfy a request without
@@ -547,9 +508,9 @@
 
    A response that is stored or storable can be used to satisfy multiple
    requests, provided that it is allowed to reuse that response for the
-   requests in question.  This enables caches to _collapse requests_ -
+   requests in question.  This enables caches to _collapse requests_ --
    or combine multiple incoming requests into a single forward request
-   upon a cache miss - thereby reducing load on the origin server and
+   upon a cache miss -- thereby reducing load on the origin server and
    network.  However, note that if the response returned is not able to
    be used for some or all of the collapsed requests, additional latency
    might be introduced, because they will need to be forwarded to be
@@ -575,7 +536,7 @@
 
    The header fields from two requests are defined to match if and only
    if those in the first request can be transformed to those in the
-   second request by applying any of:
+   second request by applying any of the following:
 
    *  adding or removing whitespace, where allowed in the header field's
       syntax
@@ -692,7 +653,8 @@
 4.2.1.  Calculating Freshness Lifetime
 
    A cache can calculate the freshness lifetime (denoted as
-   freshness_lifetime) of a response by using the first match of:
+   freshness_lifetime) of a response by using the first match as
+   follows:
 
    *  If the cache is shared and the s-maxage response directive
       (Section 5.2.2.10) is present, use its value, or
@@ -715,7 +677,7 @@
 
    When there is more than one value present for a given directive
    (e.g., two Expires header field lines or multiple Cache-Control: max-
-   age directives), either the first occurrence should be used, or the
+   age directives), either the first occurrence should be used or the
    response should be considered stale.  If directives conflict (e.g.,
    both max-age and no-cache are present), the most restrictive
    directive should be honored.  Caches are encouraged to consider
@@ -729,28 +691,27 @@
    is not specified, employing algorithms that use other field values
    (such as the Last-Modified time) to estimate a plausible expiration
    time.  This specification does not provide specific algorithms, but
-   does impose worst-case constraints on their results.
+   it does impose worst-case constraints on their results.
 
    A cache MUST NOT use heuristics to determine freshness when an
    explicit expiration time is present in the stored response.  Because
-   of the requirements in Section 3, this means that heuristics can only
-   be used on responses without explicit freshness whose status codes
-   are defined as _heuristically cacheable_ (e.g., see Section 15.1 of
-   [HTTP]), and those responses without explicit freshness that have
-   been marked as explicitly cacheable (e.g., with a "public" response
-   directive).
+   of the requirements in Section 3, heuristics can only be used on
+   responses without explicit freshness whose status codes are defined
+   as _heuristically cacheable_ (e.g., see Section 15.1 of [HTTP]) and
+   on responses without explicit freshness that have been marked as
+   explicitly cacheable (e.g., with a "public" response directive).
 
-   Note that in previous specifications heuristically cacheable response
-   status codes were called "cacheable by default."
+   Note that in previous specifications, heuristically cacheable
+   response status codes were called "cacheable by default".
 
    If the response has a Last-Modified header field (Section 8.8.2 of
    [HTTP]), caches are encouraged to use a heuristic expiration value
    that is no more than some fraction of the interval since that time.
    A typical setting of this fraction might be 10%.
 
-      |  *Note:* Section 13.9 of [RFC2616] prohibited caches from
+      |  *Note:* Section 13.9 of [RFC2616] prohibits caches from
       |  calculating heuristic freshness for URIs with query components
-      |  (i.e., those containing '?').  In practice, this has not been
+      |  (i.e., those containing "?").  In practice, this has not been
       |  widely implemented.  Therefore, origin servers are encouraged
       |  to send explicit directives (e.g., Cache-Control: no-cache) if
       |  they wish to prevent caching.
@@ -767,23 +728,27 @@
 
    Age calculation uses the following data:
 
-   _age_value_  The term "age_value" denotes the value of the Age header
-      field (Section 5.1), in a form appropriate for arithmetic
-      operation; or 0, if not available.
-
-   _date_value_  The term "date_value" denotes the value of the Date
-      header field, in a form appropriate for arithmetic operations.
-      See Section 6.6.1 of [HTTP] for the definition of the Date header
-      field, and for requirements regarding responses without it.
-
-   _now_  The term "now" means the current value of this
-      implementation's clock (Section 5.6.7 of [HTTP]).
-
-   _request_time_  The value of the clock at the time of the request
-      that resulted in the stored response.
+   _age_value_
+      The term "age_value" denotes the value of the Age header field
+      (Section 5.1), in a form appropriate for arithmetic operation; or
+      0, if not available.
+
+   _date_value_
+      The term "date_value" denotes the value of the Date header field,
+      in a form appropriate for arithmetic operations.  See
+      Section 6.6.1 of [HTTP] for the definition of the Date header
+      field and for requirements regarding responses without it.
+
+   _now_
+      The term "now" means the current value of this implementation's
+      clock (Section 5.6.7 of [HTTP]).
+
+   _request_time_
+      The value of the clock at the time of the request that resulted in
+      the stored response.
 
-   _response_time_  The value of the clock at the time the response was
-      received.
+   _response_time_
+      The value of the clock at the time the response was received.
 
    A response's age can be calculated in two entirely independent ways:
 
@@ -830,9 +795,9 @@
 
    A cache MUST NOT generate a stale response unless it is disconnected
    or doing so is explicitly permitted by the client or origin server
-   (e.g., by the max-stale request directive in Section 5.2.1, by
-   extension directives such as those defined in [RFC5861], or by
-   configuration in accordance with an out-of-band contract).
+   (e.g., by the max-stale request directive in Section 5.2.1, extension
+   directives such as those defined in [RFC5861], or configuration in
+   accordance with an out-of-band contract).
 
 4.3.  Validation
 
@@ -848,18 +813,18 @@
 
 4.3.1.  Sending a Validation Request
 
-   When generating a conditional request for validation, a cache starts
-   with either a request it is attempting to satisfy, or - if it is
-   initiating the request independently - it synthesises a request using
-   a stored response by copying the method, target URI, and request
-   header fields identified by the Vary header field (Section 4.1).
+   When generating a conditional request for validation, a cache either
+   starts with a request it is attempting to satisfy or -- if it is
+   initiating the request independently -- synthesizes a request using a
+   stored response by copying the method, target URI, and request header
+   fields identified by the Vary header field (Section 4.1).
 
    It then updates that request with one or more precondition header
-   fields.  These contain validator metadata sourced from stored
-   response(s) that have the same URI.  Typically, this will include
-   only those stored responses(s) that have the same cache key, although
-   a cache is allowed to validate a response that it cannot choose with
-   the request header fields it is sending (see Section 4.1).
+   fields.  These contain validator metadata sourced from a stored
+   response(s) that has the same URI.  Typically, this will include only
+   the stored response(s) that has the same cache key, although a cache
+   is allowed to validate a response that it cannot choose with the
+   request header fields it is sending (see Section 4.1).
 
    The precondition header fields are then compared by recipients to
    determine whether any stored response is equivalent to a current
@@ -973,14 +938,14 @@
       stored response can be updated and reused; see Section 4.3.4.
 
    *  A full response (i.e., one containing content) indicates that none
-      of the stored responses nominated in the conditional request is
+      of the stored responses nominated in the conditional request are
       suitable.  Instead, the cache MUST use the full response to
       satisfy the request.  The cache MAY store such a full response,
       subject to its constraints (see Section 3).
 
    *  However, if a cache receives a 5xx (Server Error) response while
       attempting to validate a response, it can either forward this
-      response to the requesting client, or act as if the server failed
+      response to the requesting client or act as if the server failed
       to respond.  In the latter case, the cache can send a previously
       stored response, subject to its constraints on doing so (see
       Section 4.2.4), or retry the validation request.
@@ -992,20 +957,21 @@
    information provided, and then do so.
 
    The initial set of stored responses to update are those that could
-   have been chosen for that request - i.e., those that meet the
+   have been chosen for that request -- i.e., those that meet the
    requirements in Section 4, except the last requirement to be fresh,
-   able to be served stale or just validated.
+   served stale, or just validated.
 
    Then, that initial set of stored response(s) is further filtered by
    the first match of:
 
    *  If the new response contains one or more _strong validators_ (see
       Section 8.8.1 of [HTTP]), then each of those strong validators
-      identify a selected representation for update.  All the stored
+      identifies a selected representation for update.  All the stored
       responses in the initial set with one of those same strong
       validators are identified for update.  If none of the initial set
-      contain at least one of the same strong validators, then the cache
-      MUST NOT use the new response to update any stored responses.
+      contains at least one of the same strong validators, then the
+      cache MUST NOT use the new response to update any stored
+      responses.
 
    *  If the new response contains no strong validators but does contain
       one or more _weak validators_, and those validators correspond to
@@ -1053,7 +1019,7 @@
 4.4.  Invalidating Stored Responses
 
    Because unsafe request methods (Section 9.2.1 of [HTTP]) such as PUT,
-   POST or DELETE have the potential for changing state on the origin
+   POST, or DELETE have the potential for changing state on the origin
    server, intervening caches are required to invalidate stored
    responses to keep their contents up to date.
 
@@ -1073,8 +1039,8 @@
    attacks.
 
    _Invalidate_ means that the cache will either remove all stored
-   responses whose target URI matches the given URI, or will mark them
-   as "invalid" and in need of a mandatory validation before they can be
+   responses whose target URI matches the given URI or mark them as
+   "invalid" and in need of a mandatory validation before they can be
    sent in response to a subsequent request.
 
    A "non-error response" is one with a 2xx (Successful) or 3xx
@@ -1153,7 +1119,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-age" request directive indicates that the client prefers a
    response whose age is less than or equal to the specified number of
@@ -1168,7 +1134,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-stale" request directive indicates that the client will
    accept a response that has exceeded its freshness lifetime.  If a
@@ -1185,7 +1151,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "min-fresh" request directive indicates that the client prefers a
    response whose freshness lifetime is no less than its current age
@@ -1199,7 +1165,7 @@
 
 5.2.1.4.  no-cache
 
-   The "no-cache" request directive indicates that the client prefers
+   The "no-cache" request directive indicates that the client prefers a
    stored response not be used to satisfy the request without successful
    validation on the origin server.
 
@@ -1209,7 +1175,7 @@
    store any part of either this request or any response to it.  This
    directive applies to both private and shared caches.  "MUST NOT
    store" in this context means that the cache MUST NOT intentionally
-   store the information in non-volatile storage, and MUST make a best-
+   store the information in non-volatile storage and MUST make a best-
    effort attempt to remove the information from volatile storage as
    promptly as possible after forwarding it.
 
@@ -1232,9 +1198,9 @@
 
    The "only-if-cached" request directive indicates that the client only
    wishes to obtain a stored response.  Caches that honor this request
-   directive SHOULD, upon receiving it, either respond using a stored
-   response consistent with the other constraints of the request, or
-   respond with a 504 (Gateway Timeout) status code.
+   directive SHOULD, upon receiving it, respond with either a stored
+   response consistent with the other constraints of the request or a
+   504 (Gateway Timeout) status code.
 
 5.2.2.  Response Cache-Control Directives
 
@@ -1245,7 +1211,7 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "max-age" response directive indicates that the response is to be
    considered stale after its age is greater than the specified number
@@ -1263,7 +1229,7 @@
    the origin, as defined by Section 4.3.
 
    The must-revalidate directive is necessary to support reliable
-   operation for certain protocol features.  In all circumstances a
+   operation for certain protocol features.  In all circumstances, a
    cache MUST NOT ignore the must-revalidate directive; in particular,
    if a cache is disconnected, the cache MUST generate an error response
    rather than reuse the stale response.  The generated status code
@@ -1295,7 +1261,7 @@
 
    Argument syntax:
 
-      #field-name
+         #field-name
 
    The "no-cache" response directive, in its unqualified form (without
    an argument), indicates that the response MUST NOT be used to satisfy
@@ -1306,15 +1272,15 @@
    response to satisfy a request without contacting it, even by caches
    that have been configured to send stale responses.
 
-   The qualified form of no-cache response directive, with an argument
-   that lists one or more field names, indicates that a cache MAY use
-   the response to satisfy a subsequent request, subject to any other
-   restrictions on caching, if the listed header fields are excluded
-   from the subsequent response or the subsequent response has been
-   successfully revalidated with the origin server (updating or removing
-   those fields).  This allows an origin server to prevent the re-use of
-   certain header fields in a response, while still allowing caching of
-   the rest of the response.
+   The qualified form of the no-cache response directive, with an
+   argument that lists one or more field names, indicates that a cache
+   MAY use the response to satisfy a subsequent request, subject to any
+   other restrictions on caching, if the listed header fields are
+   excluded from the subsequent response or the subsequent response has
+   been successfully revalidated with the origin server (updating or
+   removing those fields).  This allows an origin server to prevent the
+   reuse of certain header fields in a response, while still allowing
+   caching of the rest of the response.
 
    The field names given are not limited to the set of header fields
    defined by this specification.  Field names are case-insensitive.
@@ -1325,18 +1291,18 @@
 
       |  *Note:* The qualified form of the directive is often handled by
       |  caches as if an unqualified no-cache directive was received;
-      |  i.e., the special handling for the qualified form is not widely
-      |  implemented.
+      |  that is, the special handling for the qualified form is not
+      |  widely implemented.
 
 5.2.2.5.  no-store
 
    The "no-store" response directive indicates that a cache MUST NOT
-   store any part of either the immediate request or response, and MUST
-   NOT use the response to satisfy any other request.
+   store any part of either the immediate request or the response and
+   MUST NOT use the response to satisfy any other request.
 
    This directive applies to both private and shared caches.  "MUST NOT
    store" in this context means that the cache MUST NOT intentionally
-   store the information in non-volatile storage, and MUST make a best-
+   store the information in non-volatile storage and MUST make a best-
    effort attempt to remove the information from volatile storage as
    promptly as possible after forwarding it.
 
@@ -1358,20 +1324,20 @@
 
    Argument syntax:
 
-      #field-name
+         #field-name
 
    The unqualified "private" response directive indicates that a shared
    cache MUST NOT store the response (i.e., the response is intended for
    a single user).  It also indicates that a private cache MAY store the
-   response, subject the constraints defined in Section 3, even if the
-   response would not otherwise be heuristically cacheable by a private
-   cache.
+   response, subject to the constraints defined in Section 3, even if
+   the response would not otherwise be heuristically cacheable by a
+   private cache.
 
    If a qualified private response directive is present, with an
    argument that lists one or more field names, then only the listed
    header fields are limited to a single user: a shared cache MUST NOT
    store the listed header fields if they are present in the original
-   response, but MAY store the remainder of the response message without
+   response but MAY store the remainder of the response message without
    those header fields, subject the constraints defined in Section 3.
 
    The field names given are not limited to the set of header fields
@@ -1385,8 +1351,8 @@
       |  the response can be stored; it cannot ensure the privacy of the
       |  message content.  Also, the qualified form of the directive is
       |  often handled by caches as if an unqualified private directive
-      |  was received; i.e., the special handling for the qualified form
-      |  is not widely implemented.
+      |  was received; that is, the special handling for the qualified
+      |  form is not widely implemented.
 
 5.2.2.8.  proxy-revalidate
 
@@ -1421,15 +1387,15 @@
 
    Argument syntax:
 
-      delta-seconds (see Section 1.2.2)
+         delta-seconds (see Section 1.2.2)
 
    The "s-maxage" response directive indicates that, for a shared cache,
    the maximum age specified by this directive overrides the maximum age
    specified by either the max-age directive or the Expires header
    field.
 
-   The s-maxage directive incorporates the proxy-revalidate
-   (Section 5.2.2.8) response directive's semantics for a shared cache.
+   The s-maxage directive incorporates the semantics of the proxy-
+   revalidate response directive (Section 5.2.2.8) for a shared cache.
    A shared cache MUST NOT reuse a stale response with s-maxage to
    satisfy another request until it has been successfully validated by
    the origin, as defined by Section 4.3.  This directive also permits a
@@ -1457,7 +1423,7 @@
    understand the new directive will default to the behavior specified
    by the old directive, and those that understand the new directive
    will recognize it as modifying the requirements associated with the
-   old directive.  In this way, extensions to the existing cache-control
+   old directive.  In this way, extensions to the existing Cache-Control
    directives can be made without breaking deployed caches.
 
    For example, consider a hypothetical new response directive called
@@ -1482,10 +1448,10 @@
       an argument is present,
 
    *  When the directive requires an argument, what it means when it is
-      missing,
+      missing, and
 
-   *  Whether the directive is specific to requests, responses, or able
-      to be used in either.
+   *  Whether the directive is specific to requests, specific to
+      responses, or able to be used in either.
 
 5.2.4.  Cache Directive Registry
 
@@ -1594,14 +1560,14 @@
    However, when an application caches data and does not make this
    apparent to or easily controllable by the user, it is strongly
    encouraged to define its operation with respect to HTTP cache
-   directives, so as not to surprise authors who expect caching
-   semantics to be honoured.  For example, while it might be reasonable
-   to define an application cache "above" HTTP that allows a response
-   containing Cache-Control: no-store to be reused for requests that are
-   directly related to the request that fetched it (such as those
-   created during the same page load), it would likely be surprising and
-   confusing to users and authors if it were allowed to be reused for
-   requests unrelated in any way to the one from which it was obtained.
+   directives so as not to surprise authors who expect caching semantics
+   to be honored.  For example, while it might be reasonable to define
+   an application cache "above" HTTP that allows a response containing
+   Cache-Control: no-store to be reused for requests that are directly
+   related to the request that fetched it (such as those created during
+   the same page load), it would likely be surprising and confusing to
+   users and authors if it were allowed to be reused for requests
+   unrelated in any way to the one from which it was obtained.
 
 7.  Security Considerations
 
@@ -1611,9 +1577,9 @@
    (Section 11 of [HTTP/1.1]) and "HTTP Semantics" (Section 17 of
    [HTTP]).
 
-   Caches expose an additional attack surface, since the contents of the
-   cache represent an attractive target for malicious exploitation.
-   Because cache contents persist after an HTTP request is complete, an
+   Caches expose an additional attack surface because the contents of
+   the cache represent an attractive target for malicious exploitation.
+   Since cache contents persist after an HTTP request is complete, an
    attack on the cache can reveal information long after a user believes
    that the information has been removed from the network.  Therefore,
    cache contents need to be protected as sensitive information.
@@ -1621,8 +1587,8 @@
    In particular, because private caches are restricted to a single
    user, they can be used to reconstruct a user's activity.  As a
    result, it is important for user agents to allow end users to control
-   them; for example, allowing stored responses to be removed for some
-   or all origin servers.
+   them, for example, by allowing stored responses to be removed for
+   some or all origin servers.
 
 7.1.  Cache Poisoning
 
@@ -1640,58 +1606,56 @@
 
 7.2.  Timing Attacks
 
-   Because one of the primary uses of a cache is to optimise
-   performance, its use can "leak" information about what resources have
-   been previously requested.
+   Because one of the primary uses of a cache is to optimize
+   performance, its use can "leak" information about which resources
+   have been previously requested.
 
    For example, if a user visits a site and their browser caches some of
-   its responses, and then navigates to a second site, that site can
-   attempt to load responses it knows exists on the first site.  If they
+   its responses and then navigates to a second site, that site can
+   attempt to load responses it knows exist on the first site.  If they
    load quickly, it can be assumed that the user has visited that site,
    or even a specific page on it.
 
    Such "timing attacks" can be mitigated by adding more information to
    the cache key, such as the identity of the referring site (to prevent
    the attack described above).  This is sometimes called "double
-   keying."
+   keying".
 
 7.3.  Caching of Sensitive Information
 
-   Implementation and deployment flaws (as well as misunderstanding of
-   cache operation) might lead to caching of sensitive information
-   (e.g., authentication credentials) that is thought to be private,
-   exposing it to unauthorized parties.
+   Implementation and deployment flaws (as well as the misunderstanding
+   of cache operation) might lead to the caching of sensitive
+   information (e.g., authentication credentials) that is thought to be
+   private, exposing it to unauthorized parties.
 
    Note that the Set-Cookie response header field [COOKIE] does not
    inhibit caching; a cacheable response with a Set-Cookie header field
    can be (and often is) used to satisfy subsequent requests to caches.
-   Servers who wish to control caching of these responses are encouraged
-   to emit appropriate Cache-Control response header fields.
+   Servers that wish to control caching of these responses are
+   encouraged to emit appropriate Cache-Control response header fields.
 
 8.  IANA Considerations
 
    The change controller for the following registrations is: "IETF
-   (iesg@ietf.org) - Internet Engineering Task Force".
+   (iesg@ietf.org) -- Internet Engineering Task Force".
 
 8.1.  Field Name Registration
 
-   First, introduce the new "Hypertext Transfer Protocol (HTTP) Field
-   Name Registry" at <https://www.iana.org/assignments/http-fields> as
-   described in Section 18.4 of [HTTP].
-
-   Then, please update the registry with the field names listed in the
-   table below:
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Field Name
+   Registry" at <https://www.iana.org/assignments/http-fields>, as
+   described in Section 18.4 of [HTTP], with the field names listed in
+   the table below:
 
    +===============+===========+======+==========+
    | Field Name    | Status    | Ref. | Comments |
    +===============+===========+======+==========+
-   | Age           | permanent | 5.1  |          |
+   | Age           | standard  | 5.1  |          |
    +---------------+-----------+------+----------+
-   | Cache-Control | permanent | 5.2  |          |
+   | Cache-Control | standard  | 5.2  |          |
    +---------------+-----------+------+----------+
-   | Expires       | permanent | 5.3  |          |
+   | Expires       | standard  | 5.3  |          |
    +---------------+-----------+------+----------+
-   | Pragma        | permanent | 5.4  |          |
+   | Pragma        | standard  | 5.4  |          |
    +---------------+-----------+------+----------+
    | Warning       | obsoleted | 5.5  |          |
    +---------------+-----------+------+----------+
@@ -1700,10 +1664,10 @@
 
 8.2.  Cache Directive Registration
 
-   Please update the "Hypertext Transfer Protocol (HTTP) Cache Directive
-   Registry" at <https://www.iana.org/assignments/http-cache-directives>
-   with the registration procedure of Section 5.2.4 and the cache
-   directive names summarized in the table below.
+   IANA has updated the "Hypertext Transfer Protocol (HTTP) Cache
+   Directive Registry" at <https://www.iana.org/assignments/http-cache-
+   directives> with the registration procedure per Section 5.2.4 and the
+   cache directive names summarized in the table below.
 
    +==================+==================================+
    | Cache Directive  | Reference                        |
@@ -1739,19 +1703,20 @@
 
 8.3.  Warn Code Registry
 
-   Please add a note to the "Hypertext Transfer Protocol (HTTP) Warn
-   Codes" registry at <https://www.iana.org/assignments/http-warn-codes>
-   to the effect that Warning is obsoleted.
+   IANA has the following note to the "Hypertext Transfer Protocol
+   (HTTP) Warn Codes" registry at <https://www.iana.org/assignments/
+   http-warn-codes> stating that "Warning" has been obsoleted:
+
+   |  The Warning header field (and the warn codes that it uses) has
+   |  been obsoleted for HTTP per [RFC9111].
 
 9.  References
 
 9.1.  Normative References
 
    [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP Semantics", Work in Progress, Internet-Draft,
-              draft-ietf-httpbis-semantics-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              semantics-latest>.
+              Ed., "HTTP Semantics", RFC 9110, DOI 10.17487/RFC9110,
+              December 2021, <https://www.rfc-editor.org/info/rfc9110>.
 
    [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
               Requirement Levels", BCP 14, RFC 2119,
@@ -1778,10 +1743,8 @@
               <https://www.rfc-editor.org/info/rfc6265>.
 
    [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
-              Ed., "HTTP/1.1", Work in Progress, Internet-Draft, draft-
-              ietf-httpbis-messaging-latest, January 2022,
-              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
-              messaging-latest>.
+              Ed., "HTTP/1.1", RFC 9112, DOI 10.17487/RFC9112, December
+              2021, <https://www.rfc-editor.org/info/rfc9112>.
 
    [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
               Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
@@ -1790,7 +1753,7 @@
               <https://www.rfc-editor.org/info/rfc2616>.
 
    [RFC5861]  Nottingham, M., "HTTP Cache-Control Extensions for Stale
-              Content", RFC 5861, DOI 10.17487/RFC5861, April 2010,
+              Content", RFC 5861, DOI 10.17487/RFC5861, May 2010,
               <https://www.rfc-editor.org/info/rfc5861>.
 
    [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
@@ -1831,359 +1794,44 @@
 Appendix B.  Changes from RFC 7234
 
    Handling of duplicate and conflicting cache directives has been
-   clarified.  (Section 4.2.1)
+   clarified (Section 4.2.1).
 
    Cache invalidation of the URIs in the Location and Content-Location
-   header fields is no longer required, but still allowed.
-   (Section 4.4)
+   header fields is no longer required but is still allowed
+   (Section 4.4).
 
    Cache invalidation of the URIs in the Location and Content-Location
    header fields is disallowed when the origin is different; previously,
-   it was the host.  (Section 4.4)
+   it was the host (Section 4.4).
 
    Handling invalid and multiple Age header field values has been
-   clarified.  (Section 5.1)
+   clarified (Section 5.1).
 
    Some cache directives defined by this specification now have stronger
    prohibitions against generating the quoted form of their values,
    since this has been found to create interoperability problems.
    Consumers of extension cache directives are no longer required to
    accept both token and quoted-string forms, but they still need to
-   parse them properly for unknown extensions.  (Section 5.2)
+   parse them properly for unknown extensions (Section 5.2).
 
    The "public" and "private" cache directives were clarified, so that
-   they do not make responses reusable under any condition.
-   (Section 5.2.2)
+   they do not make responses reusable under any condition
+   (Section 5.2.2).
 
    The "must-understand" cache directive was introduced; caches are no
    longer required to understand the semantics of new response status
-   codes unless it is present.  (Section 5.2.2.3)
+   codes unless it is present (Section 5.2.2.3).
 
    The Warning response header was obsoleted.  Much of the information
    supported by Warning could be gleaned by examining the response, and
-   the remaining warn-codes - although potentially useful - were
+   the remaining warn codes -- although potentially useful -- were
    entirely advisory.  In practice, Warning was not added by caches or
-   intermediaries.  (Section 5.5)
-
-Appendix C.  Change Log
-
-   This section is to be removed before publishing as an RFC.
-
-C.1.  Between RFC7234 and draft 00
-
-   The changes were purely editorial:
-
-   *  Change boilerplate and abstract to indicate the "draft" status,
-      and update references to ancestor specifications.
-
-   *  Remove version "1.1" from document title, indicating that this
-      specification applies to all HTTP versions.
-
-   *  Adjust historical notes.
-
-   *  Update links to sibling specifications.
-
-   *  Replace sections listing changes from RFC 2616 by new empty
-      sections referring to RFC 723x.
-
-   *  Remove acknowledgements specific to RFC 723x.
-
-   *  Move "Acknowledgements" to the very end and make them unnumbered.
-
-C.2.  Since draft-ietf-httpbis-cache-00
-
-   The changes are purely editorial:
-
-   *  Moved all extensibility tips, registration procedures, and
-      registry tables from the IANA considerations to normative
-      sections, reducing the IANA considerations to just instructions
-      that will be removed prior to publication as an RFC.
-
-C.3.  Since draft-ietf-httpbis-cache-01
-
-   *  Cite RFC 8126 instead of RFC 5226 (<https://github.com/httpwg/
-      http-core/issues/75>)
-
-   *  In Section 5.4, misleading statement about the relation between
-      Pragma and Cache-Control (<https://github.com/httpwg/http-core/
-      issues/92>, <https://www.rfc-editor.org/errata/eid4674>)
-
-C.4.  Since draft-ietf-httpbis-cache-02
-
-   *  In Section 3, explain that only final responses are cacheable
-      (<https://github.com/httpwg/http-core/issues/29>)
-
-   *  In Section 5.2.2, clarify what responses various directives apply
-      to (<https://github.com/httpwg/http-core/issues/52>)
-
-   *  In Section 4.3.1, clarify the source of validators in conditional
-      requests (<https://github.com/httpwg/http-core/issues/110>)
-
-   *  Revise Section 6 to apply to more than just History Lists
-      (<https://github.com/httpwg/http-core/issues/126>)
-
-   *  In Section 5.5, deprecated "Warning" header field
-      (<https://github.com/httpwg/http-core/issues/139>)
-
-   *  In Section 3.5, remove a spurious note
-      (<https://github.com/httpwg/http-core/issues/141>)
-
-C.5.  Since draft-ietf-httpbis-cache-03
-
-   *  In Section 2, define what a disconnected cache is
-      (<https://github.com/httpwg/http-core/issues/5>)
-
-   *  In Section 4, clarify language around how to select a response
-      when more than one matches (<https://github.com/httpwg/http-core/
-      issues/23>)
-
-   *  in Section 4.2.4, mention stale-while-revalidate and stale-if-
-      error (<https://github.com/httpwg/http-core/issues/122>)
-
-   *  Remove requirements around cache request directives
-      (<https://github.com/httpwg/http-core/issues/129>)
-
-   *  Deprecate Pragma (<https://github.com/httpwg/http-core/
-      issues/140>)
-
-   *  In Section 3.5 and Section 5.2.2, note effect of some directives
-      on authenticated requests (<https://github.com/httpwg/http-core/
-      issues/161>)
-
-C.6.  Since draft-ietf-httpbis-cache-04
-
-   *  In Section 5.2, remove the registrations for stale-if-error and
-      stale-while-revalidate which happened in RFC 7234
-      (<https://github.com/httpwg/http-core/issues/207>)
-
-C.7.  Since draft-ietf-httpbis-cache-05
-
-   *  In Section 3.3, clarify how weakly framed content is considered
-      for purposes of completeness (<https://github.com/httpwg/http-
-      core/issues/25>)
-
-   *  Throughout, describe Vary and cache key operations more clearly
-      (<https://github.com/httpwg/http-core/issues/28>)
-
-   *  In Section 3, remove concept of "cacheable methods" in favor of
-      prose (<https://github.com/httpwg/http-core/issues/54>,
-      <https://www.rfc-editor.org/errata/eid5300>)
-
-   *  Refactored Section 7, and added a section on timing attacks
-      (<https://github.com/httpwg/http-core/issues/233>)
-
-   *  Changed "cacheable by default" to "heuristically cacheable"
-      throughout (<https://github.com/httpwg/http-core/issues/242>)
-
-C.8.  Since draft-ietf-httpbis-cache-06
-
-   *  In Section 3 and Section 5.2.2.3, change response cacheability to
-      only require understanding the response status code if the must-
-      understand cache directive is present (<https://github.com/httpwg/
-      http-core/issues/120>)
-
-   *  Change requirements for handling different forms of cache
-      directives in Section 5.2 (<https://github.com/httpwg/http-core/
-      issues/128>)
-
-   *  Fix typo in Section 5.2.2.10 (<https://github.com/httpwg/http-
-      core/issues/264>)
-
-   *  In Section 5.2.2.9 and Section 5.2.2.7, clarify "private" and
-      "public" so that they do not override all other cache directives
-      (<https://github.com/httpwg/http-core/issues/268>)
-
-   *  In Section 3, distinguish between private with and without
-      qualifying headers (<https://github.com/httpwg/http-core/
-      issues/270>)
-
-   *  In Section 4.1, clarify that any "*" as a member of Vary will
-      disable caching (<https://github.com/httpwg/http-core/issues/286>)
-
-   *  In Section 1.1, reference RFC 8174 as well
-      (<https://github.com/httpwg/http-core/issues/303>)
-
-C.9.  Since draft-ietf-httpbis-cache-07
-
-   *  Throughout, replace "effective request URI", "request-target" and
-      similar with "target URI" (<https://github.com/httpwg/http-core/
-      issues/259>)
-
-   *  In Section 5.2.2.9 and Section 5.2.2.7, make it clear that these
-      directives do not ignore other requirements for caching
-      (<https://github.com/httpwg/http-core/issues/320>)
-
-   *  In Section 3.3, move definition of "complete" into semantics
-      (<https://github.com/httpwg/http-core/issues/334>)
-
-C.10.  Since draft-ietf-httpbis-cache-08
-
-   *  Appendix A now uses the sender variant of the "#" list expansion
-      (<https://github.com/httpwg/http-core/issues/192>)
-
-C.11.  Since draft-ietf-httpbis-cache-09
-
-   *  In Section 5.1, discuss handling of invalid and multiple Age
-      header field values (<https://github.com/httpwg/http-core/
-      issues/193>)
-
-   *  Switch to xml2rfc v3 mode for draft generation
-      (<https://github.com/httpwg/http-core/issues/394>)
-
-C.12.  Since draft-ietf-httpbis-cache-10
-
-   *  In Section 5.2 (Cache-Control), adjust ABNF to allow empty lists
-      (<https://github.com/httpwg/http-core/issues/210>)
-
-C.13.  Since draft-ietf-httpbis-cache-11
-
-   *  None.
-
-C.14.  Since draft-ietf-httpbis-cache-12
-
-   *  In Section 4.2.4, remove 'no-store', as it won't be in cache in
-      the first place (<https://github.com/httpwg/http-core/issues/447>,
-      <https://www.rfc-editor.org/errata/eid6279>)
-
-   *  In Section 3.1, make it clear that only response headers need be
-      stored (<https://github.com/httpwg/http-core/issues/457>)
-
-   *  Rewrote "Updating Stored Header Fields" Section 3.2
-      (<https://github.com/httpwg/http-core/issues/458>)
-
-   *  In Section 4.2.1 clarify how to handle invalid and conflicting
-      directives (<https://github.com/httpwg/http-core/issues/460>)
-
-   *  In Section 4.3.3, mention retry of failed validation requests
-      (<https://github.com/httpwg/http-core/issues/462>)
-
-   *  In Section 4.3.3, clarify requirement on storing a full response
-      to a conditional request (<https://github.com/httpwg/http-core/
-      issues/463>)
-
-   *  In Section 5.1, clarify error handling
-      (<https://github.com/httpwg/http-core/issues/471>)
-
-   *  In Section 4.2, remove spurious "UTC" (<https://github.com/httpwg/
-      http-core/issues/472>)
-
-   *  In Section 4.2, correct the date-related rule names to consider
-      case-insensitive (<https://github.com/httpwg/http-core/
-      issues/473>)
-
-   *  In Section 6, strengthen recommendation for application caches to
-      pay attention to cache directives (<https://github.com/httpwg/
-      http-core/issues/474>)
-
-   *  In Section 4, mention collapsed requests
-      (<https://github.com/httpwg/http-core/issues/475>)
-
-   *  In Section 4.4, relax requirements on Content-Location and
-      Location invalidation (<https://github.com/httpwg/http-core/
-      issues/478>)
-
-   *  In Section 4.3.4, refine the exceptions to update on a 304
-      (<https://github.com/httpwg/http-core/issues/488>)
-
-   *  Moved table of Cache-Control directives into Section 8.2
-      (<https://github.com/httpwg/http-core/issues/506>)
-
-   *  In Section 1.2, remove unused core ABNF rules
-      (<https://github.com/httpwg/http-core/issues/529>)
-
-   *  Changed to using "payload data" when defining requirements about
-      the data being conveyed within a message, instead of the terms
-      "payload body" or "response body" or "representation body", since
-      they often get confused with the HTTP/1.1 message body (which
-      includes transfer coding) (<https://github.com/httpwg/http-core/
-      issues/553>)
-
-C.15.  Since draft-ietf-httpbis-cache-13
-
-   *  In Section 5.2.2.2, clarify requirements around generating an
-      error response (<https://github.com/httpwg/http-core/issues/608>)
-
-   *  Changed to using "content" instead of "payload" or "payload data"
-      to avoid confusion with the payload of version-specific messaging
-      frames (<https://github.com/httpwg/http-core/issues/654>)
-
-   *  In Section 4.3.4, clarify how multiple validators are handled
-      (<https://github.com/httpwg/http-core/issues/659>)
-
-   *  In Section 4.2.3, Section 5.2, and Section 5.2.2.4, remove notes
-      about very old HTTP/1.0 behaviours (<https://github.com/httpwg/
-      http-core/issues/660>)
-
-   *  In Section 5.2.2.3, modify operation to be more backwards-
-      compatible with existing implementations
-      (<https://github.com/httpwg/http-core/issues/661>)
-
-C.16.  Since draft-ietf-httpbis-cache-14
-
-   *  Fix subsection ordering in Section 5.2.2
-      (<https://github.com/httpwg/http-core/issues/674>)
-
-   *  In Section 2, define what a cache key is
-      (<https://github.com/httpwg/http-core/issues/728>)
-
-   *  In Section 3.1, clarify what cache proxy headers apply to
-      (<https://github.com/httpwg/http-core/issues/729>)
-
-   *  In Section 7.1, cache poisoning can affect private caches too
-      (<https://github.com/httpwg/http-core/issues/730>)
-
-   *  In Section 5.1, adjust handling of invalid values to match most
-      deployed caches (<https://github.com/httpwg/http-core/issues/778>)
-
-   *  In Section 5.3, mention parsing requirement relaxation
-      (<https://github.com/httpwg/http-core/issues/779>)
-
-C.17.  Since draft-ietf-httpbis-cache-15
-
-   *  In Section 4.3.1, tune description of relation between cache keys
-      and validators (<https://github.com/httpwg/http-core/issues/832>)
-
-C.18.  Since draft-ietf-httpbis-cache-16
-
-   This draft addresses mostly editorial issues raised during or past
-   IETF Last Call; see <https://github.com/httpwg/http-core/
-   issues?q=label%3Acaching+created%3A%3E2021-05-26> for a summary.
-
-   Furthermore:
-
-   *  Addressed Genart last call review comments
-      (<https://github.com/httpwg/http-core/issues/847>)
-
-   *  In Section 4.3.4, clarify that only selectable responses are
-      updated (<https://github.com/httpwg/http-core/issues/839>)
-
-C.19.  Since draft-ietf-httpbis-cache-17
-
-   *  Made reference to [HTTP/1.1] informative only
-      (<https://github.com/httpwg/http-core/issues/911>)
-
-   *  Move cache-related aspects of validator use from [HTTP] into
-      Section 4.3.1 (<https://github.com/httpwg/http-core/issues/933>)
-
-   *  Use term "clock" defined in Section 6.6.1 of [HTTP] throughout
-      (<https://github.com/httpwg/http-core/issues/953>)
-
-   *  Throughout, disambiguate "selected representation" and "selected
-      response" (now "chosen response") (<https://github.com/httpwg/
-      http-core/issues/958>)
-
-C.20.  Since draft-ietf-httpbis-cache-18
-
-   *  In Section 8.1, change status 'standard' to 'permanent'
-      (<https://github.com/httpwg/http-core/issues/978>)
-
-C.21.  Since draft-ietf-httpbis-cache-19
-
-   *  None.
+   intermediaries (Section 5.5).
 
 Acknowledgements
 
-   See Appendix "Acknowledgements" of [HTTP].
+   See the "Acknowledgements" section in [HTTP], which applies to this
+   document.
 
 Index
 
